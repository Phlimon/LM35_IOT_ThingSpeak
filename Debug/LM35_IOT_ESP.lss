
LM35_IOT_ESP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003684  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000152  00800060  00003684  00003718  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ab  008001b2  008001b2  0000386a  2**0
                  ALLOC
  3 .stab         00002d78  00000000  00000000  0000386c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001843  00000000  00000000  000065e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007f67  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000080d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ac0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b9b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bb18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bda5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c573  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3b       	cpi	r26, 0xB2	; 178
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 eb       	ldi	r26, 0xB2	; 178
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 35       	cpi	r26, 0x5D	; 93
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <main>
      8a:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ea       	ldi	r26, 0xAA	; 170
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fc 17 	jmp	0x2ff8	; 0x2ff8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a ea       	ldi	r24, 0xAA	; 170
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fc 17 	jmp	0x2ff8	; 0x2ff8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidIntialization>:
/*Description:
  Inputs:
  Outputs:
*/
void ADC_voidIntialization(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	//Reference Voltage Configuration
#if Voltage_REF == ADC_AVCC
	SET_BIT(ADMUX, REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24
	//Resolution Configuration
#if Resolution == ADC_ADCL
	CLR_BIT(ADMUX, ADLAR);

#elif Resolution == ADC_ADCH
	SET_BIT(ADMUX, ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24
#endif


	//Prescaler
#if Prescaler == ADC_Prescaler_2
	CLR_BIT(ADCSRA, ADPS0);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8e 7f       	andi	r24, 0xFE	; 254
     b84:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADPS1);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8d 7f       	andi	r24, 0xFD	; 253
     b92:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADPS2);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8b 7f       	andi	r24, 0xFB	; 251
     ba0:	8c 93       	st	X, r24
#endif


	//ADC Enabled of Disabled
#if ADC == ADC_Enable
	SET_BIT(ADCSRA, ADEN);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	8c 93       	st	X, r24
#endif


	//ADC Interrupt Enabled of Disabled
#if Interrupt == ADC_Interrupt_Enable
	SET_BIT(ADCSRA, ADIE);
     bb0:	a6 e2       	ldi	r26, 0x26	; 38
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e6 e2       	ldi	r30, 0x26	; 38
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	88 60       	ori	r24, 0x08	; 8
     bbc:	8c 93       	st	X, r24

#else
	CLR_BIT(ADCSRA, ADIE);

#endif
}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <ADC_u8GetADCBlocking>:
/*Description:
  Inputs:
  Outputs:
*/
u8 ADC_u8GetADCBlocking(u8 Copy_u8Channel_NB, u16 * Copy_u16Value)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	00 d0       	rcall	.+0      	; 0xbca <ADC_u8GetADCBlocking+0x6>
     bca:	00 d0       	rcall	.+0      	; 0xbcc <ADC_u8GetADCBlocking+0x8>
     bcc:	00 d0       	rcall	.+0      	; 0xbce <ADC_u8GetADCBlocking+0xa>
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	8c 83       	std	Y+4, r24	; 0x04
     bd4:	7e 83       	std	Y+6, r23	; 0x06
     bd6:	6d 83       	std	Y+5, r22	; 0x05
	u8 The_Channel, Local_u8Error, Local_u8LowValue;

	if(The_Channel > 31)
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	80 32       	cpi	r24, 0x20	; 32
     bdc:	10 f0       	brcs	.+4      	; 0xbe2 <ADC_u8GetADCBlocking+0x1e>
	{
		Local_u8Error = 1;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	8a 83       	std	Y+2, r24	; 0x02

	//the anding is for make the last 3 bits as it is with no change
	//and make the first 5 bits with zeros
	//then the oring for add the value of first 3 bits according to the channel
//	The_Channel = ((ADMUX && 0xE0) | Copy_u8Channel_NB);
	ADMUX &= 0xE0;
     be2:	a7 e2       	ldi	r26, 0x27	; 39
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e7 e2       	ldi	r30, 0x27	; 39
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	80 7e       	andi	r24, 0xE0	; 224
     bee:	8c 93       	st	X, r24
	ADMUX |= Copy_u8Channel_NB;
     bf0:	a7 e2       	ldi	r26, 0x27	; 39
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	e7 e2       	ldi	r30, 0x27	; 39
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	90 81       	ld	r25, Z
     bfa:	8c 81       	ldd	r24, Y+4	; 0x04
     bfc:	89 2b       	or	r24, r25
     bfe:	8c 93       	st	X, r24

	//Start Conversion
	if(ADC_StConversion == Start)
	{
		SET_BIT(ADCSRA, ADSC);
     c00:	a6 e2       	ldi	r26, 0x26	; 38
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e6 e2       	ldi	r30, 0x26	; 38
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	80 64       	ori	r24, 0x40	; 64
     c0c:	8c 93       	st	X, r24
	{
		CLR_BIT(ADCSRA, ADSC);
	}

	//Wait will it ends the conversion
	while(! GET_BIT(ADCSRA, ADIF))
     c0e:	e6 e2       	ldi	r30, 0x26	; 38
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	82 95       	swap	r24
     c16:	8f 70       	andi	r24, 0x0F	; 15
     c18:	88 2f       	mov	r24, r24
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	81 70       	andi	r24, 0x01	; 1
     c1e:	90 70       	andi	r25, 0x00	; 0
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	a9 f3       	breq	.-22     	; 0xc0e <ADC_u8GetADCBlocking+0x4a>
		{

		}
	SET_BIT(ADCSRA, ADIF);
     c24:	a6 e2       	ldi	r26, 0x26	; 38
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e6 e2       	ldi	r30, 0x26	; 38
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	80 61       	ori	r24, 0x10	; 16
     c30:	8c 93       	st	X, r24
		Local_u8LowValue = ADCL;
		*Copy_u16Value = (Local_u8LowValue) | (ADCH << 8);
	}
	else
	{
		*Copy_u16Value = ADCH;
     c32:	e5 e2       	ldi	r30, 0x25	; 37
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	88 2f       	mov	r24, r24
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	ed 81       	ldd	r30, Y+5	; 0x05
     c3e:	fe 81       	ldd	r31, Y+6	; 0x06
     c40:	91 83       	std	Z+1, r25	; 0x01
     c42:	80 83       	st	Z, r24
	}

	return Local_u8Error;
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
}
     c46:	26 96       	adiw	r28, 0x06	; 6
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	f8 94       	cli
     c4c:	de bf       	out	0x3e, r29	; 62
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	cd bf       	out	0x3d, r28	; 61
     c52:	cf 91       	pop	r28
     c54:	df 91       	pop	r29
     c56:	08 95       	ret

00000c58 <DIO_u8SetPortDirection>:
  Inputs: port number, direction
  Outputs: Error State -> 0 No Error
                       -> 1 Error
*/
u8 DIO_u8SetPortDirection(u8 Copy_u8PortNB, u8 Copy_u8Dir)
{
     c58:	df 93       	push	r29
     c5a:	cf 93       	push	r28
     c5c:	00 d0       	rcall	.+0      	; 0xc5e <DIO_u8SetPortDirection+0x6>
     c5e:	00 d0       	rcall	.+0      	; 0xc60 <DIO_u8SetPortDirection+0x8>
     c60:	0f 92       	push	r0
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
     c66:	8a 83       	std	Y+2, r24	; 0x02
     c68:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
     c6a:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8PortNB)
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	28 2f       	mov	r18, r24
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	3d 83       	std	Y+5, r19	; 0x05
     c74:	2c 83       	std	Y+4, r18	; 0x04
     c76:	8c 81       	ldd	r24, Y+4	; 0x04
     c78:	9d 81       	ldd	r25, Y+5	; 0x05
     c7a:	81 30       	cpi	r24, 0x01	; 1
     c7c:	91 05       	cpc	r25, r1
     c7e:	d1 f0       	breq	.+52     	; 0xcb4 <DIO_u8SetPortDirection+0x5c>
     c80:	2c 81       	ldd	r18, Y+4	; 0x04
     c82:	3d 81       	ldd	r19, Y+5	; 0x05
     c84:	22 30       	cpi	r18, 0x02	; 2
     c86:	31 05       	cpc	r19, r1
     c88:	2c f4       	brge	.+10     	; 0xc94 <DIO_u8SetPortDirection+0x3c>
     c8a:	8c 81       	ldd	r24, Y+4	; 0x04
     c8c:	9d 81       	ldd	r25, Y+5	; 0x05
     c8e:	00 97       	sbiw	r24, 0x00	; 0
     c90:	61 f0       	breq	.+24     	; 0xcaa <DIO_u8SetPortDirection+0x52>
     c92:	1f c0       	rjmp	.+62     	; 0xcd2 <DIO_u8SetPortDirection+0x7a>
     c94:	2c 81       	ldd	r18, Y+4	; 0x04
     c96:	3d 81       	ldd	r19, Y+5	; 0x05
     c98:	22 30       	cpi	r18, 0x02	; 2
     c9a:	31 05       	cpc	r19, r1
     c9c:	81 f0       	breq	.+32     	; 0xcbe <DIO_u8SetPortDirection+0x66>
     c9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ca0:	9d 81       	ldd	r25, Y+5	; 0x05
     ca2:	83 30       	cpi	r24, 0x03	; 3
     ca4:	91 05       	cpc	r25, r1
     ca6:	81 f0       	breq	.+32     	; 0xcc8 <DIO_u8SetPortDirection+0x70>
     ca8:	14 c0       	rjmp	.+40     	; 0xcd2 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_PORT_0:
		DDRA = Copy_u8Dir;
     caa:	ea e3       	ldi	r30, 0x3A	; 58
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	8b 81       	ldd	r24, Y+3	; 0x03
     cb0:	80 83       	st	Z, r24
     cb2:	11 c0       	rjmp	.+34     	; 0xcd6 <DIO_u8SetPortDirection+0x7e>
		break;
	case DIO_PORT_1:
		DDRB = Copy_u8Dir;
     cb4:	e7 e3       	ldi	r30, 0x37	; 55
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	80 83       	st	Z, r24
     cbc:	0c c0       	rjmp	.+24     	; 0xcd6 <DIO_u8SetPortDirection+0x7e>
		break;
	case DIO_PORT_2:
		DDRC = Copy_u8Dir;
     cbe:	e4 e3       	ldi	r30, 0x34	; 52
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	80 83       	st	Z, r24
     cc6:	07 c0       	rjmp	.+14     	; 0xcd6 <DIO_u8SetPortDirection+0x7e>
		break;
	case DIO_PORT_3:
		DDRD = Copy_u8Dir;
     cc8:	e1 e3       	ldi	r30, 0x31	; 49
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	80 83       	st	Z, r24
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_u8SetPortDirection+0x7e>
		break;
	default :
		Local_u8Error = 1;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error;
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
}
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <DIO_u8SetPortValue>:
  Inputs: port number, value(HIGH, LOW) 0b01100110
  Outputs: Error State -> 0 No Error
                       -> 1 Error
*/
u8 DIO_u8SetPortValue(u8 Copy_u8PortNB, u8 Copy_u8Value)
{
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	00 d0       	rcall	.+0      	; 0xcee <DIO_u8SetPortValue+0x6>
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <DIO_u8SetPortValue+0x8>
     cf0:	0f 92       	push	r0
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	8a 83       	std	Y+2, r24	; 0x02
     cf8:	6b 83       	std	Y+3, r22	; 0x03
	/*Local Error Variable*/
	u8 Local_u8Error = 0;
     cfa:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8PortNB)
     cfc:	8a 81       	ldd	r24, Y+2	; 0x02
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	3d 83       	std	Y+5, r19	; 0x05
     d04:	2c 83       	std	Y+4, r18	; 0x04
     d06:	8c 81       	ldd	r24, Y+4	; 0x04
     d08:	9d 81       	ldd	r25, Y+5	; 0x05
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	91 05       	cpc	r25, r1
     d0e:	d1 f0       	breq	.+52     	; 0xd44 <DIO_u8SetPortValue+0x5c>
     d10:	2c 81       	ldd	r18, Y+4	; 0x04
     d12:	3d 81       	ldd	r19, Y+5	; 0x05
     d14:	22 30       	cpi	r18, 0x02	; 2
     d16:	31 05       	cpc	r19, r1
     d18:	2c f4       	brge	.+10     	; 0xd24 <DIO_u8SetPortValue+0x3c>
     d1a:	8c 81       	ldd	r24, Y+4	; 0x04
     d1c:	9d 81       	ldd	r25, Y+5	; 0x05
     d1e:	00 97       	sbiw	r24, 0x00	; 0
     d20:	61 f0       	breq	.+24     	; 0xd3a <DIO_u8SetPortValue+0x52>
     d22:	1f c0       	rjmp	.+62     	; 0xd62 <DIO_u8SetPortValue+0x7a>
     d24:	2c 81       	ldd	r18, Y+4	; 0x04
     d26:	3d 81       	ldd	r19, Y+5	; 0x05
     d28:	22 30       	cpi	r18, 0x02	; 2
     d2a:	31 05       	cpc	r19, r1
     d2c:	81 f0       	breq	.+32     	; 0xd4e <DIO_u8SetPortValue+0x66>
     d2e:	8c 81       	ldd	r24, Y+4	; 0x04
     d30:	9d 81       	ldd	r25, Y+5	; 0x05
     d32:	83 30       	cpi	r24, 0x03	; 3
     d34:	91 05       	cpc	r25, r1
     d36:	81 f0       	breq	.+32     	; 0xd58 <DIO_u8SetPortValue+0x70>
     d38:	14 c0       	rjmp	.+40     	; 0xd62 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_PORT_0:
		PORTA = Copy_u8Value;
     d3a:	eb e3       	ldi	r30, 0x3B	; 59
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	80 83       	st	Z, r24
     d42:	11 c0       	rjmp	.+34     	; 0xd66 <DIO_u8SetPortValue+0x7e>
		break;
	case DIO_PORT_1:
		PORTB = Copy_u8Value;
     d44:	e8 e3       	ldi	r30, 0x38	; 56
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	8b 81       	ldd	r24, Y+3	; 0x03
     d4a:	80 83       	st	Z, r24
     d4c:	0c c0       	rjmp	.+24     	; 0xd66 <DIO_u8SetPortValue+0x7e>
		break;
	case DIO_PORT_2:
		PORTC = Copy_u8Value;
     d4e:	e5 e3       	ldi	r30, 0x35	; 53
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	80 83       	st	Z, r24
     d56:	07 c0       	rjmp	.+14     	; 0xd66 <DIO_u8SetPortValue+0x7e>
		break;
	case DIO_PORT_3:
		PORTD = Copy_u8Value;
     d58:	e2 e3       	ldi	r30, 0x32	; 50
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	80 83       	st	Z, r24
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <DIO_u8SetPortValue+0x7e>
		break;
	default :
		Local_u8Error = 1;
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return Local_u8Error;
     d66:	89 81       	ldd	r24, Y+1	; 0x01
}
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <DIO_u8SetPinDirection>:
  Inputs: port number, pin number, direction
  Outputs: Error State -> 0 No Error
                       -> 1 Error
*/
u8 DIO_u8SetPinDirection(u8 Copy_u8PortNB, u8 Copy_u8PinNB, u8 Copy_u8Dir)
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <DIO_u8SetPinDirection+0x6>
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <DIO_u8SetPinDirection+0x8>
     d80:	00 d0       	rcall	.+0      	; 0xd82 <DIO_u8SetPinDirection+0xa>
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	8a 83       	std	Y+2, r24	; 0x02
     d88:	6b 83       	std	Y+3, r22	; 0x03
     d8a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8Error = 0;
     d8c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PinNB > DIO_PIN_7)
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	88 30       	cpi	r24, 0x08	; 8
     d92:	18 f0       	brcs	.+6      	; 0xd9a <DIO_u8SetPinDirection+0x22>
	{
		Local_u8Error = 1;
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	89 83       	std	Y+1, r24	; 0x01
     d98:	b5 c0       	rjmp	.+362    	; 0xf04 <DIO_u8SetPinDirection+0x18c>
	}
	else if((Copy_u8Dir!=DIO_INPUT)&&(Copy_u8Dir!=DIO_OUTPUT))
     d9a:	8c 81       	ldd	r24, Y+4	; 0x04
     d9c:	88 23       	and	r24, r24
     d9e:	31 f0       	breq	.+12     	; 0xdac <DIO_u8SetPinDirection+0x34>
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	81 30       	cpi	r24, 0x01	; 1
     da4:	19 f0       	breq	.+6      	; 0xdac <DIO_u8SetPinDirection+0x34>
	{
		Local_u8Error = 1;
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	89 83       	std	Y+1, r24	; 0x01
     daa:	ac c0       	rjmp	.+344    	; 0xf04 <DIO_u8SetPinDirection+0x18c>
	}
	else
	{
		switch(Copy_u8PortNB)
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	3e 83       	std	Y+6, r19	; 0x06
     db4:	2d 83       	std	Y+5, r18	; 0x05
     db6:	6d 81       	ldd	r22, Y+5	; 0x05
     db8:	7e 81       	ldd	r23, Y+6	; 0x06
     dba:	61 30       	cpi	r22, 0x01	; 1
     dbc:	71 05       	cpc	r23, r1
     dbe:	d1 f1       	breq	.+116    	; 0xe34 <DIO_u8SetPinDirection+0xbc>
     dc0:	8d 81       	ldd	r24, Y+5	; 0x05
     dc2:	9e 81       	ldd	r25, Y+6	; 0x06
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	91 05       	cpc	r25, r1
     dc8:	34 f4       	brge	.+12     	; 0xdd6 <DIO_u8SetPinDirection+0x5e>
     dca:	2d 81       	ldd	r18, Y+5	; 0x05
     dcc:	3e 81       	ldd	r19, Y+6	; 0x06
     dce:	21 15       	cp	r18, r1
     dd0:	31 05       	cpc	r19, r1
     dd2:	71 f0       	breq	.+28     	; 0xdf0 <DIO_u8SetPinDirection+0x78>
     dd4:	95 c0       	rjmp	.+298    	; 0xf00 <DIO_u8SetPinDirection+0x188>
     dd6:	6d 81       	ldd	r22, Y+5	; 0x05
     dd8:	7e 81       	ldd	r23, Y+6	; 0x06
     dda:	62 30       	cpi	r22, 0x02	; 2
     ddc:	71 05       	cpc	r23, r1
     dde:	09 f4       	brne	.+2      	; 0xde2 <DIO_u8SetPinDirection+0x6a>
     de0:	4b c0       	rjmp	.+150    	; 0xe78 <DIO_u8SetPinDirection+0x100>
     de2:	8d 81       	ldd	r24, Y+5	; 0x05
     de4:	9e 81       	ldd	r25, Y+6	; 0x06
     de6:	83 30       	cpi	r24, 0x03	; 3
     de8:	91 05       	cpc	r25, r1
     dea:	09 f4       	brne	.+2      	; 0xdee <DIO_u8SetPinDirection+0x76>
     dec:	67 c0       	rjmp	.+206    	; 0xebc <DIO_u8SetPinDirection+0x144>
     dee:	88 c0       	rjmp	.+272    	; 0xf00 <DIO_u8SetPinDirection+0x188>
		{
		case DIO_PORT_0:
			ASSIGN_BIT(DDRA,Copy_u8PinNB, Copy_u8Dir);
     df0:	aa e3       	ldi	r26, 0x3A	; 58
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	ea e3       	ldi	r30, 0x3A	; 58
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	48 2f       	mov	r20, r24
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <DIO_u8SetPinDirection+0x94>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	2a 95       	dec	r18
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <DIO_u8SetPinDirection+0x90>
     e10:	80 95       	com	r24
     e12:	48 23       	and	r20, r24
     e14:	8c 81       	ldd	r24, Y+4	; 0x04
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	88 2f       	mov	r24, r24
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	b9 01       	movw	r22, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <DIO_u8SetPinDirection+0xb0>
     e24:	66 0f       	add	r22, r22
     e26:	77 1f       	adc	r23, r23
     e28:	8a 95       	dec	r24
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <DIO_u8SetPinDirection+0xac>
     e2c:	cb 01       	movw	r24, r22
     e2e:	84 2b       	or	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	68 c0       	rjmp	.+208    	; 0xf04 <DIO_u8SetPinDirection+0x18c>
			break;
		case DIO_PORT_1:
			ASSIGN_BIT(DDRB,Copy_u8PinNB, Copy_u8Dir);
     e34:	a7 e3       	ldi	r26, 0x37	; 55
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e7 e3       	ldi	r30, 0x37	; 55
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	48 2f       	mov	r20, r24
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <DIO_u8SetPinDirection+0xd8>
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	2a 95       	dec	r18
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <DIO_u8SetPinDirection+0xd4>
     e54:	80 95       	com	r24
     e56:	48 23       	and	r20, r24
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	88 2f       	mov	r24, r24
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	b9 01       	movw	r22, r18
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <DIO_u8SetPinDirection+0xf4>
     e68:	66 0f       	add	r22, r22
     e6a:	77 1f       	adc	r23, r23
     e6c:	8a 95       	dec	r24
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <DIO_u8SetPinDirection+0xf0>
     e70:	cb 01       	movw	r24, r22
     e72:	84 2b       	or	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	46 c0       	rjmp	.+140    	; 0xf04 <DIO_u8SetPinDirection+0x18c>
			break;
		case DIO_PORT_2:
			ASSIGN_BIT(DDRC,Copy_u8PinNB, Copy_u8Dir);
     e78:	a4 e3       	ldi	r26, 0x34	; 52
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e4 e3       	ldi	r30, 0x34	; 52
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	48 2f       	mov	r20, r24
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_u8SetPinDirection+0x11c>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	2a 95       	dec	r18
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_u8SetPinDirection+0x118>
     e98:	80 95       	com	r24
     e9a:	48 23       	and	r20, r24
     e9c:	8c 81       	ldd	r24, Y+4	; 0x04
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	88 2f       	mov	r24, r24
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	b9 01       	movw	r22, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <DIO_u8SetPinDirection+0x138>
     eac:	66 0f       	add	r22, r22
     eae:	77 1f       	adc	r23, r23
     eb0:	8a 95       	dec	r24
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <DIO_u8SetPinDirection+0x134>
     eb4:	cb 01       	movw	r24, r22
     eb6:	84 2b       	or	r24, r20
     eb8:	8c 93       	st	X, r24
     eba:	24 c0       	rjmp	.+72     	; 0xf04 <DIO_u8SetPinDirection+0x18c>
			break;
		case DIO_PORT_3:
			ASSIGN_BIT(DDRD,Copy_u8PinNB, Copy_u8Dir);
     ebc:	a1 e3       	ldi	r26, 0x31	; 49
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e1 e3       	ldi	r30, 0x31	; 49
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	48 2f       	mov	r20, r24
     ec8:	8b 81       	ldd	r24, Y+3	; 0x03
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <DIO_u8SetPinDirection+0x160>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	2a 95       	dec	r18
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <DIO_u8SetPinDirection+0x15c>
     edc:	80 95       	com	r24
     ede:	48 23       	and	r20, r24
     ee0:	8c 81       	ldd	r24, Y+4	; 0x04
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	b9 01       	movw	r22, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <DIO_u8SetPinDirection+0x17c>
     ef0:	66 0f       	add	r22, r22
     ef2:	77 1f       	adc	r23, r23
     ef4:	8a 95       	dec	r24
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <DIO_u8SetPinDirection+0x178>
     ef8:	cb 01       	movw	r24, r22
     efa:	84 2b       	or	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <DIO_u8SetPinDirection+0x18c>
			break;
		default:
			Local_u8Error = 1;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return Local_u8Error;
     f04:	89 81       	ldd	r24, Y+1	; 0x01
}
     f06:	26 96       	adiw	r28, 0x06	; 6
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	f8 94       	cli
     f0c:	de bf       	out	0x3e, r29	; 62
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	cd bf       	out	0x3d, r28	; 61
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	08 95       	ret

00000f18 <DIO_u8SetPinValue>:
  Inputs: port number, pin value, value(HIGH, LOW)(0, 1)
  Outputs: Error State -> 0 No Error
                       -> 1 Error
*/
u8 DIO_u8SetPinValue(u8 Copy_u8PortNB, u8 Copy_u8PinNB, u8 Copy_u8Value)
{
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <DIO_u8SetPinValue+0x6>
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <DIO_u8SetPinValue+0x8>
     f20:	00 d0       	rcall	.+0      	; 0xf22 <DIO_u8SetPinValue+0xa>
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	8a 83       	std	Y+2, r24	; 0x02
     f28:	6b 83       	std	Y+3, r22	; 0x03
     f2a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8Error = 0;
     f2c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PinNB > DIO_PIN_7)
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	88 30       	cpi	r24, 0x08	; 8
     f32:	18 f0       	brcs	.+6      	; 0xf3a <DIO_u8SetPinValue+0x22>
	{
		Local_u8Error = 1;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	89 83       	std	Y+1, r24	; 0x01
     f38:	b5 c0       	rjmp	.+362    	; 0x10a4 <DIO_u8SetPinValue+0x18c>
	}
	else if((Copy_u8Value!=DIO_LOW)&&(Copy_u8Value!=DIO_HIGH))
     f3a:	8c 81       	ldd	r24, Y+4	; 0x04
     f3c:	88 23       	and	r24, r24
     f3e:	31 f0       	breq	.+12     	; 0xf4c <DIO_u8SetPinValue+0x34>
     f40:	8c 81       	ldd	r24, Y+4	; 0x04
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	19 f0       	breq	.+6      	; 0xf4c <DIO_u8SetPinValue+0x34>
	{
		Local_u8Error = 1;
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	89 83       	std	Y+1, r24	; 0x01
     f4a:	ac c0       	rjmp	.+344    	; 0x10a4 <DIO_u8SetPinValue+0x18c>
	}
	else
	{
		switch(Copy_u8PortNB)
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	3e 83       	std	Y+6, r19	; 0x06
     f54:	2d 83       	std	Y+5, r18	; 0x05
     f56:	6d 81       	ldd	r22, Y+5	; 0x05
     f58:	7e 81       	ldd	r23, Y+6	; 0x06
     f5a:	61 30       	cpi	r22, 0x01	; 1
     f5c:	71 05       	cpc	r23, r1
     f5e:	d1 f1       	breq	.+116    	; 0xfd4 <DIO_u8SetPinValue+0xbc>
     f60:	8d 81       	ldd	r24, Y+5	; 0x05
     f62:	9e 81       	ldd	r25, Y+6	; 0x06
     f64:	82 30       	cpi	r24, 0x02	; 2
     f66:	91 05       	cpc	r25, r1
     f68:	34 f4       	brge	.+12     	; 0xf76 <DIO_u8SetPinValue+0x5e>
     f6a:	2d 81       	ldd	r18, Y+5	; 0x05
     f6c:	3e 81       	ldd	r19, Y+6	; 0x06
     f6e:	21 15       	cp	r18, r1
     f70:	31 05       	cpc	r19, r1
     f72:	71 f0       	breq	.+28     	; 0xf90 <DIO_u8SetPinValue+0x78>
     f74:	95 c0       	rjmp	.+298    	; 0x10a0 <DIO_u8SetPinValue+0x188>
     f76:	6d 81       	ldd	r22, Y+5	; 0x05
     f78:	7e 81       	ldd	r23, Y+6	; 0x06
     f7a:	62 30       	cpi	r22, 0x02	; 2
     f7c:	71 05       	cpc	r23, r1
     f7e:	09 f4       	brne	.+2      	; 0xf82 <DIO_u8SetPinValue+0x6a>
     f80:	4b c0       	rjmp	.+150    	; 0x1018 <DIO_u8SetPinValue+0x100>
     f82:	8d 81       	ldd	r24, Y+5	; 0x05
     f84:	9e 81       	ldd	r25, Y+6	; 0x06
     f86:	83 30       	cpi	r24, 0x03	; 3
     f88:	91 05       	cpc	r25, r1
     f8a:	09 f4       	brne	.+2      	; 0xf8e <DIO_u8SetPinValue+0x76>
     f8c:	67 c0       	rjmp	.+206    	; 0x105c <DIO_u8SetPinValue+0x144>
     f8e:	88 c0       	rjmp	.+272    	; 0x10a0 <DIO_u8SetPinValue+0x188>
		{
		case DIO_PORT_0:
			ASSIGN_BIT(PORTA,Copy_u8PinNB, Copy_u8Value);
     f90:	ab e3       	ldi	r26, 0x3B	; 59
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	eb e3       	ldi	r30, 0x3B	; 59
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	48 2f       	mov	r20, r24
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <DIO_u8SetPinValue+0x94>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	2a 95       	dec	r18
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <DIO_u8SetPinValue+0x90>
     fb0:	80 95       	com	r24
     fb2:	48 23       	and	r20, r24
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	88 2f       	mov	r24, r24
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	b9 01       	movw	r22, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_u8SetPinValue+0xb0>
     fc4:	66 0f       	add	r22, r22
     fc6:	77 1f       	adc	r23, r23
     fc8:	8a 95       	dec	r24
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_u8SetPinValue+0xac>
     fcc:	cb 01       	movw	r24, r22
     fce:	84 2b       	or	r24, r20
     fd0:	8c 93       	st	X, r24
     fd2:	68 c0       	rjmp	.+208    	; 0x10a4 <DIO_u8SetPinValue+0x18c>
			break;
		case DIO_PORT_1:
			ASSIGN_BIT(PORTB,Copy_u8PinNB, Copy_u8Value);
     fd4:	a8 e3       	ldi	r26, 0x38	; 56
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e8 e3       	ldi	r30, 0x38	; 56
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	48 2f       	mov	r20, r24
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <DIO_u8SetPinValue+0xd8>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	2a 95       	dec	r18
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <DIO_u8SetPinValue+0xd4>
     ff4:	80 95       	com	r24
     ff6:	48 23       	and	r20, r24
     ff8:	8c 81       	ldd	r24, Y+4	; 0x04
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	b9 01       	movw	r22, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_u8SetPinValue+0xf4>
    1008:	66 0f       	add	r22, r22
    100a:	77 1f       	adc	r23, r23
    100c:	8a 95       	dec	r24
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_u8SetPinValue+0xf0>
    1010:	cb 01       	movw	r24, r22
    1012:	84 2b       	or	r24, r20
    1014:	8c 93       	st	X, r24
    1016:	46 c0       	rjmp	.+140    	; 0x10a4 <DIO_u8SetPinValue+0x18c>
			break;
		case DIO_PORT_2:
			ASSIGN_BIT(PORTC,Copy_u8PinNB, Copy_u8Value);
    1018:	a5 e3       	ldi	r26, 0x35	; 53
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e5 e3       	ldi	r30, 0x35	; 53
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <DIO_u8SetPinValue+0x11c>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	2a 95       	dec	r18
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <DIO_u8SetPinValue+0x118>
    1038:	80 95       	com	r24
    103a:	48 23       	and	r20, r24
    103c:	8c 81       	ldd	r24, Y+4	; 0x04
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	88 2f       	mov	r24, r24
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	b9 01       	movw	r22, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_u8SetPinValue+0x138>
    104c:	66 0f       	add	r22, r22
    104e:	77 1f       	adc	r23, r23
    1050:	8a 95       	dec	r24
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_u8SetPinValue+0x134>
    1054:	cb 01       	movw	r24, r22
    1056:	84 2b       	or	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	24 c0       	rjmp	.+72     	; 0x10a4 <DIO_u8SetPinValue+0x18c>
			break;
		case DIO_PORT_3:
			ASSIGN_BIT(PORTD,Copy_u8PinNB, Copy_u8Value);
    105c:	a2 e3       	ldi	r26, 0x32	; 50
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e2 e3       	ldi	r30, 0x32	; 50
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <DIO_u8SetPinValue+0x160>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	2a 95       	dec	r18
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <DIO_u8SetPinValue+0x15c>
    107c:	80 95       	com	r24
    107e:	48 23       	and	r20, r24
    1080:	8c 81       	ldd	r24, Y+4	; 0x04
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	88 2f       	mov	r24, r24
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	b9 01       	movw	r22, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <DIO_u8SetPinValue+0x17c>
    1090:	66 0f       	add	r22, r22
    1092:	77 1f       	adc	r23, r23
    1094:	8a 95       	dec	r24
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <DIO_u8SetPinValue+0x178>
    1098:	cb 01       	movw	r24, r22
    109a:	84 2b       	or	r24, r20
    109c:	8c 93       	st	X, r24
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <DIO_u8SetPinValue+0x18c>
			break;
		default:
			Local_u8Error = 1;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return Local_u8Error;
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10a6:	26 96       	adiw	r28, 0x06	; 6
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <DIO_u8GetPortValue>:
  Inputs: port number, address of value(HIGH, LOW) because it is a pointer
  Outputs: Error State -> 0 No Error
                       -> 1 Error
*/
u8 DIO_u8GetPortValue(u8 Copy_u8PortNB, u8 *Copy_u8Value)
{
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	00 d0       	rcall	.+0      	; 0x10be <DIO_u8GetPortValue+0x6>
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <DIO_u8GetPortValue+0x8>
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <DIO_u8GetPortValue+0xa>
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	8a 83       	std	Y+2, r24	; 0x02
    10c8:	7c 83       	std	Y+4, r23	; 0x04
    10ca:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Error;

	if(Copy_u8Value == NULL_POINTER)
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	9c 81       	ldd	r25, Y+4	; 0x04
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	19 f4       	brne	.+6      	; 0x10da <DIO_u8GetPortValue+0x22>
	{
		Local_u8Error = 1;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	89 83       	std	Y+1, r24	; 0x01
    10d8:	3d c0       	rjmp	.+122    	; 0x1154 <DIO_u8GetPortValue+0x9c>
	}
	else
	{
		switch(Copy_u8PortNB)
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	3e 83       	std	Y+6, r19	; 0x06
    10e2:	2d 83       	std	Y+5, r18	; 0x05
    10e4:	8d 81       	ldd	r24, Y+5	; 0x05
    10e6:	9e 81       	ldd	r25, Y+6	; 0x06
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	91 05       	cpc	r25, r1
    10ec:	e1 f0       	breq	.+56     	; 0x1126 <DIO_u8GetPortValue+0x6e>
    10ee:	2d 81       	ldd	r18, Y+5	; 0x05
    10f0:	3e 81       	ldd	r19, Y+6	; 0x06
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	2c f4       	brge	.+10     	; 0x1102 <DIO_u8GetPortValue+0x4a>
    10f8:	8d 81       	ldd	r24, Y+5	; 0x05
    10fa:	9e 81       	ldd	r25, Y+6	; 0x06
    10fc:	00 97       	sbiw	r24, 0x00	; 0
    10fe:	61 f0       	breq	.+24     	; 0x1118 <DIO_u8GetPortValue+0x60>
    1100:	27 c0       	rjmp	.+78     	; 0x1150 <DIO_u8GetPortValue+0x98>
    1102:	2d 81       	ldd	r18, Y+5	; 0x05
    1104:	3e 81       	ldd	r19, Y+6	; 0x06
    1106:	22 30       	cpi	r18, 0x02	; 2
    1108:	31 05       	cpc	r19, r1
    110a:	a1 f0       	breq	.+40     	; 0x1134 <DIO_u8GetPortValue+0x7c>
    110c:	8d 81       	ldd	r24, Y+5	; 0x05
    110e:	9e 81       	ldd	r25, Y+6	; 0x06
    1110:	83 30       	cpi	r24, 0x03	; 3
    1112:	91 05       	cpc	r25, r1
    1114:	b1 f0       	breq	.+44     	; 0x1142 <DIO_u8GetPortValue+0x8a>
    1116:	1c c0       	rjmp	.+56     	; 0x1150 <DIO_u8GetPortValue+0x98>
		{
		case DIO_PORT_0:
			(*Copy_u8Value) = PINA;
    1118:	e9 e3       	ldi	r30, 0x39	; 57
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	eb 81       	ldd	r30, Y+3	; 0x03
    1120:	fc 81       	ldd	r31, Y+4	; 0x04
    1122:	80 83       	st	Z, r24
    1124:	17 c0       	rjmp	.+46     	; 0x1154 <DIO_u8GetPortValue+0x9c>
			break;
		case DIO_PORT_1:
			(*Copy_u8Value) = PINB;
    1126:	e6 e3       	ldi	r30, 0x36	; 54
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	eb 81       	ldd	r30, Y+3	; 0x03
    112e:	fc 81       	ldd	r31, Y+4	; 0x04
    1130:	80 83       	st	Z, r24
    1132:	10 c0       	rjmp	.+32     	; 0x1154 <DIO_u8GetPortValue+0x9c>
			break;
		case DIO_PORT_2:
			(*Copy_u8Value) = PINC;
    1134:	e3 e3       	ldi	r30, 0x33	; 51
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	eb 81       	ldd	r30, Y+3	; 0x03
    113c:	fc 81       	ldd	r31, Y+4	; 0x04
    113e:	80 83       	st	Z, r24
    1140:	09 c0       	rjmp	.+18     	; 0x1154 <DIO_u8GetPortValue+0x9c>
			break;
		case DIO_PORT_3:
			(*Copy_u8Value) = PIND;
    1142:	e0 e3       	ldi	r30, 0x30	; 48
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	eb 81       	ldd	r30, Y+3	; 0x03
    114a:	fc 81       	ldd	r31, Y+4	; 0x04
    114c:	80 83       	st	Z, r24
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_u8GetPortValue+0x9c>
			break;
		default:
			Local_u8Error = 1;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Local_u8Error;
    1154:	89 81       	ldd	r24, Y+1	; 0x01
}
    1156:	26 96       	adiw	r28, 0x06	; 6
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <DIO_u8GetPinValue>:
  Inputs: port number, pin number, address of value(HIGH, LOW) because it is a pointer
  Outputs: Error State -> 0 No Error
                       -> 1 Error
*/
u8 DIO_u8GetPinValue(u8 Copy_u8PortNB, u8 Copy_u8PinNB, u8 *Copy_u8Value)
{
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	27 97       	sbiw	r28, 0x07	; 7
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	8a 83       	std	Y+2, r24	; 0x02
    117e:	6b 83       	std	Y+3, r22	; 0x03
    1180:	5d 83       	std	Y+5, r21	; 0x05
    1182:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8Error;

	if(Copy_u8Value == NULL_POINTER)
    1184:	8c 81       	ldd	r24, Y+4	; 0x04
    1186:	9d 81       	ldd	r25, Y+5	; 0x05
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	19 f4       	brne	.+6      	; 0x1192 <DIO_u8GetPinValue+0x2a>
	{
		Local_u8Error = 1;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	79 c0       	rjmp	.+242    	; 0x1284 <DIO_u8GetPinValue+0x11c>
	}
	else if(Copy_u8PinNB > DIO_PIN_7)
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	88 30       	cpi	r24, 0x08	; 8
    1196:	18 f0       	brcs	.+6      	; 0x119e <DIO_u8GetPinValue+0x36>
	{
		Local_u8Error = 1;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	89 83       	std	Y+1, r24	; 0x01
    119c:	73 c0       	rjmp	.+230    	; 0x1284 <DIO_u8GetPinValue+0x11c>
	}
	else
	{
		switch(Copy_u8PortNB)
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	3f 83       	std	Y+7, r19	; 0x07
    11a6:	2e 83       	std	Y+6, r18	; 0x06
    11a8:	4e 81       	ldd	r20, Y+6	; 0x06
    11aa:	5f 81       	ldd	r21, Y+7	; 0x07
    11ac:	41 30       	cpi	r20, 0x01	; 1
    11ae:	51 05       	cpc	r21, r1
    11b0:	59 f1       	breq	.+86     	; 0x1208 <DIO_u8GetPinValue+0xa0>
    11b2:	8e 81       	ldd	r24, Y+6	; 0x06
    11b4:	9f 81       	ldd	r25, Y+7	; 0x07
    11b6:	82 30       	cpi	r24, 0x02	; 2
    11b8:	91 05       	cpc	r25, r1
    11ba:	34 f4       	brge	.+12     	; 0x11c8 <DIO_u8GetPinValue+0x60>
    11bc:	2e 81       	ldd	r18, Y+6	; 0x06
    11be:	3f 81       	ldd	r19, Y+7	; 0x07
    11c0:	21 15       	cp	r18, r1
    11c2:	31 05       	cpc	r19, r1
    11c4:	69 f0       	breq	.+26     	; 0x11e0 <DIO_u8GetPinValue+0x78>
    11c6:	5c c0       	rjmp	.+184    	; 0x1280 <DIO_u8GetPinValue+0x118>
    11c8:	4e 81       	ldd	r20, Y+6	; 0x06
    11ca:	5f 81       	ldd	r21, Y+7	; 0x07
    11cc:	42 30       	cpi	r20, 0x02	; 2
    11ce:	51 05       	cpc	r21, r1
    11d0:	79 f1       	breq	.+94     	; 0x1230 <DIO_u8GetPinValue+0xc8>
    11d2:	8e 81       	ldd	r24, Y+6	; 0x06
    11d4:	9f 81       	ldd	r25, Y+7	; 0x07
    11d6:	83 30       	cpi	r24, 0x03	; 3
    11d8:	91 05       	cpc	r25, r1
    11da:	09 f4       	brne	.+2      	; 0x11de <DIO_u8GetPinValue+0x76>
    11dc:	3d c0       	rjmp	.+122    	; 0x1258 <DIO_u8GetPinValue+0xf0>
    11de:	50 c0       	rjmp	.+160    	; 0x1280 <DIO_u8GetPinValue+0x118>
		{
		case DIO_PORT_0:
			(*Copy_u8Value) = GET_BIT(PINA, Copy_u8PinNB);
    11e0:	e9 e3       	ldi	r30, 0x39	; 57
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	88 2f       	mov	r24, r24
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	a9 01       	movw	r20, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <DIO_u8GetPinValue+0x90>
    11f4:	55 95       	asr	r21
    11f6:	47 95       	ror	r20
    11f8:	8a 95       	dec	r24
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <DIO_u8GetPinValue+0x8c>
    11fc:	ca 01       	movw	r24, r20
    11fe:	81 70       	andi	r24, 0x01	; 1
    1200:	ec 81       	ldd	r30, Y+4	; 0x04
    1202:	fd 81       	ldd	r31, Y+5	; 0x05
    1204:	80 83       	st	Z, r24
    1206:	3e c0       	rjmp	.+124    	; 0x1284 <DIO_u8GetPinValue+0x11c>
			break;
		case DIO_PORT_1:
			(*Copy_u8Value) = GET_BIT(PINB, Copy_u8PinNB);
    1208:	e6 e3       	ldi	r30, 0x36	; 54
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	88 2f       	mov	r24, r24
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	a9 01       	movw	r20, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_u8GetPinValue+0xb8>
    121c:	55 95       	asr	r21
    121e:	47 95       	ror	r20
    1220:	8a 95       	dec	r24
    1222:	e2 f7       	brpl	.-8      	; 0x121c <DIO_u8GetPinValue+0xb4>
    1224:	ca 01       	movw	r24, r20
    1226:	81 70       	andi	r24, 0x01	; 1
    1228:	ec 81       	ldd	r30, Y+4	; 0x04
    122a:	fd 81       	ldd	r31, Y+5	; 0x05
    122c:	80 83       	st	Z, r24
    122e:	2a c0       	rjmp	.+84     	; 0x1284 <DIO_u8GetPinValue+0x11c>
			break;
		case DIO_PORT_2:
			(*Copy_u8Value) = GET_BIT(PINC, Copy_u8PinNB);
    1230:	e3 e3       	ldi	r30, 0x33	; 51
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	a9 01       	movw	r20, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <DIO_u8GetPinValue+0xe0>
    1244:	55 95       	asr	r21
    1246:	47 95       	ror	r20
    1248:	8a 95       	dec	r24
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <DIO_u8GetPinValue+0xdc>
    124c:	ca 01       	movw	r24, r20
    124e:	81 70       	andi	r24, 0x01	; 1
    1250:	ec 81       	ldd	r30, Y+4	; 0x04
    1252:	fd 81       	ldd	r31, Y+5	; 0x05
    1254:	80 83       	st	Z, r24
    1256:	16 c0       	rjmp	.+44     	; 0x1284 <DIO_u8GetPinValue+0x11c>
			break;
		case DIO_PORT_3:
			(*Copy_u8Value) = GET_BIT(PIND, Copy_u8PinNB);
    1258:	e0 e3       	ldi	r30, 0x30	; 48
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	88 2f       	mov	r24, r24
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	a9 01       	movw	r20, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <DIO_u8GetPinValue+0x108>
    126c:	55 95       	asr	r21
    126e:	47 95       	ror	r20
    1270:	8a 95       	dec	r24
    1272:	e2 f7       	brpl	.-8      	; 0x126c <DIO_u8GetPinValue+0x104>
    1274:	ca 01       	movw	r24, r20
    1276:	81 70       	andi	r24, 0x01	; 1
    1278:	ec 81       	ldd	r30, Y+4	; 0x04
    127a:	fd 81       	ldd	r31, Y+5	; 0x05
    127c:	80 83       	st	Z, r24
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <DIO_u8GetPinValue+0x11c>
			break;
		default:
			Local_u8Error = 1;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Local_u8Error;
    1284:	89 81       	ldd	r24, Y+1	; 0x01
}
    1286:	27 96       	adiw	r28, 0x07	; 7
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	08 95       	ret

00001298 <LCD_voidControlState>:
/*Description:this to set a command for LCD like Clear or any order
  Inputs: Command
  Outputs: No output
*/
void LCD_voidControlState(void)
{
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortDirection(LCD_Data_PORT, 255);
    12a0:	82 e0       	ldi	r24, 0x02	; 2
    12a2:	6f ef       	ldi	r22, 0xFF	; 255
    12a4:	0e 94 2c 06 	call	0xc58	; 0xc58 <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(LCD_Control_PORT, LCD_E_PIN, LCD_E_State);
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	64 e0       	ldi	r22, 0x04	; 4
    12ac:	41 e0       	ldi	r20, 0x01	; 1
    12ae:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_Control_PORT, LCD_RS_PIN, LCD_RS_State);
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	62 e0       	ldi	r22, 0x02	; 2
    12b6:	41 e0       	ldi	r20, 0x01	; 1
    12b8:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_Control_PORT, LCD_RW_PIN, LCD_RW_State);
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	63 e0       	ldi	r22, 0x03	; 3
    12c0:	41 e0       	ldi	r20, 0x01	; 1
    12c2:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinDirection>
}
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <LCD_voidWriteCommand>:
/*Description:this to set a command for LCD like Clear or any order
  Inputs: Command
  Outputs: No output
*/
void LCD_voidWriteCommand(u8 Copy_u8Command)
{
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	2f 97       	sbiw	r28, 0x0f	; 15
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	de bf       	out	0x3e, r29	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	cd bf       	out	0x3d, r28	; 61
    12e0:	8f 87       	std	Y+15, r24	; 0x0f
	/*Make Sure Enable Pin is LOW*/
	DIO_u8SetPinValue(LCD_Control_PORT, LCD_E_PIN, DIO_LOW);
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	64 e0       	ldi	r22, 0x04	; 4
    12e6:	40 e0       	ldi	r20, 0x00	; 0
    12e8:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_u8SetPinValue>

	/*RS Register Select 0 command and 1 for data*/
	DIO_u8SetPinValue(LCD_Control_PORT, LCD_RS_PIN, DIO_LOW);
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	62 e0       	ldi	r22, 0x02	; 2
    12f0:	40 e0       	ldi	r20, 0x00	; 0
    12f2:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_u8SetPinValue>

	/*RW Register Select 0 Write and 1 for Read*/
	DIO_u8SetPinValue(LCD_Control_PORT, LCD_RW_PIN, DIO_LOW);
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	63 e0       	ldi	r22, 0x03	; 3
    12fa:	40 e0       	ldi	r20, 0x00	; 0
    12fc:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_u8SetPinValue>

	/*Send Command */
	DIO_u8SetPortValue(LCD_Data_PORT, Copy_u8Command);
    1300:	82 e0       	ldi	r24, 0x02	; 2
    1302:	6f 85       	ldd	r22, Y+15	; 0x0f
    1304:	0e 94 74 06 	call	0xce8	; 0xce8 <DIO_u8SetPortValue>


	/*Enable Sequence*/
	/*Make Enable Pin HIGH*/
	DIO_u8SetPinValue(LCD_Control_PORT, LCD_E_PIN, DIO_HIGH);
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	64 e0       	ldi	r22, 0x04	; 4
    130c:	41 e0       	ldi	r20, 0x01	; 1
    130e:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_u8SetPinValue>
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	a0 e0       	ldi	r26, 0x00	; 0
    1318:	b0 e4       	ldi	r27, 0x40	; 64
    131a:	8b 87       	std	Y+11, r24	; 0x0b
    131c:	9c 87       	std	Y+12, r25	; 0x0c
    131e:	ad 87       	std	Y+13, r26	; 0x0d
    1320:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1322:	6b 85       	ldd	r22, Y+11	; 0x0b
    1324:	7c 85       	ldd	r23, Y+12	; 0x0c
    1326:	8d 85       	ldd	r24, Y+13	; 0x0d
    1328:	9e 85       	ldd	r25, Y+14	; 0x0e
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	4a ef       	ldi	r20, 0xFA	; 250
    1330:	54 e4       	ldi	r21, 0x44	; 68
    1332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	8f 83       	std	Y+7, r24	; 0x07
    133c:	98 87       	std	Y+8, r25	; 0x08
    133e:	a9 87       	std	Y+9, r26	; 0x09
    1340:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1342:	6f 81       	ldd	r22, Y+7	; 0x07
    1344:	78 85       	ldd	r23, Y+8	; 0x08
    1346:	89 85       	ldd	r24, Y+9	; 0x09
    1348:	9a 85       	ldd	r25, Y+10	; 0x0a
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	40 e8       	ldi	r20, 0x80	; 128
    1350:	5f e3       	ldi	r21, 0x3F	; 63
    1352:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1356:	88 23       	and	r24, r24
    1358:	2c f4       	brge	.+10     	; 0x1364 <LCD_voidWriteCommand+0x98>
		__ticks = 1;
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	9e 83       	std	Y+6, r25	; 0x06
    1360:	8d 83       	std	Y+5, r24	; 0x05
    1362:	3f c0       	rjmp	.+126    	; 0x13e2 <LCD_voidWriteCommand+0x116>
	else if (__tmp > 65535)
    1364:	6f 81       	ldd	r22, Y+7	; 0x07
    1366:	78 85       	ldd	r23, Y+8	; 0x08
    1368:	89 85       	ldd	r24, Y+9	; 0x09
    136a:	9a 85       	ldd	r25, Y+10	; 0x0a
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	3f ef       	ldi	r19, 0xFF	; 255
    1370:	4f e7       	ldi	r20, 0x7F	; 127
    1372:	57 e4       	ldi	r21, 0x47	; 71
    1374:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1378:	18 16       	cp	r1, r24
    137a:	4c f5       	brge	.+82     	; 0x13ce <LCD_voidWriteCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    137c:	6b 85       	ldd	r22, Y+11	; 0x0b
    137e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1380:	8d 85       	ldd	r24, Y+13	; 0x0d
    1382:	9e 85       	ldd	r25, Y+14	; 0x0e
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	40 e2       	ldi	r20, 0x20	; 32
    138a:	51 e4       	ldi	r21, 0x41	; 65
    138c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	bc 01       	movw	r22, r24
    1396:	cd 01       	movw	r24, r26
    1398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	9e 83       	std	Y+6, r25	; 0x06
    13a2:	8d 83       	std	Y+5, r24	; 0x05
    13a4:	0f c0       	rjmp	.+30     	; 0x13c4 <LCD_voidWriteCommand+0xf8>
    13a6:	88 ec       	ldi	r24, 0xC8	; 200
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	9c 83       	std	Y+4, r25	; 0x04
    13ac:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	9c 81       	ldd	r25, Y+4	; 0x04
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	f1 f7       	brne	.-4      	; 0x13b2 <LCD_voidWriteCommand+0xe6>
    13b6:	9c 83       	std	Y+4, r25	; 0x04
    13b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ba:	8d 81       	ldd	r24, Y+5	; 0x05
    13bc:	9e 81       	ldd	r25, Y+6	; 0x06
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	9e 83       	std	Y+6, r25	; 0x06
    13c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c4:	8d 81       	ldd	r24, Y+5	; 0x05
    13c6:	9e 81       	ldd	r25, Y+6	; 0x06
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	69 f7       	brne	.-38     	; 0x13a6 <LCD_voidWriteCommand+0xda>
    13cc:	14 c0       	rjmp	.+40     	; 0x13f6 <LCD_voidWriteCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ce:	6f 81       	ldd	r22, Y+7	; 0x07
    13d0:	78 85       	ldd	r23, Y+8	; 0x08
    13d2:	89 85       	ldd	r24, Y+9	; 0x09
    13d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	9e 83       	std	Y+6, r25	; 0x06
    13e0:	8d 83       	std	Y+5, r24	; 0x05
    13e2:	8d 81       	ldd	r24, Y+5	; 0x05
    13e4:	9e 81       	ldd	r25, Y+6	; 0x06
    13e6:	9a 83       	std	Y+2, r25	; 0x02
    13e8:	89 83       	std	Y+1, r24	; 0x01
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	9a 81       	ldd	r25, Y+2	; 0x02
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <LCD_voidWriteCommand+0x122>
    13f2:	9a 83       	std	Y+2, r25	; 0x02
    13f4:	89 83       	std	Y+1, r24	; 0x01
	/*Delay for 2 mSec depend on the data sheet of LCD*/
	_delay_ms(2);
	/*Make Enable Pin LOW*/
	DIO_u8SetPinValue(LCD_Control_PORT, LCD_E_PIN, DIO_LOW);
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	64 e0       	ldi	r22, 0x04	; 4
    13fa:	40 e0       	ldi	r20, 0x00	; 0
    13fc:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_u8SetPinValue>
}
    1400:	2f 96       	adiw	r28, 0x0f	; 15
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	cd bf       	out	0x3d, r28	; 61
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <LCD_voidWriteData>:
/*Description:this to put the data that we need to print
  Inputs: Command
  Outputs: No output
*/
void LCD_voidWriteData(u8 Copy_u8Data)
{
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	2f 97       	sbiw	r28, 0x0f	; 15
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
    1426:	8f 87       	std	Y+15, r24	; 0x0f
	/*Make Sure Enable Pin is LOW*/
		DIO_u8SetPinValue(LCD_Control_PORT, LCD_E_PIN, DIO_LOW);
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	64 e0       	ldi	r22, 0x04	; 4
    142c:	40 e0       	ldi	r20, 0x00	; 0
    142e:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_u8SetPinValue>

		/*RS Register Select 0 command and 1 for data*/
		DIO_u8SetPinValue(LCD_Control_PORT, LCD_RS_PIN, DIO_HIGH);
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	62 e0       	ldi	r22, 0x02	; 2
    1436:	41 e0       	ldi	r20, 0x01	; 1
    1438:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_u8SetPinValue>

		/*RW Register Select 0 Write and 1 for Read*/
		DIO_u8SetPinValue(LCD_Control_PORT, LCD_RW_PIN, DIO_LOW);
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	63 e0       	ldi	r22, 0x03	; 3
    1440:	40 e0       	ldi	r20, 0x00	; 0
    1442:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_u8SetPinValue>

		/*Send Command */
		DIO_u8SetPortValue(LCD_Data_PORT, Copy_u8Data);
    1446:	82 e0       	ldi	r24, 0x02	; 2
    1448:	6f 85       	ldd	r22, Y+15	; 0x0f
    144a:	0e 94 74 06 	call	0xce8	; 0xce8 <DIO_u8SetPortValue>


		/*Enable Sequence*/
		/*Make Enable Pin HIGH*/
		DIO_u8SetPinValue(LCD_Control_PORT, LCD_E_PIN, DIO_HIGH);
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	64 e0       	ldi	r22, 0x04	; 4
    1452:	41 e0       	ldi	r20, 0x01	; 1
    1454:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_u8SetPinValue>
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	a0 e0       	ldi	r26, 0x00	; 0
    145e:	b0 e4       	ldi	r27, 0x40	; 64
    1460:	8b 87       	std	Y+11, r24	; 0x0b
    1462:	9c 87       	std	Y+12, r25	; 0x0c
    1464:	ad 87       	std	Y+13, r26	; 0x0d
    1466:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1468:	6b 85       	ldd	r22, Y+11	; 0x0b
    146a:	7c 85       	ldd	r23, Y+12	; 0x0c
    146c:	8d 85       	ldd	r24, Y+13	; 0x0d
    146e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	4a ef       	ldi	r20, 0xFA	; 250
    1476:	54 e4       	ldi	r21, 0x44	; 68
    1478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	8f 83       	std	Y+7, r24	; 0x07
    1482:	98 87       	std	Y+8, r25	; 0x08
    1484:	a9 87       	std	Y+9, r26	; 0x09
    1486:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1488:	6f 81       	ldd	r22, Y+7	; 0x07
    148a:	78 85       	ldd	r23, Y+8	; 0x08
    148c:	89 85       	ldd	r24, Y+9	; 0x09
    148e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 e8       	ldi	r20, 0x80	; 128
    1496:	5f e3       	ldi	r21, 0x3F	; 63
    1498:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    149c:	88 23       	and	r24, r24
    149e:	2c f4       	brge	.+10     	; 0x14aa <LCD_voidWriteData+0x98>
		__ticks = 1;
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	9e 83       	std	Y+6, r25	; 0x06
    14a6:	8d 83       	std	Y+5, r24	; 0x05
    14a8:	3f c0       	rjmp	.+126    	; 0x1528 <LCD_voidWriteData+0x116>
	else if (__tmp > 65535)
    14aa:	6f 81       	ldd	r22, Y+7	; 0x07
    14ac:	78 85       	ldd	r23, Y+8	; 0x08
    14ae:	89 85       	ldd	r24, Y+9	; 0x09
    14b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	3f ef       	ldi	r19, 0xFF	; 255
    14b6:	4f e7       	ldi	r20, 0x7F	; 127
    14b8:	57 e4       	ldi	r21, 0x47	; 71
    14ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14be:	18 16       	cp	r1, r24
    14c0:	4c f5       	brge	.+82     	; 0x1514 <LCD_voidWriteData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	40 e2       	ldi	r20, 0x20	; 32
    14d0:	51 e4       	ldi	r21, 0x41	; 65
    14d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	bc 01       	movw	r22, r24
    14dc:	cd 01       	movw	r24, r26
    14de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	9e 83       	std	Y+6, r25	; 0x06
    14e8:	8d 83       	std	Y+5, r24	; 0x05
    14ea:	0f c0       	rjmp	.+30     	; 0x150a <LCD_voidWriteData+0xf8>
    14ec:	88 ec       	ldi	r24, 0xC8	; 200
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	9c 83       	std	Y+4, r25	; 0x04
    14f2:	8b 83       	std	Y+3, r24	; 0x03
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	9c 81       	ldd	r25, Y+4	; 0x04
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	f1 f7       	brne	.-4      	; 0x14f8 <LCD_voidWriteData+0xe6>
    14fc:	9c 83       	std	Y+4, r25	; 0x04
    14fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1500:	8d 81       	ldd	r24, Y+5	; 0x05
    1502:	9e 81       	ldd	r25, Y+6	; 0x06
    1504:	01 97       	sbiw	r24, 0x01	; 1
    1506:	9e 83       	std	Y+6, r25	; 0x06
    1508:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150a:	8d 81       	ldd	r24, Y+5	; 0x05
    150c:	9e 81       	ldd	r25, Y+6	; 0x06
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	69 f7       	brne	.-38     	; 0x14ec <LCD_voidWriteData+0xda>
    1512:	14 c0       	rjmp	.+40     	; 0x153c <LCD_voidWriteData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1514:	6f 81       	ldd	r22, Y+7	; 0x07
    1516:	78 85       	ldd	r23, Y+8	; 0x08
    1518:	89 85       	ldd	r24, Y+9	; 0x09
    151a:	9a 85       	ldd	r25, Y+10	; 0x0a
    151c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	9e 83       	std	Y+6, r25	; 0x06
    1526:	8d 83       	std	Y+5, r24	; 0x05
    1528:	8d 81       	ldd	r24, Y+5	; 0x05
    152a:	9e 81       	ldd	r25, Y+6	; 0x06
    152c:	9a 83       	std	Y+2, r25	; 0x02
    152e:	89 83       	std	Y+1, r24	; 0x01
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	9a 81       	ldd	r25, Y+2	; 0x02
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	f1 f7       	brne	.-4      	; 0x1534 <LCD_voidWriteData+0x122>
    1538:	9a 83       	std	Y+2, r25	; 0x02
    153a:	89 83       	std	Y+1, r24	; 0x01
		/*Delay for 2 mSec depend on the data sheet of LCD*/
		_delay_ms(2);
		/*Make Enable Pin LOW*/
		DIO_u8SetPinValue(LCD_Control_PORT, LCD_E_PIN, DIO_LOW);
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	64 e0       	ldi	r22, 0x04	; 4
    1540:	40 e0       	ldi	r20, 0x00	; 0
    1542:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_u8SetPinValue>
}
    1546:	2f 96       	adiw	r28, 0x0f	; 15
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <LCD_voidIntialization>:
/*Description:
  Inputs:
  Outputs:
*/
void LCD_voidIntialization(void)
{
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	e8 97       	sbiw	r28, 0x38	; 56
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	a0 e2       	ldi	r26, 0x20	; 32
    1572:	b2 e4       	ldi	r27, 0x42	; 66
    1574:	8d ab       	std	Y+53, r24	; 0x35
    1576:	9e ab       	std	Y+54, r25	; 0x36
    1578:	af ab       	std	Y+55, r26	; 0x37
    157a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157c:	6d a9       	ldd	r22, Y+53	; 0x35
    157e:	7e a9       	ldd	r23, Y+54	; 0x36
    1580:	8f a9       	ldd	r24, Y+55	; 0x37
    1582:	98 ad       	ldd	r25, Y+56	; 0x38
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	4a ef       	ldi	r20, 0xFA	; 250
    158a:	54 e4       	ldi	r21, 0x44	; 68
    158c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	89 ab       	std	Y+49, r24	; 0x31
    1596:	9a ab       	std	Y+50, r25	; 0x32
    1598:	ab ab       	std	Y+51, r26	; 0x33
    159a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    159c:	69 a9       	ldd	r22, Y+49	; 0x31
    159e:	7a a9       	ldd	r23, Y+50	; 0x32
    15a0:	8b a9       	ldd	r24, Y+51	; 0x33
    15a2:	9c a9       	ldd	r25, Y+52	; 0x34
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	40 e8       	ldi	r20, 0x80	; 128
    15aa:	5f e3       	ldi	r21, 0x3F	; 63
    15ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15b0:	88 23       	and	r24, r24
    15b2:	2c f4       	brge	.+10     	; 0x15be <LCD_voidIntialization+0x66>
		__ticks = 1;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	98 ab       	std	Y+48, r25	; 0x30
    15ba:	8f a7       	std	Y+47, r24	; 0x2f
    15bc:	3f c0       	rjmp	.+126    	; 0x163c <LCD_voidIntialization+0xe4>
	else if (__tmp > 65535)
    15be:	69 a9       	ldd	r22, Y+49	; 0x31
    15c0:	7a a9       	ldd	r23, Y+50	; 0x32
    15c2:	8b a9       	ldd	r24, Y+51	; 0x33
    15c4:	9c a9       	ldd	r25, Y+52	; 0x34
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	3f ef       	ldi	r19, 0xFF	; 255
    15ca:	4f e7       	ldi	r20, 0x7F	; 127
    15cc:	57 e4       	ldi	r21, 0x47	; 71
    15ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15d2:	18 16       	cp	r1, r24
    15d4:	4c f5       	brge	.+82     	; 0x1628 <LCD_voidIntialization+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d6:	6d a9       	ldd	r22, Y+53	; 0x35
    15d8:	7e a9       	ldd	r23, Y+54	; 0x36
    15da:	8f a9       	ldd	r24, Y+55	; 0x37
    15dc:	98 ad       	ldd	r25, Y+56	; 0x38
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e2       	ldi	r20, 0x20	; 32
    15e4:	51 e4       	ldi	r21, 0x41	; 65
    15e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	bc 01       	movw	r22, r24
    15f0:	cd 01       	movw	r24, r26
    15f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	98 ab       	std	Y+48, r25	; 0x30
    15fc:	8f a7       	std	Y+47, r24	; 0x2f
    15fe:	0f c0       	rjmp	.+30     	; 0x161e <LCD_voidIntialization+0xc6>
    1600:	88 ec       	ldi	r24, 0xC8	; 200
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	9e a7       	std	Y+46, r25	; 0x2e
    1606:	8d a7       	std	Y+45, r24	; 0x2d
    1608:	8d a5       	ldd	r24, Y+45	; 0x2d
    160a:	9e a5       	ldd	r25, Y+46	; 0x2e
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	f1 f7       	brne	.-4      	; 0x160c <LCD_voidIntialization+0xb4>
    1610:	9e a7       	std	Y+46, r25	; 0x2e
    1612:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1614:	8f a5       	ldd	r24, Y+47	; 0x2f
    1616:	98 a9       	ldd	r25, Y+48	; 0x30
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	98 ab       	std	Y+48, r25	; 0x30
    161c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1620:	98 a9       	ldd	r25, Y+48	; 0x30
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	69 f7       	brne	.-38     	; 0x1600 <LCD_voidIntialization+0xa8>
    1626:	14 c0       	rjmp	.+40     	; 0x1650 <LCD_voidIntialization+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1628:	69 a9       	ldd	r22, Y+49	; 0x31
    162a:	7a a9       	ldd	r23, Y+50	; 0x32
    162c:	8b a9       	ldd	r24, Y+51	; 0x33
    162e:	9c a9       	ldd	r25, Y+52	; 0x34
    1630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	98 ab       	std	Y+48, r25	; 0x30
    163a:	8f a7       	std	Y+47, r24	; 0x2f
    163c:	8f a5       	ldd	r24, Y+47	; 0x2f
    163e:	98 a9       	ldd	r25, Y+48	; 0x30
    1640:	9c a7       	std	Y+44, r25	; 0x2c
    1642:	8b a7       	std	Y+43, r24	; 0x2b
    1644:	8b a5       	ldd	r24, Y+43	; 0x2b
    1646:	9c a5       	ldd	r25, Y+44	; 0x2c
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	f1 f7       	brne	.-4      	; 0x1648 <LCD_voidIntialization+0xf0>
    164c:	9c a7       	std	Y+44, r25	; 0x2c
    164e:	8b a7       	std	Y+43, r24	; 0x2b
	/*the time needed for LCD to be ready (Data Sheet)*/
	_delay_ms(40);
	/*This function to choose how many lines BIT 5 and font BIT 6 choose 5*11 (1) 5*8(0)*/
	LCD_voidWriteCommand(0b00111000);
    1650:	88 e3       	ldi	r24, 0x38	; 56
    1652:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_voidWriteCommand>
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	a0 e8       	ldi	r26, 0x80	; 128
    165c:	bf e3       	ldi	r27, 0x3F	; 63
    165e:	8f a3       	std	Y+39, r24	; 0x27
    1660:	98 a7       	std	Y+40, r25	; 0x28
    1662:	a9 a7       	std	Y+41, r26	; 0x29
    1664:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1666:	6f a1       	ldd	r22, Y+39	; 0x27
    1668:	78 a5       	ldd	r23, Y+40	; 0x28
    166a:	89 a5       	ldd	r24, Y+41	; 0x29
    166c:	9a a5       	ldd	r25, Y+42	; 0x2a
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	4a ef       	ldi	r20, 0xFA	; 250
    1674:	54 e4       	ldi	r21, 0x44	; 68
    1676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	8b a3       	std	Y+35, r24	; 0x23
    1680:	9c a3       	std	Y+36, r25	; 0x24
    1682:	ad a3       	std	Y+37, r26	; 0x25
    1684:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1686:	6b a1       	ldd	r22, Y+35	; 0x23
    1688:	7c a1       	ldd	r23, Y+36	; 0x24
    168a:	8d a1       	ldd	r24, Y+37	; 0x25
    168c:	9e a1       	ldd	r25, Y+38	; 0x26
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e8       	ldi	r20, 0x80	; 128
    1694:	5f e3       	ldi	r21, 0x3F	; 63
    1696:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    169a:	88 23       	and	r24, r24
    169c:	2c f4       	brge	.+10     	; 0x16a8 <LCD_voidIntialization+0x150>
		__ticks = 1;
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	9a a3       	std	Y+34, r25	; 0x22
    16a4:	89 a3       	std	Y+33, r24	; 0x21
    16a6:	3f c0       	rjmp	.+126    	; 0x1726 <LCD_voidIntialization+0x1ce>
	else if (__tmp > 65535)
    16a8:	6b a1       	ldd	r22, Y+35	; 0x23
    16aa:	7c a1       	ldd	r23, Y+36	; 0x24
    16ac:	8d a1       	ldd	r24, Y+37	; 0x25
    16ae:	9e a1       	ldd	r25, Y+38	; 0x26
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	3f ef       	ldi	r19, 0xFF	; 255
    16b4:	4f e7       	ldi	r20, 0x7F	; 127
    16b6:	57 e4       	ldi	r21, 0x47	; 71
    16b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16bc:	18 16       	cp	r1, r24
    16be:	4c f5       	brge	.+82     	; 0x1712 <LCD_voidIntialization+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c0:	6f a1       	ldd	r22, Y+39	; 0x27
    16c2:	78 a5       	ldd	r23, Y+40	; 0x28
    16c4:	89 a5       	ldd	r24, Y+41	; 0x29
    16c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e2       	ldi	r20, 0x20	; 32
    16ce:	51 e4       	ldi	r21, 0x41	; 65
    16d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	bc 01       	movw	r22, r24
    16da:	cd 01       	movw	r24, r26
    16dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	9a a3       	std	Y+34, r25	; 0x22
    16e6:	89 a3       	std	Y+33, r24	; 0x21
    16e8:	0f c0       	rjmp	.+30     	; 0x1708 <LCD_voidIntialization+0x1b0>
    16ea:	88 ec       	ldi	r24, 0xC8	; 200
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	98 a3       	std	Y+32, r25	; 0x20
    16f0:	8f 8f       	std	Y+31, r24	; 0x1f
    16f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16f4:	98 a1       	ldd	r25, Y+32	; 0x20
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <LCD_voidIntialization+0x19e>
    16fa:	98 a3       	std	Y+32, r25	; 0x20
    16fc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1700:	9a a1       	ldd	r25, Y+34	; 0x22
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	9a a3       	std	Y+34, r25	; 0x22
    1706:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1708:	89 a1       	ldd	r24, Y+33	; 0x21
    170a:	9a a1       	ldd	r25, Y+34	; 0x22
    170c:	00 97       	sbiw	r24, 0x00	; 0
    170e:	69 f7       	brne	.-38     	; 0x16ea <LCD_voidIntialization+0x192>
    1710:	14 c0       	rjmp	.+40     	; 0x173a <LCD_voidIntialization+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1712:	6b a1       	ldd	r22, Y+35	; 0x23
    1714:	7c a1       	ldd	r23, Y+36	; 0x24
    1716:	8d a1       	ldd	r24, Y+37	; 0x25
    1718:	9e a1       	ldd	r25, Y+38	; 0x26
    171a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	9a a3       	std	Y+34, r25	; 0x22
    1724:	89 a3       	std	Y+33, r24	; 0x21
    1726:	89 a1       	ldd	r24, Y+33	; 0x21
    1728:	9a a1       	ldd	r25, Y+34	; 0x22
    172a:	9e 8f       	std	Y+30, r25	; 0x1e
    172c:	8d 8f       	std	Y+29, r24	; 0x1d
    172e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1730:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	f1 f7       	brne	.-4      	; 0x1732 <LCD_voidIntialization+0x1da>
    1736:	9e 8f       	std	Y+30, r25	; 0x1e
    1738:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Delay for make the previous function */
	_delay_ms(1);
	/*function to Disable or Enable the LCD BIT 6 Cursor on off BIT 7 Cursor Blink BIT8*/
	LCD_voidWriteCommand(0b00001100);
    173a:	8c e0       	ldi	r24, 0x0C	; 12
    173c:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_voidWriteCommand>
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a0 e8       	ldi	r26, 0x80	; 128
    1746:	bf e3       	ldi	r27, 0x3F	; 63
    1748:	89 8f       	std	Y+25, r24	; 0x19
    174a:	9a 8f       	std	Y+26, r25	; 0x1a
    174c:	ab 8f       	std	Y+27, r26	; 0x1b
    174e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1750:	69 8d       	ldd	r22, Y+25	; 0x19
    1752:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1754:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1756:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	4a ef       	ldi	r20, 0xFA	; 250
    175e:	54 e4       	ldi	r21, 0x44	; 68
    1760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	8d 8b       	std	Y+21, r24	; 0x15
    176a:	9e 8b       	std	Y+22, r25	; 0x16
    176c:	af 8b       	std	Y+23, r26	; 0x17
    176e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1770:	6d 89       	ldd	r22, Y+21	; 0x15
    1772:	7e 89       	ldd	r23, Y+22	; 0x16
    1774:	8f 89       	ldd	r24, Y+23	; 0x17
    1776:	98 8d       	ldd	r25, Y+24	; 0x18
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	40 e8       	ldi	r20, 0x80	; 128
    177e:	5f e3       	ldi	r21, 0x3F	; 63
    1780:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1784:	88 23       	and	r24, r24
    1786:	2c f4       	brge	.+10     	; 0x1792 <LCD_voidIntialization+0x23a>
		__ticks = 1;
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	9c 8b       	std	Y+20, r25	; 0x14
    178e:	8b 8b       	std	Y+19, r24	; 0x13
    1790:	3f c0       	rjmp	.+126    	; 0x1810 <LCD_voidIntialization+0x2b8>
	else if (__tmp > 65535)
    1792:	6d 89       	ldd	r22, Y+21	; 0x15
    1794:	7e 89       	ldd	r23, Y+22	; 0x16
    1796:	8f 89       	ldd	r24, Y+23	; 0x17
    1798:	98 8d       	ldd	r25, Y+24	; 0x18
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	3f ef       	ldi	r19, 0xFF	; 255
    179e:	4f e7       	ldi	r20, 0x7F	; 127
    17a0:	57 e4       	ldi	r21, 0x47	; 71
    17a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17a6:	18 16       	cp	r1, r24
    17a8:	4c f5       	brge	.+82     	; 0x17fc <LCD_voidIntialization+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17aa:	69 8d       	ldd	r22, Y+25	; 0x19
    17ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	40 e2       	ldi	r20, 0x20	; 32
    17b8:	51 e4       	ldi	r21, 0x41	; 65
    17ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	bc 01       	movw	r22, r24
    17c4:	cd 01       	movw	r24, r26
    17c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	9c 8b       	std	Y+20, r25	; 0x14
    17d0:	8b 8b       	std	Y+19, r24	; 0x13
    17d2:	0f c0       	rjmp	.+30     	; 0x17f2 <LCD_voidIntialization+0x29a>
    17d4:	88 ec       	ldi	r24, 0xC8	; 200
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	9a 8b       	std	Y+18, r25	; 0x12
    17da:	89 8b       	std	Y+17, r24	; 0x11
    17dc:	89 89       	ldd	r24, Y+17	; 0x11
    17de:	9a 89       	ldd	r25, Y+18	; 0x12
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	f1 f7       	brne	.-4      	; 0x17e0 <LCD_voidIntialization+0x288>
    17e4:	9a 8b       	std	Y+18, r25	; 0x12
    17e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e8:	8b 89       	ldd	r24, Y+19	; 0x13
    17ea:	9c 89       	ldd	r25, Y+20	; 0x14
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	9c 8b       	std	Y+20, r25	; 0x14
    17f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f2:	8b 89       	ldd	r24, Y+19	; 0x13
    17f4:	9c 89       	ldd	r25, Y+20	; 0x14
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	69 f7       	brne	.-38     	; 0x17d4 <LCD_voidIntialization+0x27c>
    17fa:	14 c0       	rjmp	.+40     	; 0x1824 <LCD_voidIntialization+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17fc:	6d 89       	ldd	r22, Y+21	; 0x15
    17fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1800:	8f 89       	ldd	r24, Y+23	; 0x17
    1802:	98 8d       	ldd	r25, Y+24	; 0x18
    1804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	9c 8b       	std	Y+20, r25	; 0x14
    180e:	8b 8b       	std	Y+19, r24	; 0x13
    1810:	8b 89       	ldd	r24, Y+19	; 0x13
    1812:	9c 89       	ldd	r25, Y+20	; 0x14
    1814:	98 8b       	std	Y+16, r25	; 0x10
    1816:	8f 87       	std	Y+15, r24	; 0x0f
    1818:	8f 85       	ldd	r24, Y+15	; 0x0f
    181a:	98 89       	ldd	r25, Y+16	; 0x10
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	f1 f7       	brne	.-4      	; 0x181c <LCD_voidIntialization+0x2c4>
    1820:	98 8b       	std	Y+16, r25	; 0x10
    1822:	8f 87       	std	Y+15, r24	; 0x0f
	/*Delay for make the previous function */
	_delay_ms(1);
	/*This Function to Clear LCD*/
	LCD_voidWriteCommand(0b00000001);
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_voidWriteCommand>
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	a0 e0       	ldi	r26, 0x00	; 0
    1830:	b0 e4       	ldi	r27, 0x40	; 64
    1832:	8b 87       	std	Y+11, r24	; 0x0b
    1834:	9c 87       	std	Y+12, r25	; 0x0c
    1836:	ad 87       	std	Y+13, r26	; 0x0d
    1838:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    183a:	6b 85       	ldd	r22, Y+11	; 0x0b
    183c:	7c 85       	ldd	r23, Y+12	; 0x0c
    183e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1840:	9e 85       	ldd	r25, Y+14	; 0x0e
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	4a ef       	ldi	r20, 0xFA	; 250
    1848:	54 e4       	ldi	r21, 0x44	; 68
    184a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	8f 83       	std	Y+7, r24	; 0x07
    1854:	98 87       	std	Y+8, r25	; 0x08
    1856:	a9 87       	std	Y+9, r26	; 0x09
    1858:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    185a:	6f 81       	ldd	r22, Y+7	; 0x07
    185c:	78 85       	ldd	r23, Y+8	; 0x08
    185e:	89 85       	ldd	r24, Y+9	; 0x09
    1860:	9a 85       	ldd	r25, Y+10	; 0x0a
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e8       	ldi	r20, 0x80	; 128
    1868:	5f e3       	ldi	r21, 0x3F	; 63
    186a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    186e:	88 23       	and	r24, r24
    1870:	2c f4       	brge	.+10     	; 0x187c <LCD_voidIntialization+0x324>
		__ticks = 1;
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	9e 83       	std	Y+6, r25	; 0x06
    1878:	8d 83       	std	Y+5, r24	; 0x05
    187a:	3f c0       	rjmp	.+126    	; 0x18fa <LCD_voidIntialization+0x3a2>
	else if (__tmp > 65535)
    187c:	6f 81       	ldd	r22, Y+7	; 0x07
    187e:	78 85       	ldd	r23, Y+8	; 0x08
    1880:	89 85       	ldd	r24, Y+9	; 0x09
    1882:	9a 85       	ldd	r25, Y+10	; 0x0a
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	3f ef       	ldi	r19, 0xFF	; 255
    1888:	4f e7       	ldi	r20, 0x7F	; 127
    188a:	57 e4       	ldi	r21, 0x47	; 71
    188c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1890:	18 16       	cp	r1, r24
    1892:	4c f5       	brge	.+82     	; 0x18e6 <LCD_voidIntialization+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1894:	6b 85       	ldd	r22, Y+11	; 0x0b
    1896:	7c 85       	ldd	r23, Y+12	; 0x0c
    1898:	8d 85       	ldd	r24, Y+13	; 0x0d
    189a:	9e 85       	ldd	r25, Y+14	; 0x0e
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	40 e2       	ldi	r20, 0x20	; 32
    18a2:	51 e4       	ldi	r21, 0x41	; 65
    18a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	bc 01       	movw	r22, r24
    18ae:	cd 01       	movw	r24, r26
    18b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	9e 83       	std	Y+6, r25	; 0x06
    18ba:	8d 83       	std	Y+5, r24	; 0x05
    18bc:	0f c0       	rjmp	.+30     	; 0x18dc <LCD_voidIntialization+0x384>
    18be:	88 ec       	ldi	r24, 0xC8	; 200
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	9c 83       	std	Y+4, r25	; 0x04
    18c4:	8b 83       	std	Y+3, r24	; 0x03
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	f1 f7       	brne	.-4      	; 0x18ca <LCD_voidIntialization+0x372>
    18ce:	9c 83       	std	Y+4, r25	; 0x04
    18d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d2:	8d 81       	ldd	r24, Y+5	; 0x05
    18d4:	9e 81       	ldd	r25, Y+6	; 0x06
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	9e 83       	std	Y+6, r25	; 0x06
    18da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18dc:	8d 81       	ldd	r24, Y+5	; 0x05
    18de:	9e 81       	ldd	r25, Y+6	; 0x06
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	69 f7       	brne	.-38     	; 0x18be <LCD_voidIntialization+0x366>
    18e4:	14 c0       	rjmp	.+40     	; 0x190e <LCD_voidIntialization+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e6:	6f 81       	ldd	r22, Y+7	; 0x07
    18e8:	78 85       	ldd	r23, Y+8	; 0x08
    18ea:	89 85       	ldd	r24, Y+9	; 0x09
    18ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	9e 83       	std	Y+6, r25	; 0x06
    18f8:	8d 83       	std	Y+5, r24	; 0x05
    18fa:	8d 81       	ldd	r24, Y+5	; 0x05
    18fc:	9e 81       	ldd	r25, Y+6	; 0x06
    18fe:	9a 83       	std	Y+2, r25	; 0x02
    1900:	89 83       	std	Y+1, r24	; 0x01
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	9a 81       	ldd	r25, Y+2	; 0x02
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	f1 f7       	brne	.-4      	; 0x1906 <LCD_voidIntialization+0x3ae>
    190a:	9a 83       	std	Y+2, r25	; 0x02
    190c:	89 83       	std	Y+1, r24	; 0x01
	/*Delay for make the previous function */
	_delay_ms(2);
}
    190e:	e8 96       	adiw	r28, 0x38	; 56
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	de bf       	out	0x3e, r29	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	cd bf       	out	0x3d, r28	; 61
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	08 95       	ret

00001920 <LCD_u8WriteString>:
/*Description: this to write a word or phrase in once
  Inputs:"The Phrase" which it is an array, size of array
  Outputs:
*/
void LCD_u8WriteString(u8 *Copy_u8String, u8 Copy_u8Size)
{
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	00 d0       	rcall	.+0      	; 0x1926 <LCD_u8WriteString+0x6>
    1926:	00 d0       	rcall	.+0      	; 0x1928 <LCD_u8WriteString+0x8>
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	9b 83       	std	Y+3, r25	; 0x03
    192e:	8a 83       	std	Y+2, r24	; 0x02
    1930:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8LoopCtr;

	for(Local_u8LoopCtr = 0; Local_u8LoopCtr < Copy_u8Size; Local_u8LoopCtr++)
    1932:	19 82       	std	Y+1, r1	; 0x01
    1934:	0e c0       	rjmp	.+28     	; 0x1952 <LCD_u8WriteString+0x32>
	{
		LCD_voidWriteData(Copy_u8String[Local_u8LoopCtr]);
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	9b 81       	ldd	r25, Y+3	; 0x03
    1940:	fc 01       	movw	r30, r24
    1942:	e2 0f       	add	r30, r18
    1944:	f3 1f       	adc	r31, r19
    1946:	80 81       	ld	r24, Z
    1948:	0e 94 09 0a 	call	0x1412	; 0x1412 <LCD_voidWriteData>
*/
void LCD_u8WriteString(u8 *Copy_u8String, u8 Copy_u8Size)
{
	u8 Local_u8LoopCtr;

	for(Local_u8LoopCtr = 0; Local_u8LoopCtr < Copy_u8Size; Local_u8LoopCtr++)
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	8f 5f       	subi	r24, 0xFF	; 255
    1950:	89 83       	std	Y+1, r24	; 0x01
    1952:	99 81       	ldd	r25, Y+1	; 0x01
    1954:	8c 81       	ldd	r24, Y+4	; 0x04
    1956:	98 17       	cp	r25, r24
    1958:	70 f3       	brcs	.-36     	; 0x1936 <LCD_u8WriteString+0x16>
	{
		LCD_voidWriteData(Copy_u8String[Local_u8LoopCtr]);
	}
}
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <LCD_u8GoToXY>:
/*Description:to change the register AC from DDRAM to CGRAM and accessing to specific location
  Inputs:Position of X and Y
  Outputs:
*/
void LCD_u8GoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	00 d0       	rcall	.+0      	; 0x196e <LCD_u8GoToXY+0x6>
    196e:	0f 92       	push	r0
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	8a 83       	std	Y+2, r24	; 0x02
    1976:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	/*X position (0-->15) 16 character of LCD + (Y position (0, 1) * 0x40 which the 2nd line began)
	 *+ 128 to add 0b10000000
	*/
	Local_u8Address = Copy_u8XPos + (Copy_u8YPos * 0x40) + 128;
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	88 2f       	mov	r24, r24
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	00 24       	eor	r0, r0
    1980:	96 95       	lsr	r25
    1982:	87 95       	ror	r24
    1984:	07 94       	ror	r0
    1986:	96 95       	lsr	r25
    1988:	87 95       	ror	r24
    198a:	07 94       	ror	r0
    198c:	98 2f       	mov	r25, r24
    198e:	80 2d       	mov	r24, r0
    1990:	98 2f       	mov	r25, r24
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	89 0f       	add	r24, r25
    1996:	80 58       	subi	r24, 0x80	; 128
    1998:	89 83       	std	Y+1, r24	; 0x01
	}
	else if(Copy_u8YPos == 1)
	{
		Local_u8Address = 0x40 + Copy_u8XPos + 128;
	}*/
	LCD_voidWriteCommand(Local_u8Address);
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_voidWriteCommand>
}
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	08 95       	ret

000019ac <LCD_u8WriteSpecialChar>:
/*Description:write or draw what ever you want to show on LCD
  Inputs: array of the draw you want
  Outputs:
*/
void LCD_u8WriteSpecialChar(u8 * SPCHAR)
{
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	00 d0       	rcall	.+0      	; 0x19b2 <LCD_u8WriteSpecialChar+0x6>
    19b2:	0f 92       	push	r0
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	9b 83       	std	Y+3, r25	; 0x03
    19ba:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	LCD_voidWriteCommand(0b01000000);
    19bc:	80 e4       	ldi	r24, 0x40	; 64
    19be:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_voidWriteCommand>
	for(i = 0; i < 48; i++)
    19c2:	19 82       	std	Y+1, r1	; 0x01
    19c4:	0e c0       	rjmp	.+28     	; 0x19e2 <LCD_u8WriteSpecialChar+0x36>
	{
		LCD_voidWriteData(SPCHAR[i]);
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	9b 81       	ldd	r25, Y+3	; 0x03
    19d0:	fc 01       	movw	r30, r24
    19d2:	e2 0f       	add	r30, r18
    19d4:	f3 1f       	adc	r31, r19
    19d6:	80 81       	ld	r24, Z
    19d8:	0e 94 09 0a 	call	0x1412	; 0x1412 <LCD_voidWriteData>
*/
void LCD_u8WriteSpecialChar(u8 * SPCHAR)
{
	u8 i;
	LCD_voidWriteCommand(0b01000000);
	for(i = 0; i < 48; i++)
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	8f 5f       	subi	r24, 0xFF	; 255
    19e0:	89 83       	std	Y+1, r24	; 0x01
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	80 33       	cpi	r24, 0x30	; 48
    19e6:	78 f3       	brcs	.-34     	; 0x19c6 <LCD_u8WriteSpecialChar+0x1a>
	{
		LCD_voidWriteData(SPCHAR[i]);
	}
}
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	cf 91       	pop	r28
    19f0:	df 91       	pop	r29
    19f2:	08 95       	ret

000019f4 <LCD_voidWriteINT>:
/*Description: This function to print a Integer number all once
  Inputs:Integer Number, X Position, Y Position
  Outputs:Non
*/
void LCD_voidWriteINT(u16 u16_NB, u8 Position_u8X, u8 Position_u8Y)
{
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	2c 97       	sbiw	r28, 0x0c	; 12
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	98 87       	std	Y+8, r25	; 0x08
    1a0a:	8f 83       	std	Y+7, r24	; 0x07
    1a0c:	69 87       	std	Y+9, r22	; 0x09
    1a0e:	4a 87       	std	Y+10, r20	; 0x0a
	u16 temp = 0; //for saving the Integer Number to operate on it without change the original
    1a10:	1e 82       	std	Y+6, r1	; 0x06
    1a12:	1d 82       	std	Y+5, r1	; 0x05
	/*i for Iteration
	 * NOD number of Digits
	 * NoD for saving number of digits to operate on it without change the original
	 */
	u8 i, NOD = 0, reminder = 0, NoD = 0;
    1a14:	1b 82       	std	Y+3, r1	; 0x03
    1a16:	1a 82       	std	Y+2, r1	; 0x02
    1a18:	19 82       	std	Y+1, r1	; 0x01

	temp = u16_NB; //saving Integer number in temp
    1a1a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a1c:	98 85       	ldd	r25, Y+8	; 0x08
    1a1e:	9e 83       	std	Y+6, r25	; 0x06
    1a20:	8d 83       	std	Y+5, r24	; 0x05

	/*Case of Zero*/
	if(temp == 0)
    1a22:	8d 81       	ldd	r24, Y+5	; 0x05
    1a24:	9e 81       	ldd	r25, Y+6	; 0x06
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	a9 f4       	brne	.+42     	; 0x1a54 <LCD_voidWriteINT+0x60>
	{
		LCD_u8GoToXY(Position_u8X, Position_u8Y);
    1a2a:	89 85       	ldd	r24, Y+9	; 0x09
    1a2c:	6a 85       	ldd	r22, Y+10	; 0x0a
    1a2e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_u8GoToXY>
		LCD_voidWriteData(48);
    1a32:	80 e3       	ldi	r24, 0x30	; 48
    1a34:	0e 94 09 0a 	call	0x1412	; 0x1412 <LCD_voidWriteData>
    1a38:	0d c0       	rjmp	.+26     	; 0x1a54 <LCD_voidWriteINT+0x60>
	}

	/*to get the Number of Digits*/
	while(temp != 0)
	{
		temp /= 10;
    1a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3e:	2a e0       	ldi	r18, 0x0A	; 10
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	b9 01       	movw	r22, r18
    1a44:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__udivmodhi4>
    1a48:	cb 01       	movw	r24, r22
    1a4a:	9e 83       	std	Y+6, r25	; 0x06
    1a4c:	8d 83       	std	Y+5, r24	; 0x05
		NOD++;
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	8f 5f       	subi	r24, 0xFF	; 255
    1a52:	8b 83       	std	Y+3, r24	; 0x03
		LCD_u8GoToXY(Position_u8X, Position_u8Y);
		LCD_voidWriteData(48);
	}

	/*to get the Number of Digits*/
	while(temp != 0)
    1a54:	8d 81       	ldd	r24, Y+5	; 0x05
    1a56:	9e 81       	ldd	r25, Y+6	; 0x06
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	79 f7       	brne	.-34     	; 0x1a3a <LCD_voidWriteINT+0x46>
	{
		temp /= 10;
		NOD++;
	}

	NoD = NOD; //saving number of digits in NoD
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	89 83       	std	Y+1, r24	; 0x01
	temp = u16_NB; // re-saving the Integer number in temp
    1a60:	8f 81       	ldd	r24, Y+7	; 0x07
    1a62:	98 85       	ldd	r25, Y+8	; 0x08
    1a64:	9e 83       	std	Y+6, r25	; 0x06
    1a66:	8d 83       	std	Y+5, r24	; 0x05

	/*to print the Integer number*/
	for(i = 0; i < NoD; i++)
    1a68:	1c 82       	std	Y+4, r1	; 0x04
    1a6a:	0c c1       	rjmp	.+536    	; 0x1c84 <LCD_voidWriteINT+0x290>
	{
		reminder = temp % 10; //get the once, tens and so on by for loop
    1a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a70:	2a e0       	ldi	r18, 0x0A	; 10
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	b9 01       	movw	r22, r18
    1a76:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__udivmodhi4>
    1a7a:	8a 83       	std	Y+2, r24	; 0x02

		/*geting the value from ASCII Code*/
		switch(reminder)
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	3c 87       	std	Y+12, r19	; 0x0c
    1a84:	2b 87       	std	Y+11, r18	; 0x0b
    1a86:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a88:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a8a:	84 30       	cpi	r24, 0x04	; 4
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	09 f4       	brne	.+2      	; 0x1a92 <LCD_voidWriteINT+0x9e>
    1a90:	8b c0       	rjmp	.+278    	; 0x1ba8 <LCD_voidWriteINT+0x1b4>
    1a92:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a94:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a96:	25 30       	cpi	r18, 0x05	; 5
    1a98:	31 05       	cpc	r19, r1
    1a9a:	ec f4       	brge	.+58     	; 0x1ad6 <LCD_voidWriteINT+0xe2>
    1a9c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a9e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1aa0:	81 30       	cpi	r24, 0x01	; 1
    1aa2:	91 05       	cpc	r25, r1
    1aa4:	09 f4       	brne	.+2      	; 0x1aa8 <LCD_voidWriteINT+0xb4>
    1aa6:	4d c0       	rjmp	.+154    	; 0x1b42 <LCD_voidWriteINT+0x14e>
    1aa8:	2b 85       	ldd	r18, Y+11	; 0x0b
    1aaa:	3c 85       	ldd	r19, Y+12	; 0x0c
    1aac:	22 30       	cpi	r18, 0x02	; 2
    1aae:	31 05       	cpc	r19, r1
    1ab0:	2c f4       	brge	.+10     	; 0x1abc <LCD_voidWriteINT+0xc8>
    1ab2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ab4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	99 f1       	breq	.+102    	; 0x1b20 <LCD_voidWriteINT+0x12c>
    1aba:	d7 c0       	rjmp	.+430    	; 0x1c6a <LCD_voidWriteINT+0x276>
    1abc:	2b 85       	ldd	r18, Y+11	; 0x0b
    1abe:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ac0:	22 30       	cpi	r18, 0x02	; 2
    1ac2:	31 05       	cpc	r19, r1
    1ac4:	09 f4       	brne	.+2      	; 0x1ac8 <LCD_voidWriteINT+0xd4>
    1ac6:	4e c0       	rjmp	.+156    	; 0x1b64 <LCD_voidWriteINT+0x170>
    1ac8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1aca:	9c 85       	ldd	r25, Y+12	; 0x0c
    1acc:	83 30       	cpi	r24, 0x03	; 3
    1ace:	91 05       	cpc	r25, r1
    1ad0:	09 f4       	brne	.+2      	; 0x1ad4 <LCD_voidWriteINT+0xe0>
    1ad2:	59 c0       	rjmp	.+178    	; 0x1b86 <LCD_voidWriteINT+0x192>
    1ad4:	ca c0       	rjmp	.+404    	; 0x1c6a <LCD_voidWriteINT+0x276>
    1ad6:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ad8:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ada:	27 30       	cpi	r18, 0x07	; 7
    1adc:	31 05       	cpc	r19, r1
    1ade:	09 f4       	brne	.+2      	; 0x1ae2 <LCD_voidWriteINT+0xee>
    1ae0:	95 c0       	rjmp	.+298    	; 0x1c0c <LCD_voidWriteINT+0x218>
    1ae2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ae4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ae6:	88 30       	cpi	r24, 0x08	; 8
    1ae8:	91 05       	cpc	r25, r1
    1aea:	6c f4       	brge	.+26     	; 0x1b06 <LCD_voidWriteINT+0x112>
    1aec:	2b 85       	ldd	r18, Y+11	; 0x0b
    1aee:	3c 85       	ldd	r19, Y+12	; 0x0c
    1af0:	25 30       	cpi	r18, 0x05	; 5
    1af2:	31 05       	cpc	r19, r1
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <LCD_voidWriteINT+0x104>
    1af6:	69 c0       	rjmp	.+210    	; 0x1bca <LCD_voidWriteINT+0x1d6>
    1af8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1afa:	9c 85       	ldd	r25, Y+12	; 0x0c
    1afc:	86 30       	cpi	r24, 0x06	; 6
    1afe:	91 05       	cpc	r25, r1
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <LCD_voidWriteINT+0x110>
    1b02:	74 c0       	rjmp	.+232    	; 0x1bec <LCD_voidWriteINT+0x1f8>
    1b04:	b2 c0       	rjmp	.+356    	; 0x1c6a <LCD_voidWriteINT+0x276>
    1b06:	2b 85       	ldd	r18, Y+11	; 0x0b
    1b08:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b0a:	28 30       	cpi	r18, 0x08	; 8
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <LCD_voidWriteINT+0x11e>
    1b10:	8d c0       	rjmp	.+282    	; 0x1c2c <LCD_voidWriteINT+0x238>
    1b12:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b14:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b16:	89 30       	cpi	r24, 0x09	; 9
    1b18:	91 05       	cpc	r25, r1
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <LCD_voidWriteINT+0x12a>
    1b1c:	97 c0       	rjmp	.+302    	; 0x1c4c <LCD_voidWriteINT+0x258>
    1b1e:	a5 c0       	rjmp	.+330    	; 0x1c6a <LCD_voidWriteINT+0x276>
		{
		case 0:
			if(reminder == 0)
    1b20:	8a 81       	ldd	r24, Y+2	; 0x02
    1b22:	88 23       	and	r24, r24
    1b24:	09 f0       	breq	.+2      	; 0x1b28 <LCD_voidWriteINT+0x134>
    1b26:	a1 c0       	rjmp	.+322    	; 0x1c6a <LCD_voidWriteINT+0x276>
				/*go to the position and print the value of ASCII Code*/
				/*((NoD-=1)+Position_u8X) this to get the ones, tens... position
				 * because we print ones first so we need to write the number
				 * from the right to the left
				 */
				LCD_u8GoToXY(((NOD-=1)+Position_u8X), Position_u8Y);
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	81 50       	subi	r24, 0x01	; 1
    1b2c:	8b 83       	std	Y+3, r24	; 0x03
    1b2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b30:	89 85       	ldd	r24, Y+9	; 0x09
    1b32:	89 0f       	add	r24, r25
    1b34:	6a 85       	ldd	r22, Y+10	; 0x0a
    1b36:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_u8GoToXY>
				LCD_voidWriteData(48);
    1b3a:	80 e3       	ldi	r24, 0x30	; 48
    1b3c:	0e 94 09 0a 	call	0x1412	; 0x1412 <LCD_voidWriteData>
    1b40:	94 c0       	rjmp	.+296    	; 0x1c6a <LCD_voidWriteINT+0x276>
			}
			break;

		case 1:
			if(reminder == 1)
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	81 30       	cpi	r24, 0x01	; 1
    1b46:	09 f0       	breq	.+2      	; 0x1b4a <LCD_voidWriteINT+0x156>
    1b48:	90 c0       	rjmp	.+288    	; 0x1c6a <LCD_voidWriteINT+0x276>
			{
				LCD_u8GoToXY(((NOD-=1)+Position_u8X), Position_u8Y);
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	81 50       	subi	r24, 0x01	; 1
    1b4e:	8b 83       	std	Y+3, r24	; 0x03
    1b50:	9b 81       	ldd	r25, Y+3	; 0x03
    1b52:	89 85       	ldd	r24, Y+9	; 0x09
    1b54:	89 0f       	add	r24, r25
    1b56:	6a 85       	ldd	r22, Y+10	; 0x0a
    1b58:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_u8GoToXY>
				LCD_voidWriteData(49);
    1b5c:	81 e3       	ldi	r24, 0x31	; 49
    1b5e:	0e 94 09 0a 	call	0x1412	; 0x1412 <LCD_voidWriteData>
    1b62:	83 c0       	rjmp	.+262    	; 0x1c6a <LCD_voidWriteINT+0x276>
			}
			break;

		case 2:
			if(reminder == 2)
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	82 30       	cpi	r24, 0x02	; 2
    1b68:	09 f0       	breq	.+2      	; 0x1b6c <LCD_voidWriteINT+0x178>
    1b6a:	7f c0       	rjmp	.+254    	; 0x1c6a <LCD_voidWriteINT+0x276>
			{
				LCD_u8GoToXY(((NOD-=1)+Position_u8X), Position_u8Y);
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	81 50       	subi	r24, 0x01	; 1
    1b70:	8b 83       	std	Y+3, r24	; 0x03
    1b72:	9b 81       	ldd	r25, Y+3	; 0x03
    1b74:	89 85       	ldd	r24, Y+9	; 0x09
    1b76:	89 0f       	add	r24, r25
    1b78:	6a 85       	ldd	r22, Y+10	; 0x0a
    1b7a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_u8GoToXY>
				LCD_voidWriteData(50);
    1b7e:	82 e3       	ldi	r24, 0x32	; 50
    1b80:	0e 94 09 0a 	call	0x1412	; 0x1412 <LCD_voidWriteData>
    1b84:	72 c0       	rjmp	.+228    	; 0x1c6a <LCD_voidWriteINT+0x276>
			}
			break;

		case 3:
			if(reminder == 3)
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	83 30       	cpi	r24, 0x03	; 3
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <LCD_voidWriteINT+0x19a>
    1b8c:	6e c0       	rjmp	.+220    	; 0x1c6a <LCD_voidWriteINT+0x276>
			{
				LCD_u8GoToXY(((NOD-=1)+Position_u8X), Position_u8Y);
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	81 50       	subi	r24, 0x01	; 1
    1b92:	8b 83       	std	Y+3, r24	; 0x03
    1b94:	9b 81       	ldd	r25, Y+3	; 0x03
    1b96:	89 85       	ldd	r24, Y+9	; 0x09
    1b98:	89 0f       	add	r24, r25
    1b9a:	6a 85       	ldd	r22, Y+10	; 0x0a
    1b9c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_u8GoToXY>
				LCD_voidWriteData(51);
    1ba0:	83 e3       	ldi	r24, 0x33	; 51
    1ba2:	0e 94 09 0a 	call	0x1412	; 0x1412 <LCD_voidWriteData>
    1ba6:	61 c0       	rjmp	.+194    	; 0x1c6a <LCD_voidWriteINT+0x276>
			}
			break;

		case 4:
			if(reminder == 4)
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	84 30       	cpi	r24, 0x04	; 4
    1bac:	09 f0       	breq	.+2      	; 0x1bb0 <LCD_voidWriteINT+0x1bc>
    1bae:	5d c0       	rjmp	.+186    	; 0x1c6a <LCD_voidWriteINT+0x276>
			{
				LCD_u8GoToXY(((NOD-=1)+Position_u8X), Position_u8Y);
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	81 50       	subi	r24, 0x01	; 1
    1bb4:	8b 83       	std	Y+3, r24	; 0x03
    1bb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb8:	89 85       	ldd	r24, Y+9	; 0x09
    1bba:	89 0f       	add	r24, r25
    1bbc:	6a 85       	ldd	r22, Y+10	; 0x0a
    1bbe:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_u8GoToXY>
				LCD_voidWriteData(52);
    1bc2:	84 e3       	ldi	r24, 0x34	; 52
    1bc4:	0e 94 09 0a 	call	0x1412	; 0x1412 <LCD_voidWriteData>
    1bc8:	50 c0       	rjmp	.+160    	; 0x1c6a <LCD_voidWriteINT+0x276>
			}
			break;

		case 5:
			if(reminder == 5)
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	85 30       	cpi	r24, 0x05	; 5
    1bce:	09 f0       	breq	.+2      	; 0x1bd2 <LCD_voidWriteINT+0x1de>
    1bd0:	4c c0       	rjmp	.+152    	; 0x1c6a <LCD_voidWriteINT+0x276>
			{
				LCD_u8GoToXY(((NOD-=1)+Position_u8X), Position_u8Y);
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	81 50       	subi	r24, 0x01	; 1
    1bd6:	8b 83       	std	Y+3, r24	; 0x03
    1bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bda:	89 85       	ldd	r24, Y+9	; 0x09
    1bdc:	89 0f       	add	r24, r25
    1bde:	6a 85       	ldd	r22, Y+10	; 0x0a
    1be0:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_u8GoToXY>
				LCD_voidWriteData('5');
    1be4:	85 e3       	ldi	r24, 0x35	; 53
    1be6:	0e 94 09 0a 	call	0x1412	; 0x1412 <LCD_voidWriteData>
    1bea:	3f c0       	rjmp	.+126    	; 0x1c6a <LCD_voidWriteINT+0x276>
			}
			break;

		case 6:
			if(reminder == 6)
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	86 30       	cpi	r24, 0x06	; 6
    1bf0:	e1 f5       	brne	.+120    	; 0x1c6a <LCD_voidWriteINT+0x276>
			{
				LCD_u8GoToXY(((NOD-=1)+Position_u8X), Position_u8Y);
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	81 50       	subi	r24, 0x01	; 1
    1bf6:	8b 83       	std	Y+3, r24	; 0x03
    1bf8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bfa:	89 85       	ldd	r24, Y+9	; 0x09
    1bfc:	89 0f       	add	r24, r25
    1bfe:	6a 85       	ldd	r22, Y+10	; 0x0a
    1c00:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_u8GoToXY>
				LCD_voidWriteData(54);
    1c04:	86 e3       	ldi	r24, 0x36	; 54
    1c06:	0e 94 09 0a 	call	0x1412	; 0x1412 <LCD_voidWriteData>
    1c0a:	2f c0       	rjmp	.+94     	; 0x1c6a <LCD_voidWriteINT+0x276>
			}
			break;

		case 7:
			if(reminder == 7)
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	87 30       	cpi	r24, 0x07	; 7
    1c10:	61 f5       	brne	.+88     	; 0x1c6a <LCD_voidWriteINT+0x276>
			{
				LCD_u8GoToXY(((NOD-=1)+Position_u8X), Position_u8Y);
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	81 50       	subi	r24, 0x01	; 1
    1c16:	8b 83       	std	Y+3, r24	; 0x03
    1c18:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1a:	89 85       	ldd	r24, Y+9	; 0x09
    1c1c:	89 0f       	add	r24, r25
    1c1e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1c20:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_u8GoToXY>
				LCD_voidWriteData(55);
    1c24:	87 e3       	ldi	r24, 0x37	; 55
    1c26:	0e 94 09 0a 	call	0x1412	; 0x1412 <LCD_voidWriteData>
    1c2a:	1f c0       	rjmp	.+62     	; 0x1c6a <LCD_voidWriteINT+0x276>
			}
			break;

		case 8:
			if(reminder == 8)
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	88 30       	cpi	r24, 0x08	; 8
    1c30:	e1 f4       	brne	.+56     	; 0x1c6a <LCD_voidWriteINT+0x276>
			{
				LCD_u8GoToXY(((NOD-=1)+Position_u8X), Position_u8Y);
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	81 50       	subi	r24, 0x01	; 1
    1c36:	8b 83       	std	Y+3, r24	; 0x03
    1c38:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3a:	89 85       	ldd	r24, Y+9	; 0x09
    1c3c:	89 0f       	add	r24, r25
    1c3e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1c40:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_u8GoToXY>
				LCD_voidWriteData(56);
    1c44:	88 e3       	ldi	r24, 0x38	; 56
    1c46:	0e 94 09 0a 	call	0x1412	; 0x1412 <LCD_voidWriteData>
    1c4a:	0f c0       	rjmp	.+30     	; 0x1c6a <LCD_voidWriteINT+0x276>
			}
			break;

		case 9:
			if(reminder == 9)
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	89 30       	cpi	r24, 0x09	; 9
    1c50:	61 f4       	brne	.+24     	; 0x1c6a <LCD_voidWriteINT+0x276>
			{
				LCD_u8GoToXY(((NOD-=1)+Position_u8X), Position_u8Y);
    1c52:	8b 81       	ldd	r24, Y+3	; 0x03
    1c54:	81 50       	subi	r24, 0x01	; 1
    1c56:	8b 83       	std	Y+3, r24	; 0x03
    1c58:	9b 81       	ldd	r25, Y+3	; 0x03
    1c5a:	89 85       	ldd	r24, Y+9	; 0x09
    1c5c:	89 0f       	add	r24, r25
    1c5e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1c60:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_u8GoToXY>
				LCD_voidWriteData(57);
    1c64:	89 e3       	ldi	r24, 0x39	; 57
    1c66:	0e 94 09 0a 	call	0x1412	; 0x1412 <LCD_voidWriteData>
			}
			break;
		}
		/*deviding temp by 10 to get the tens hundreds thousands and so on every iteration*/
		temp /= 10;
    1c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6e:	2a e0       	ldi	r18, 0x0A	; 10
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	b9 01       	movw	r22, r18
    1c74:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__udivmodhi4>
    1c78:	cb 01       	movw	r24, r22
    1c7a:	9e 83       	std	Y+6, r25	; 0x06
    1c7c:	8d 83       	std	Y+5, r24	; 0x05

	NoD = NOD; //saving number of digits in NoD
	temp = u16_NB; // re-saving the Integer number in temp

	/*to print the Integer number*/
	for(i = 0; i < NoD; i++)
    1c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c80:	8f 5f       	subi	r24, 0xFF	; 255
    1c82:	8c 83       	std	Y+4, r24	; 0x04
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	98 17       	cp	r25, r24
    1c8a:	08 f4       	brcc	.+2      	; 0x1c8e <LCD_voidWriteINT+0x29a>
    1c8c:	ef ce       	rjmp	.-546    	; 0x1a6c <LCD_voidWriteINT+0x78>
			break;
		}
		/*deviding temp by 10 to get the tens hundreds thousands and so on every iteration*/
		temp /= 10;
	}
}
    1c8e:	2c 96       	adiw	r28, 0x0c	; 12
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	08 95       	ret

00001ca0 <LCD_voidClear>:

void LCD_voidClear(void)
{
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    1ca8:	2e 97       	sbiw	r28, 0x0e	; 14
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	f8 94       	cli
    1cae:	de bf       	out	0x3e, r29	; 62
    1cb0:	0f be       	out	0x3f, r0	; 63
    1cb2:	cd bf       	out	0x3d, r28	; 61
	LCD_voidWriteCommand(0b00000001);
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_voidWriteCommand>
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	a0 e0       	ldi	r26, 0x00	; 0
    1cc0:	b0 e4       	ldi	r27, 0x40	; 64
    1cc2:	8b 87       	std	Y+11, r24	; 0x0b
    1cc4:	9c 87       	std	Y+12, r25	; 0x0c
    1cc6:	ad 87       	std	Y+13, r26	; 0x0d
    1cc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ccc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	4a ef       	ldi	r20, 0xFA	; 250
    1cd8:	54 e4       	ldi	r21, 0x44	; 68
    1cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	8f 83       	std	Y+7, r24	; 0x07
    1ce4:	98 87       	std	Y+8, r25	; 0x08
    1ce6:	a9 87       	std	Y+9, r26	; 0x09
    1ce8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cea:	6f 81       	ldd	r22, Y+7	; 0x07
    1cec:	78 85       	ldd	r23, Y+8	; 0x08
    1cee:	89 85       	ldd	r24, Y+9	; 0x09
    1cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	40 e8       	ldi	r20, 0x80	; 128
    1cf8:	5f e3       	ldi	r21, 0x3F	; 63
    1cfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cfe:	88 23       	and	r24, r24
    1d00:	2c f4       	brge	.+10     	; 0x1d0c <LCD_voidClear+0x6c>
		__ticks = 1;
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	9e 83       	std	Y+6, r25	; 0x06
    1d08:	8d 83       	std	Y+5, r24	; 0x05
    1d0a:	3f c0       	rjmp	.+126    	; 0x1d8a <LCD_voidClear+0xea>
	else if (__tmp > 65535)
    1d0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0e:	78 85       	ldd	r23, Y+8	; 0x08
    1d10:	89 85       	ldd	r24, Y+9	; 0x09
    1d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	3f ef       	ldi	r19, 0xFF	; 255
    1d18:	4f e7       	ldi	r20, 0x7F	; 127
    1d1a:	57 e4       	ldi	r21, 0x47	; 71
    1d1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d20:	18 16       	cp	r1, r24
    1d22:	4c f5       	brge	.+82     	; 0x1d76 <LCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e2       	ldi	r20, 0x20	; 32
    1d32:	51 e4       	ldi	r21, 0x41	; 65
    1d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	bc 01       	movw	r22, r24
    1d3e:	cd 01       	movw	r24, r26
    1d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	9e 83       	std	Y+6, r25	; 0x06
    1d4a:	8d 83       	std	Y+5, r24	; 0x05
    1d4c:	0f c0       	rjmp	.+30     	; 0x1d6c <LCD_voidClear+0xcc>
    1d4e:	88 ec       	ldi	r24, 0xC8	; 200
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	9c 83       	std	Y+4, r25	; 0x04
    1d54:	8b 83       	std	Y+3, r24	; 0x03
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	f1 f7       	brne	.-4      	; 0x1d5a <LCD_voidClear+0xba>
    1d5e:	9c 83       	std	Y+4, r25	; 0x04
    1d60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d62:	8d 81       	ldd	r24, Y+5	; 0x05
    1d64:	9e 81       	ldd	r25, Y+6	; 0x06
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	9e 83       	std	Y+6, r25	; 0x06
    1d6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	69 f7       	brne	.-38     	; 0x1d4e <LCD_voidClear+0xae>
    1d74:	14 c0       	rjmp	.+40     	; 0x1d9e <LCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d76:	6f 81       	ldd	r22, Y+7	; 0x07
    1d78:	78 85       	ldd	r23, Y+8	; 0x08
    1d7a:	89 85       	ldd	r24, Y+9	; 0x09
    1d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	9e 83       	std	Y+6, r25	; 0x06
    1d88:	8d 83       	std	Y+5, r24	; 0x05
    1d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8e:	9a 83       	std	Y+2, r25	; 0x02
    1d90:	89 83       	std	Y+1, r24	; 0x01
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	9a 81       	ldd	r25, Y+2	; 0x02
    1d96:	01 97       	sbiw	r24, 0x01	; 1
    1d98:	f1 f7       	brne	.-4      	; 0x1d96 <LCD_voidClear+0xf6>
    1d9a:	9a 83       	std	Y+2, r25	; 0x02
    1d9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1d9e:	2e 96       	adiw	r28, 0x0e	; 14
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	08 95       	ret

00001db0 <TEMPREATURE>:
  Inputs: ADC Reading, Address of Variable to put Temp Reading
  Outputs: Error State -> 0 No Error
                       -> 1 Error
*/
u8 TEMPREATURE(u16 Copy_u16SensorRead, u16 * Copy_u16ActualTemp)
{
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	00 d0       	rcall	.+0      	; 0x1db6 <TEMPREATURE+0x6>
    1db6:	00 d0       	rcall	.+0      	; 0x1db8 <TEMPREATURE+0x8>
    1db8:	00 d0       	rcall	.+0      	; 0x1dba <TEMPREATURE+0xa>
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
    1dbe:	9c 83       	std	Y+4, r25	; 0x04
    1dc0:	8b 83       	std	Y+3, r24	; 0x03
    1dc2:	7e 83       	std	Y+6, r23	; 0x06
    1dc4:	6d 83       	std	Y+5, r22	; 0x05
	u16 Local_u16Actual;

	/*Convert the Value to Digital*/
	Local_u16Actual = ((Copy_u16SensorRead * 500) / 256);
    1dc6:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc8:	3c 81       	ldd	r19, Y+4	; 0x04
    1dca:	84 ef       	ldi	r24, 0xF4	; 244
    1dcc:	91 e0       	ldi	r25, 0x01	; 1
    1dce:	ac 01       	movw	r20, r24
    1dd0:	24 9f       	mul	r18, r20
    1dd2:	c0 01       	movw	r24, r0
    1dd4:	25 9f       	mul	r18, r21
    1dd6:	90 0d       	add	r25, r0
    1dd8:	34 9f       	mul	r19, r20
    1dda:	90 0d       	add	r25, r0
    1ddc:	11 24       	eor	r1, r1
    1dde:	89 2f       	mov	r24, r25
    1de0:	99 27       	eor	r25, r25
    1de2:	9a 83       	std	Y+2, r25	; 0x02
    1de4:	89 83       	std	Y+1, r24	; 0x01
	Local_u16Actual += (Copy_u16SensorRead * 53)/1000;
    1de6:	2b 81       	ldd	r18, Y+3	; 0x03
    1de8:	3c 81       	ldd	r19, Y+4	; 0x04
    1dea:	85 e3       	ldi	r24, 0x35	; 53
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	ac 01       	movw	r20, r24
    1df0:	24 9f       	mul	r18, r20
    1df2:	c0 01       	movw	r24, r0
    1df4:	25 9f       	mul	r18, r21
    1df6:	90 0d       	add	r25, r0
    1df8:	34 9f       	mul	r19, r20
    1dfa:	90 0d       	add	r25, r0
    1dfc:	11 24       	eor	r1, r1
    1dfe:	28 ee       	ldi	r18, 0xE8	; 232
    1e00:	33 e0       	ldi	r19, 0x03	; 3
    1e02:	b9 01       	movw	r22, r18
    1e04:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__udivmodhi4>
    1e08:	cb 01       	movw	r24, r22
    1e0a:	9c 01       	movw	r18, r24
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e10:	82 0f       	add	r24, r18
    1e12:	93 1f       	adc	r25, r19
    1e14:	9a 83       	std	Y+2, r25	; 0x02
    1e16:	89 83       	std	Y+1, r24	; 0x01

	*Copy_u16ActualTemp = Local_u16Actual;
    1e18:	ed 81       	ldd	r30, Y+5	; 0x05
    1e1a:	fe 81       	ldd	r31, Y+6	; 0x06
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e20:	91 83       	std	Z+1, r25	; 0x01
    1e22:	80 83       	st	Z, r24
	return 0;
    1e24:	80 e0       	ldi	r24, 0x00	; 0
}
    1e26:	26 96       	adiw	r28, 0x06	; 6
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd bf       	out	0x3d, r28	; 61
    1e32:	cf 91       	pop	r28
    1e34:	df 91       	pop	r29
    1e36:	08 95       	ret

00001e38 <TempLCDPrint>:
  Inputs: Actual Temp reading after conversion
  Outputs: Error State -> 0 No Error
                       -> 1 Error
*/
u8 TempLCDPrint(u16 Copy_u16ActualTemp)
{
    1e38:	df 93       	push	r29
    1e3a:	cf 93       	push	r28
    1e3c:	00 d0       	rcall	.+0      	; 0x1e3e <TempLCDPrint+0x6>
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	9a 83       	std	Y+2, r25	; 0x02
    1e44:	89 83       	std	Y+1, r24	; 0x01
	static u16 Local_u16OldTemp;

	/*Write the celisuse Symbole C*/
	LCD_u8GoToXY(9, 1);
    1e46:	89 e0       	ldi	r24, 0x09	; 9
    1e48:	61 e0       	ldi	r22, 0x01	; 1
    1e4a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_u8GoToXY>
	LCD_u8WriteString("C", 1);
    1e4e:	80 e6       	ldi	r24, 0x60	; 96
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	61 e0       	ldi	r22, 0x01	; 1
    1e54:	0e 94 90 0c 	call	0x1920	; 0x1920 <LCD_u8WriteString>

	/*Checking to reduce the instability on LCD*/
	if(Local_u16OldTemp != Copy_u16ActualTemp)
    1e58:	20 91 b2 01 	lds	r18, 0x01B2
    1e5c:	30 91 b3 01 	lds	r19, 0x01B3
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	9a 81       	ldd	r25, Y+2	; 0x02
    1e64:	28 17       	cp	r18, r24
    1e66:	39 07       	cpc	r19, r25
    1e68:	f1 f0       	breq	.+60     	; 0x1ea6 <TempLCDPrint+0x6e>
	{
		/*Write TEMP: on LCD*/
		LCD_u8GoToXY(0, 0);
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	60 e0       	ldi	r22, 0x00	; 0
    1e6e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_u8GoToXY>
		LCD_u8WriteString("TEMP:", 5);
    1e72:	82 e6       	ldi	r24, 0x62	; 98
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	65 e0       	ldi	r22, 0x05	; 5
    1e78:	0e 94 90 0c 	call	0x1920	; 0x1920 <LCD_u8WriteString>

		/*Clear the place to write the new Value*/
		LCD_u8GoToXY(7, 1);
    1e7c:	87 e0       	ldi	r24, 0x07	; 7
    1e7e:	61 e0       	ldi	r22, 0x01	; 1
    1e80:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_u8GoToXY>
		LCD_u8WriteString("     ", 5);
    1e84:	88 e6       	ldi	r24, 0x68	; 104
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	65 e0       	ldi	r22, 0x05	; 5
    1e8a:	0e 94 90 0c 	call	0x1920	; 0x1920 <LCD_u8WriteString>

		/*Write the value of temp*/;
		LCD_voidWriteINT(Copy_u16ActualTemp, 6, 1);
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	9a 81       	ldd	r25, Y+2	; 0x02
    1e92:	66 e0       	ldi	r22, 0x06	; 6
    1e94:	41 e0       	ldi	r20, 0x01	; 1
    1e96:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <LCD_voidWriteINT>
		Local_u16OldTemp = Copy_u16ActualTemp;
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9e:	90 93 b3 01 	sts	0x01B3, r25
    1ea2:	80 93 b2 01 	sts	0x01B2, r24
	}

	return 0;
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
}
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	cf 91       	pop	r28
    1eae:	df 91       	pop	r29
    1eb0:	08 95       	ret

00001eb2 <USART_voidIntialization>:
/*Module*/
#include "DIO_interface.h"
#include "USART_interface.h"

void USART_voidIntialization()
{
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	0f 92       	push	r0
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
	u8 UCSRC_Value = 0;
    1ebc:	19 82       	std	Y+1, r1	; 0x01

	//Enable Transmitter
	#if Transmitting == Enable
	SET_BIT(UCSRB, UCSRB_TXEN);
    1ebe:	aa e2       	ldi	r26, 0x2A	; 42
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	ea e2       	ldi	r30, 0x2A	; 42
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	88 60       	ori	r24, 0x08	; 8
    1eca:	8c 93       	st	X, r24

	#endif

	//Enable Receiver
	#if Reciving == Enable
	SET_BIT(UCSRB, UCSRB_RXEN);
    1ecc:	aa e2       	ldi	r26, 0x2A	; 42
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	ea e2       	ldi	r30, 0x2A	; 42
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	80 61       	ori	r24, 0x10	; 16
    1ed8:	8c 93       	st	X, r24
	CLR_BIT(UCSRB, UCSRB_RXEN);

	#endif

	//Choose UCSRC
	SET_BIT(UCSRC_Value, UCSRC_URSEL);
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	80 68       	ori	r24, 0x80	; 128
    1ede:	89 83       	std	Y+1, r24	; 0x01

	//Choose Asynchronous
	CLR_BIT(UCSRC_Value, UCSRC_UMSEL);
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	8f 7b       	andi	r24, 0xBF	; 191
    1ee4:	89 83       	std	Y+1, r24	; 0x01

	//Choose 1 bit for Stop Bit
	CLR_BIT(UCSRC_Value, UCSRC_USBS);
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	87 7f       	andi	r24, 0xF7	; 247
    1eea:	89 83       	std	Y+1, r24	; 0x01

	//Choose the number of bits (8 Bits)
	CLR_BIT(UCSRB, UCSRB_UCSZ2);
    1eec:	aa e2       	ldi	r26, 0x2A	; 42
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	ea e2       	ldi	r30, 0x2A	; 42
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	8b 7f       	andi	r24, 0xFB	; 251
    1ef8:	8c 93       	st	X, r24
	SET_BIT(UCSRC_Value, UCSRC_UCSZ0);
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	82 60       	ori	r24, 0x02	; 2
    1efe:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_Value, UCSRC_UCSZ1);
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	84 60       	ori	r24, 0x04	; 4
    1f04:	89 83       	std	Y+1, r24	; 0x01

	//Choose speed 9600
	#if Double_Transmission_Speed == LOW
	CLR_BIT(UCSRA, UCSRA_U2X);
    1f06:	ab e2       	ldi	r26, 0x2B	; 43
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	eb e2       	ldi	r30, 0x2B	; 43
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	8d 7f       	andi	r24, 0xFD	; 253
    1f12:	8c 93       	st	X, r24
	#elif Double_Transmission_Speed == HIGH
	SET_BIT(UCSRA, UCSRA_U2X);

	#endif

	UBRRL = UBRLL_Value;
    1f14:	e9 e2       	ldi	r30, 0x29	; 41
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	83 e3       	ldi	r24, 0x33	; 51
    1f1a:	80 83       	st	Z, r24

	/*Choosing Multi-Processor or No*/
	#if Multi_Processor == LOW
	CLR_BIT(UCSRA, UCSRA_MPCM);
    1f1c:	ab e2       	ldi	r26, 0x2B	; 43
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	eb e2       	ldi	r30, 0x2B	; 43
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	8e 7f       	andi	r24, 0xFE	; 254
    1f28:	8c 93       	st	X, r24

	#endif

	/*Interrupt For Transmitting*/
	#if TX_Interrupt == HIGH
	SET_BIT(UCSRB, UCSRB_TXCIE);
    1f2a:	aa e2       	ldi	r26, 0x2A	; 42
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	ea e2       	ldi	r30, 0x2A	; 42
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	80 64       	ori	r24, 0x40	; 64
    1f36:	8c 93       	st	X, r24

	#endif

	/*Interrupt For Receiving*/
	#if RX_Interrupt == HIGH
	SET_BIT(UCSRB, UCSRB_RXCIE);
    1f38:	aa e2       	ldi	r26, 0x2A	; 42
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	ea e2       	ldi	r30, 0x2A	; 42
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	80 68       	ori	r24, 0x80	; 128
    1f44:	8c 93       	st	X, r24

	#endif

	/*USART Data Register Empty Interrupt*/
	#if DataRegEmptyInterrupt == HIGH
	SET_BIT(UCSRB, UCSRB_UDRIE);
    1f46:	aa e2       	ldi	r26, 0x2A	; 42
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	ea e2       	ldi	r30, 0x2A	; 42
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	80 62       	ori	r24, 0x20	; 32
    1f52:	8c 93       	st	X, r24
	CLR_BIT(UCSRB, UCSRB_UDRIE);

	#endif

	/*Put The Value in the Register*/
	UCSRC = UCSRC_Value;
    1f54:	e0 e4       	ldi	r30, 0x40	; 64
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	80 83       	st	Z, r24
}
    1f5c:	0f 90       	pop	r0
    1f5e:	cf 91       	pop	r28
    1f60:	df 91       	pop	r29
    1f62:	08 95       	ret

00001f64 <USART_u8SendChar>:

u8 USART_u8SendChar(u8 Copy_u8Char)
{
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	0f 92       	push	r0
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
    1f6e:	89 83       	std	Y+1, r24	; 0x01
	while(!(GET_BIT(UCSRA, UCSRA_UDRE)));
    1f70:	eb e2       	ldi	r30, 0x2B	; 43
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	82 95       	swap	r24
    1f78:	86 95       	lsr	r24
    1f7a:	87 70       	andi	r24, 0x07	; 7
    1f7c:	88 2f       	mov	r24, r24
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	81 70       	andi	r24, 0x01	; 1
    1f82:	90 70       	andi	r25, 0x00	; 0
    1f84:	00 97       	sbiw	r24, 0x00	; 0
    1f86:	a1 f3       	breq	.-24     	; 0x1f70 <USART_u8SendChar+0xc>

	/*Assign the Value to the register*/
	UDR = Copy_u8Char;
    1f88:	ec e2       	ldi	r30, 0x2C	; 44
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	80 83       	st	Z, r24

	return 0;
    1f90:	80 e0       	ldi	r24, 0x00	; 0
}
    1f92:	0f 90       	pop	r0
    1f94:	cf 91       	pop	r28
    1f96:	df 91       	pop	r29
    1f98:	08 95       	ret

00001f9a <USART_u8ReceiveChar>:

//u8 USART_u8ReceiveChar(u8 * Copy_u8Data)
u8 USART_u8ReceiveChar(void)
{
    1f9a:	df 93       	push	r29
    1f9c:	cf 93       	push	r28
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
	while(!(GET_BIT(UCSRA, UCSRA_RXC)));
    1fa2:	eb e2       	ldi	r30, 0x2B	; 43
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	88 23       	and	r24, r24
    1faa:	dc f7       	brge	.-10     	; 0x1fa2 <USART_u8ReceiveChar+0x8>
	//While(((GET_BIT(UCSRA, UCSRA_RXC)) == 0);
	//*Copy_u8Data = UDR;

	//SET_BIT(UCSRA, UCSRA_RXC);

	return UDR;
    1fac:	ec e2       	ldi	r30, 0x2C	; 44
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
}
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <USART_u8SendString>:


//SHould change pointer data type to char
void USART_u8SendString(u8 * Copy_u8STR)
{
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	00 d0       	rcall	.+0      	; 0x1fbe <USART_u8SendString+0x6>
    1fbe:	0f 92       	push	r0
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	9b 83       	std	Y+3, r25	; 0x03
    1fc6:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1fc8:	19 82       	std	Y+1, r1	; 0x01
    1fca:	0e c0       	rjmp	.+28     	; 0x1fe8 <USART_u8SendString+0x30>

	while(Copy_u8STR[i] != '\0') //'\0' means the end of the array
	{
		USART_u8SendChar(Copy_u8STR[i]);
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	28 2f       	mov	r18, r24
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd6:	fc 01       	movw	r30, r24
    1fd8:	e2 0f       	add	r30, r18
    1fda:	f3 1f       	adc	r31, r19
    1fdc:	80 81       	ld	r24, Z
    1fde:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <USART_u8SendChar>
		i++;
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	8f 5f       	subi	r24, 0xFF	; 255
    1fe6:	89 83       	std	Y+1, r24	; 0x01
//SHould change pointer data type to char
void USART_u8SendString(u8 * Copy_u8STR)
{
	u8 i = 0;

	while(Copy_u8STR[i] != '\0') //'\0' means the end of the array
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	e2 0f       	add	r30, r18
    1ff6:	f3 1f       	adc	r31, r19
    1ff8:	80 81       	ld	r24, Z
    1ffa:	88 23       	and	r24, r24
    1ffc:	39 f7       	brne	.-50     	; 0x1fcc <USART_u8SendString+0x14>
	{
		USART_u8SendChar(Copy_u8STR[i]);
		i++;
	}
}
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <USART_u8ReciveString>:

void USART_u8ReciveString(u8 * arrOfString)
{
    200a:	0f 93       	push	r16
    200c:	1f 93       	push	r17
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	00 d0       	rcall	.+0      	; 0x2014 <USART_u8ReciveString+0xa>
    2014:	0f 92       	push	r0
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    201a:	9b 83       	std	Y+3, r25	; 0x03
    201c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    201e:	19 82       	std	Y+1, r1	; 0x01
    2020:	0c c0       	rjmp	.+24     	; 0x203a <USART_u8ReciveString+0x30>

	while(arrOfString[i] != '\0')
	//for(i = 0; i < 16; i++)
	{
		arrOfString[i] = USART_u8ReceiveChar();
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	28 2f       	mov	r18, r24
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	9b 81       	ldd	r25, Y+3	; 0x03
    202c:	8c 01       	movw	r16, r24
    202e:	02 0f       	add	r16, r18
    2030:	13 1f       	adc	r17, r19
    2032:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <USART_u8ReceiveChar>
    2036:	f8 01       	movw	r30, r16
    2038:	80 83       	st	Z, r24

void USART_u8ReciveString(u8 * arrOfString)
{
	u8 i = 0;

	while(arrOfString[i] != '\0')
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	9b 81       	ldd	r25, Y+3	; 0x03
    2044:	fc 01       	movw	r30, r24
    2046:	e2 0f       	add	r30, r18
    2048:	f3 1f       	adc	r31, r19
    204a:	80 81       	ld	r24, Z
    204c:	88 23       	and	r24, r24
    204e:	49 f7       	brne	.-46     	; 0x2022 <USART_u8ReciveString+0x18>
	//for(i = 0; i < 16; i++)
	{
		arrOfString[i] = USART_u8ReceiveChar();
	}
}
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	1f 91       	pop	r17
    205c:	0f 91       	pop	r16
    205e:	08 95       	ret

00002060 <Read_Response>:
volatile int16_t Counter = 0, pointer = 0;
uint32_t TimeOut = 0;
char RESPONSE_BUFFER[DEFAULT_BUFFER_SIZE];

void Read_Response(char* _Expected_Response)
{
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	e1 97       	sbiw	r28, 0x31	; 49
    206a:	0f b6       	in	r0, 0x3f	; 63
    206c:	f8 94       	cli
    206e:	de bf       	out	0x3e, r29	; 62
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	cd bf       	out	0x3d, r28	; 61
    2074:	9b a7       	std	Y+43, r25	; 0x2b
    2076:	8a a7       	std	Y+42, r24	; 0x2a
			}
		}
		_delay_ms(1);
		TimeCount++;
	}
}
    2078:	2d b7       	in	r18, 0x3d	; 61
    207a:	3e b7       	in	r19, 0x3e	; 62
    207c:	39 ab       	std	Y+49, r19	; 0x31
    207e:	28 ab       	std	Y+48, r18	; 0x30
volatile int16_t Counter = 0, pointer = 0;
uint32_t TimeOut = 0;
char RESPONSE_BUFFER[DEFAULT_BUFFER_SIZE];

void Read_Response(char* _Expected_Response)
{
    2080:	8d b7       	in	r24, 0x3d	; 61
    2082:	9e b7       	in	r25, 0x3e	; 62
    2084:	9d a7       	std	Y+45, r25	; 0x2d
    2086:	8c a7       	std	Y+44, r24	; 0x2c
	uint8_t EXPECTED_RESPONSE_LENGTH = strlen(_Expected_Response);
    2088:	8a a5       	ldd	r24, Y+42	; 0x2a
    208a:	9b a5       	ldd	r25, Y+43	; 0x2b
    208c:	0e 94 57 18 	call	0x30ae	; 0x30ae <strlen>
    2090:	8f a3       	std	Y+39, r24	; 0x27
	uint32_t TimeCount = 0, ResponseBufferLength;
    2092:	1b a2       	std	Y+35, r1	; 0x23
    2094:	1c a2       	std	Y+36, r1	; 0x24
    2096:	1d a2       	std	Y+37, r1	; 0x25
    2098:	1e a2       	std	Y+38, r1	; 0x26
	char RECEIVED_CRLF_BUF[EXPECTED_RESPONSE_LENGTH];
    209a:	8f a1       	ldd	r24, Y+39	; 0x27
    209c:	88 2f       	mov	r24, r24
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	2d b7       	in	r18, 0x3d	; 61
    20a2:	3e b7       	in	r19, 0x3e	; 62
    20a4:	28 1b       	sub	r18, r24
    20a6:	39 0b       	sbc	r19, r25
    20a8:	0f b6       	in	r0, 0x3f	; 63
    20aa:	f8 94       	cli
    20ac:	3e bf       	out	0x3e, r19	; 62
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	2d bf       	out	0x3d, r18	; 61
    20b2:	8d b7       	in	r24, 0x3d	; 61
    20b4:	9e b7       	in	r25, 0x3e	; 62
    20b6:	01 96       	adiw	r24, 0x01	; 1
    20b8:	9f a7       	std	Y+47, r25	; 0x2f
    20ba:	8e a7       	std	Y+46, r24	; 0x2e
    20bc:	8e a5       	ldd	r24, Y+46	; 0x2e
    20be:	9f a5       	ldd	r25, Y+47	; 0x2f
    20c0:	00 96       	adiw	r24, 0x00	; 0
    20c2:	9f a7       	std	Y+47, r25	; 0x2f
    20c4:	8e a7       	std	Y+46, r24	; 0x2e
    20c6:	2e a5       	ldd	r18, Y+46	; 0x2e
    20c8:	3f a5       	ldd	r19, Y+47	; 0x2f
    20ca:	39 a7       	std	Y+41, r19	; 0x29
    20cc:	28 a7       	std	Y+40, r18	; 0x28

	while(1)
	{
		if(TimeCount >= (DEFAULT_TIMEOUT+TimeOut))
    20ce:	80 91 b8 01 	lds	r24, 0x01B8
    20d2:	90 91 b9 01 	lds	r25, 0x01B9
    20d6:	a0 91 ba 01 	lds	r26, 0x01BA
    20da:	b0 91 bb 01 	lds	r27, 0x01BB
    20de:	9c 01       	movw	r18, r24
    20e0:	ad 01       	movw	r20, r26
    20e2:	20 5f       	subi	r18, 0xF0	; 240
    20e4:	38 4d       	sbci	r19, 0xD8	; 216
    20e6:	4f 4f       	sbci	r20, 0xFF	; 255
    20e8:	5f 4f       	sbci	r21, 0xFF	; 255
    20ea:	8b a1       	ldd	r24, Y+35	; 0x23
    20ec:	9c a1       	ldd	r25, Y+36	; 0x24
    20ee:	ad a1       	ldd	r26, Y+37	; 0x25
    20f0:	be a1       	ldd	r27, Y+38	; 0x26
    20f2:	82 17       	cp	r24, r18
    20f4:	93 07       	cpc	r25, r19
    20f6:	a4 07       	cpc	r26, r20
    20f8:	b5 07       	cpc	r27, r21
    20fa:	60 f0       	brcs	.+24     	; 0x2114 <Read_Response+0xb4>
		{
			TimeOut = 0;
    20fc:	10 92 b8 01 	sts	0x01B8, r1
    2100:	10 92 b9 01 	sts	0x01B9, r1
    2104:	10 92 ba 01 	sts	0x01BA, r1
    2108:	10 92 bb 01 	sts	0x01BB, r1
			Response_Status = ESP8266_RESPONSE_TIMEOUT;
    210c:	82 e0       	ldi	r24, 0x02	; 2
    210e:	80 93 5c 02 	sts	0x025C, r24
    2112:	7a c1       	rjmp	.+756    	; 0x2408 <Read_Response+0x3a8>
			return;
		}

		if(Response_Status == ESP8266_RESPONSE_STARTING)
    2114:	80 91 5c 02 	lds	r24, 0x025C
    2118:	84 30       	cpi	r24, 0x04	; 4
    211a:	11 f4       	brne	.+4      	; 0x2120 <Read_Response+0xc0>
		{
			Response_Status = ESP8266_RESPONSE_WAITING;
    211c:	10 92 5c 02 	sts	0x025C, r1
		}
		ResponseBufferLength = strlen(RESPONSE_BUFFER);
    2120:	8c eb       	ldi	r24, 0xBC	; 188
    2122:	91 e0       	ldi	r25, 0x01	; 1
    2124:	0e 94 57 18 	call	0x30ae	; 0x30ae <strlen>
    2128:	cc 01       	movw	r24, r24
    212a:	a0 e0       	ldi	r26, 0x00	; 0
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	8f 8f       	std	Y+31, r24	; 0x1f
    2130:	98 a3       	std	Y+32, r25	; 0x20
    2132:	a9 a3       	std	Y+33, r26	; 0x21
    2134:	ba a3       	std	Y+34, r27	; 0x22
		if (ResponseBufferLength)
    2136:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2138:	98 a1       	ldd	r25, Y+32	; 0x20
    213a:	a9 a1       	ldd	r26, Y+33	; 0x21
    213c:	ba a1       	ldd	r27, Y+34	; 0x22
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	a1 05       	cpc	r26, r1
    2142:	b1 05       	cpc	r27, r1
    2144:	09 f4       	brne	.+2      	; 0x2148 <Read_Response+0xe8>
    2146:	e2 c0       	rjmp	.+452    	; 0x230c <Read_Response+0x2ac>
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	a0 e8       	ldi	r26, 0x80	; 128
    214e:	bf e3       	ldi	r27, 0x3F	; 63
    2150:	89 8f       	std	Y+25, r24	; 0x19
    2152:	9a 8f       	std	Y+26, r25	; 0x1a
    2154:	ab 8f       	std	Y+27, r26	; 0x1b
    2156:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2158:	69 8d       	ldd	r22, Y+25	; 0x19
    215a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    215c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    215e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	4a ef       	ldi	r20, 0xFA	; 250
    2166:	54 e4       	ldi	r21, 0x44	; 68
    2168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	8d 8b       	std	Y+21, r24	; 0x15
    2172:	9e 8b       	std	Y+22, r25	; 0x16
    2174:	af 8b       	std	Y+23, r26	; 0x17
    2176:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2178:	6d 89       	ldd	r22, Y+21	; 0x15
    217a:	7e 89       	ldd	r23, Y+22	; 0x16
    217c:	8f 89       	ldd	r24, Y+23	; 0x17
    217e:	98 8d       	ldd	r25, Y+24	; 0x18
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e8       	ldi	r20, 0x80	; 128
    2186:	5f e3       	ldi	r21, 0x3F	; 63
    2188:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    218c:	88 23       	and	r24, r24
    218e:	2c f4       	brge	.+10     	; 0x219a <Read_Response+0x13a>
		__ticks = 1;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	9c 8b       	std	Y+20, r25	; 0x14
    2196:	8b 8b       	std	Y+19, r24	; 0x13
    2198:	3f c0       	rjmp	.+126    	; 0x2218 <Read_Response+0x1b8>
	else if (__tmp > 65535)
    219a:	6d 89       	ldd	r22, Y+21	; 0x15
    219c:	7e 89       	ldd	r23, Y+22	; 0x16
    219e:	8f 89       	ldd	r24, Y+23	; 0x17
    21a0:	98 8d       	ldd	r25, Y+24	; 0x18
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	3f ef       	ldi	r19, 0xFF	; 255
    21a6:	4f e7       	ldi	r20, 0x7F	; 127
    21a8:	57 e4       	ldi	r21, 0x47	; 71
    21aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ae:	18 16       	cp	r1, r24
    21b0:	4c f5       	brge	.+82     	; 0x2204 <Read_Response+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b2:	69 8d       	ldd	r22, Y+25	; 0x19
    21b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e2       	ldi	r20, 0x20	; 32
    21c0:	51 e4       	ldi	r21, 0x41	; 65
    21c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	bc 01       	movw	r22, r24
    21cc:	cd 01       	movw	r24, r26
    21ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	9c 8b       	std	Y+20, r25	; 0x14
    21d8:	8b 8b       	std	Y+19, r24	; 0x13
    21da:	0f c0       	rjmp	.+30     	; 0x21fa <Read_Response+0x19a>
    21dc:	88 ec       	ldi	r24, 0xC8	; 200
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	9a 8b       	std	Y+18, r25	; 0x12
    21e2:	89 8b       	std	Y+17, r24	; 0x11
    21e4:	89 89       	ldd	r24, Y+17	; 0x11
    21e6:	9a 89       	ldd	r25, Y+18	; 0x12
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <Read_Response+0x188>
    21ec:	9a 8b       	std	Y+18, r25	; 0x12
    21ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f0:	8b 89       	ldd	r24, Y+19	; 0x13
    21f2:	9c 89       	ldd	r25, Y+20	; 0x14
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	9c 8b       	std	Y+20, r25	; 0x14
    21f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fa:	8b 89       	ldd	r24, Y+19	; 0x13
    21fc:	9c 89       	ldd	r25, Y+20	; 0x14
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	69 f7       	brne	.-38     	; 0x21dc <Read_Response+0x17c>
    2202:	14 c0       	rjmp	.+40     	; 0x222c <Read_Response+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2204:	6d 89       	ldd	r22, Y+21	; 0x15
    2206:	7e 89       	ldd	r23, Y+22	; 0x16
    2208:	8f 89       	ldd	r24, Y+23	; 0x17
    220a:	98 8d       	ldd	r25, Y+24	; 0x18
    220c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	9c 8b       	std	Y+20, r25	; 0x14
    2216:	8b 8b       	std	Y+19, r24	; 0x13
    2218:	8b 89       	ldd	r24, Y+19	; 0x13
    221a:	9c 89       	ldd	r25, Y+20	; 0x14
    221c:	98 8b       	std	Y+16, r25	; 0x10
    221e:	8f 87       	std	Y+15, r24	; 0x0f
    2220:	8f 85       	ldd	r24, Y+15	; 0x0f
    2222:	98 89       	ldd	r25, Y+16	; 0x10
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <Read_Response+0x1c4>
    2228:	98 8b       	std	Y+16, r25	; 0x10
    222a:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(1);
			TimeCount++;
    222c:	8b a1       	ldd	r24, Y+35	; 0x23
    222e:	9c a1       	ldd	r25, Y+36	; 0x24
    2230:	ad a1       	ldd	r26, Y+37	; 0x25
    2232:	be a1       	ldd	r27, Y+38	; 0x26
    2234:	01 96       	adiw	r24, 0x01	; 1
    2236:	a1 1d       	adc	r26, r1
    2238:	b1 1d       	adc	r27, r1
    223a:	8b a3       	std	Y+35, r24	; 0x23
    223c:	9c a3       	std	Y+36, r25	; 0x24
    223e:	ad a3       	std	Y+37, r26	; 0x25
    2240:	be a3       	std	Y+38, r27	; 0x26
			if (ResponseBufferLength==strlen(RESPONSE_BUFFER))
    2242:	8c eb       	ldi	r24, 0xBC	; 188
    2244:	91 e0       	ldi	r25, 0x01	; 1
    2246:	0e 94 57 18 	call	0x30ae	; 0x30ae <strlen>
    224a:	9c 01       	movw	r18, r24
    224c:	40 e0       	ldi	r20, 0x00	; 0
    224e:	50 e0       	ldi	r21, 0x00	; 0
    2250:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2252:	98 a1       	ldd	r25, Y+32	; 0x20
    2254:	a9 a1       	ldd	r26, Y+33	; 0x21
    2256:	ba a1       	ldd	r27, Y+34	; 0x22
    2258:	28 17       	cp	r18, r24
    225a:	39 07       	cpc	r19, r25
    225c:	4a 07       	cpc	r20, r26
    225e:	5b 07       	cpc	r21, r27
    2260:	09 f0       	breq	.+2      	; 0x2264 <Read_Response+0x204>
    2262:	54 c0       	rjmp	.+168    	; 0x230c <Read_Response+0x2ac>
			{
				for (uint16_t i=0;i<ResponseBufferLength;i++)
    2264:	1e 8e       	std	Y+30, r1	; 0x1e
    2266:	1d 8e       	std	Y+29, r1	; 0x1d
    2268:	42 c0       	rjmp	.+132    	; 0x22ee <Read_Response+0x28e>
				{
					memmove(RECEIVED_CRLF_BUF, RECEIVED_CRLF_BUF + 1, EXPECTED_RESPONSE_LENGTH-1);
    226a:	68 a5       	ldd	r22, Y+40	; 0x28
    226c:	79 a5       	ldd	r23, Y+41	; 0x29
    226e:	88 a5       	ldd	r24, Y+40	; 0x28
    2270:	99 a5       	ldd	r25, Y+41	; 0x29
    2272:	ac 01       	movw	r20, r24
    2274:	4f 5f       	subi	r20, 0xFF	; 255
    2276:	5f 4f       	sbci	r21, 0xFF	; 255
    2278:	8f a1       	ldd	r24, Y+39	; 0x27
    227a:	88 2f       	mov	r24, r24
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	9c 01       	movw	r18, r24
    2282:	cb 01       	movw	r24, r22
    2284:	ba 01       	movw	r22, r20
    2286:	a9 01       	movw	r20, r18
    2288:	0e 94 3e 18 	call	0x307c	; 0x307c <memmove>
					RECEIVED_CRLF_BUF[EXPECTED_RESPONSE_LENGTH-1] = RESPONSE_BUFFER[i];
    228c:	8f a1       	ldd	r24, Y+39	; 0x27
    228e:	88 2f       	mov	r24, r24
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	9c 01       	movw	r18, r24
    2294:	21 50       	subi	r18, 0x01	; 1
    2296:	30 40       	sbci	r19, 0x00	; 0
    2298:	8d 8d       	ldd	r24, Y+29	; 0x1d
    229a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    229c:	fc 01       	movw	r30, r24
    229e:	e4 54       	subi	r30, 0x44	; 68
    22a0:	fe 4f       	sbci	r31, 0xFE	; 254
    22a2:	40 81       	ld	r20, Z
    22a4:	88 a5       	ldd	r24, Y+40	; 0x28
    22a6:	99 a5       	ldd	r25, Y+41	; 0x29
    22a8:	fc 01       	movw	r30, r24
    22aa:	e2 0f       	add	r30, r18
    22ac:	f3 1f       	adc	r31, r19
    22ae:	40 83       	st	Z, r20
					if(!strncmp(RECEIVED_CRLF_BUF, _Expected_Response, EXPECTED_RESPONSE_LENGTH))
    22b0:	48 a5       	ldd	r20, Y+40	; 0x28
    22b2:	59 a5       	ldd	r21, Y+41	; 0x29
    22b4:	8f a1       	ldd	r24, Y+39	; 0x27
    22b6:	e8 2f       	mov	r30, r24
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	2a a5       	ldd	r18, Y+42	; 0x2a
    22bc:	3b a5       	ldd	r19, Y+43	; 0x2b
    22be:	ca 01       	movw	r24, r20
    22c0:	b9 01       	movw	r22, r18
    22c2:	af 01       	movw	r20, r30
    22c4:	0e 94 60 18 	call	0x30c0	; 0x30c0 <strncmp>
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	61 f4       	brne	.+24     	; 0x22e4 <Read_Response+0x284>
					{
						TimeOut = 0;
    22cc:	10 92 b8 01 	sts	0x01B8, r1
    22d0:	10 92 b9 01 	sts	0x01B9, r1
    22d4:	10 92 ba 01 	sts	0x01BA, r1
    22d8:	10 92 bb 01 	sts	0x01BB, r1
						Response_Status = ESP8266_RESPONSE_FINISHED;
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	80 93 5c 02 	sts	0x025C, r24
    22e2:	92 c0       	rjmp	.+292    	; 0x2408 <Read_Response+0x3a8>
		{
			_delay_ms(1);
			TimeCount++;
			if (ResponseBufferLength==strlen(RESPONSE_BUFFER))
			{
				for (uint16_t i=0;i<ResponseBufferLength;i++)
    22e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22e8:	01 96       	adiw	r24, 0x01	; 1
    22ea:	9e 8f       	std	Y+30, r25	; 0x1e
    22ec:	8d 8f       	std	Y+29, r24	; 0x1d
    22ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22f2:	9c 01       	movw	r18, r24
    22f4:	40 e0       	ldi	r20, 0x00	; 0
    22f6:	50 e0       	ldi	r21, 0x00	; 0
    22f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22fa:	98 a1       	ldd	r25, Y+32	; 0x20
    22fc:	a9 a1       	ldd	r26, Y+33	; 0x21
    22fe:	ba a1       	ldd	r27, Y+34	; 0x22
    2300:	28 17       	cp	r18, r24
    2302:	39 07       	cpc	r19, r25
    2304:	4a 07       	cpc	r20, r26
    2306:	5b 07       	cpc	r21, r27
    2308:	08 f4       	brcc	.+2      	; 0x230c <Read_Response+0x2ac>
    230a:	af cf       	rjmp	.-162    	; 0x226a <Read_Response+0x20a>
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	a0 e8       	ldi	r26, 0x80	; 128
    2312:	bf e3       	ldi	r27, 0x3F	; 63
    2314:	8b 87       	std	Y+11, r24	; 0x0b
    2316:	9c 87       	std	Y+12, r25	; 0x0c
    2318:	ad 87       	std	Y+13, r26	; 0x0d
    231a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    231c:	6b 85       	ldd	r22, Y+11	; 0x0b
    231e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2320:	8d 85       	ldd	r24, Y+13	; 0x0d
    2322:	9e 85       	ldd	r25, Y+14	; 0x0e
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	4a ef       	ldi	r20, 0xFA	; 250
    232a:	54 e4       	ldi	r21, 0x44	; 68
    232c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	8f 83       	std	Y+7, r24	; 0x07
    2336:	98 87       	std	Y+8, r25	; 0x08
    2338:	a9 87       	std	Y+9, r26	; 0x09
    233a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    233c:	6f 81       	ldd	r22, Y+7	; 0x07
    233e:	78 85       	ldd	r23, Y+8	; 0x08
    2340:	89 85       	ldd	r24, Y+9	; 0x09
    2342:	9a 85       	ldd	r25, Y+10	; 0x0a
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	40 e8       	ldi	r20, 0x80	; 128
    234a:	5f e3       	ldi	r21, 0x3F	; 63
    234c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2350:	88 23       	and	r24, r24
    2352:	2c f4       	brge	.+10     	; 0x235e <Read_Response+0x2fe>
		__ticks = 1;
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	9e 83       	std	Y+6, r25	; 0x06
    235a:	8d 83       	std	Y+5, r24	; 0x05
    235c:	3f c0       	rjmp	.+126    	; 0x23dc <Read_Response+0x37c>
	else if (__tmp > 65535)
    235e:	6f 81       	ldd	r22, Y+7	; 0x07
    2360:	78 85       	ldd	r23, Y+8	; 0x08
    2362:	89 85       	ldd	r24, Y+9	; 0x09
    2364:	9a 85       	ldd	r25, Y+10	; 0x0a
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	3f ef       	ldi	r19, 0xFF	; 255
    236a:	4f e7       	ldi	r20, 0x7F	; 127
    236c:	57 e4       	ldi	r21, 0x47	; 71
    236e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2372:	18 16       	cp	r1, r24
    2374:	4c f5       	brge	.+82     	; 0x23c8 <Read_Response+0x368>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2376:	6b 85       	ldd	r22, Y+11	; 0x0b
    2378:	7c 85       	ldd	r23, Y+12	; 0x0c
    237a:	8d 85       	ldd	r24, Y+13	; 0x0d
    237c:	9e 85       	ldd	r25, Y+14	; 0x0e
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e2       	ldi	r20, 0x20	; 32
    2384:	51 e4       	ldi	r21, 0x41	; 65
    2386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	bc 01       	movw	r22, r24
    2390:	cd 01       	movw	r24, r26
    2392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	9e 83       	std	Y+6, r25	; 0x06
    239c:	8d 83       	std	Y+5, r24	; 0x05
    239e:	0f c0       	rjmp	.+30     	; 0x23be <Read_Response+0x35e>
    23a0:	88 ec       	ldi	r24, 0xC8	; 200
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	9c 83       	std	Y+4, r25	; 0x04
    23a6:	8b 83       	std	Y+3, r24	; 0x03
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	9c 81       	ldd	r25, Y+4	; 0x04
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	f1 f7       	brne	.-4      	; 0x23ac <Read_Response+0x34c>
    23b0:	9c 83       	std	Y+4, r25	; 0x04
    23b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b4:	8d 81       	ldd	r24, Y+5	; 0x05
    23b6:	9e 81       	ldd	r25, Y+6	; 0x06
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	9e 83       	std	Y+6, r25	; 0x06
    23bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23be:	8d 81       	ldd	r24, Y+5	; 0x05
    23c0:	9e 81       	ldd	r25, Y+6	; 0x06
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	69 f7       	brne	.-38     	; 0x23a0 <Read_Response+0x340>
    23c6:	14 c0       	rjmp	.+40     	; 0x23f0 <Read_Response+0x390>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c8:	6f 81       	ldd	r22, Y+7	; 0x07
    23ca:	78 85       	ldd	r23, Y+8	; 0x08
    23cc:	89 85       	ldd	r24, Y+9	; 0x09
    23ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	9e 83       	std	Y+6, r25	; 0x06
    23da:	8d 83       	std	Y+5, r24	; 0x05
    23dc:	8d 81       	ldd	r24, Y+5	; 0x05
    23de:	9e 81       	ldd	r25, Y+6	; 0x06
    23e0:	9a 83       	std	Y+2, r25	; 0x02
    23e2:	89 83       	std	Y+1, r24	; 0x01
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	9a 81       	ldd	r25, Y+2	; 0x02
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	f1 f7       	brne	.-4      	; 0x23e8 <Read_Response+0x388>
    23ec:	9a 83       	std	Y+2, r25	; 0x02
    23ee:	89 83       	std	Y+1, r24	; 0x01
					}
				}
			}
		}
		_delay_ms(1);
		TimeCount++;
    23f0:	8b a1       	ldd	r24, Y+35	; 0x23
    23f2:	9c a1       	ldd	r25, Y+36	; 0x24
    23f4:	ad a1       	ldd	r26, Y+37	; 0x25
    23f6:	be a1       	ldd	r27, Y+38	; 0x26
    23f8:	01 96       	adiw	r24, 0x01	; 1
    23fa:	a1 1d       	adc	r26, r1
    23fc:	b1 1d       	adc	r27, r1
    23fe:	8b a3       	std	Y+35, r24	; 0x23
    2400:	9c a3       	std	Y+36, r25	; 0x24
    2402:	ad a3       	std	Y+37, r26	; 0x25
    2404:	be a3       	std	Y+38, r27	; 0x26
    2406:	63 ce       	rjmp	.-826    	; 0x20ce <Read_Response+0x6e>
	}
    2408:	8c a5       	ldd	r24, Y+44	; 0x2c
    240a:	9d a5       	ldd	r25, Y+45	; 0x2d
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	9e bf       	out	0x3e, r25	; 62
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	8d bf       	out	0x3d, r24	; 61
}
    2416:	28 a9       	ldd	r18, Y+48	; 0x30
    2418:	39 a9       	ldd	r19, Y+49	; 0x31
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	f8 94       	cli
    241e:	3e bf       	out	0x3e, r19	; 62
    2420:	0f be       	out	0x3f, r0	; 63
    2422:	2d bf       	out	0x3d, r18	; 61
    2424:	e1 96       	adiw	r28, 0x31	; 49
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	f8 94       	cli
    242a:	de bf       	out	0x3e, r29	; 62
    242c:	0f be       	out	0x3f, r0	; 63
    242e:	cd bf       	out	0x3d, r28	; 61
    2430:	cf 91       	pop	r28
    2432:	df 91       	pop	r29
    2434:	08 95       	ret

00002436 <ESP8266_Clear>:

void ESP8266_Clear()
{
    2436:	df 93       	push	r29
    2438:	cf 93       	push	r28
    243a:	cd b7       	in	r28, 0x3d	; 61
    243c:	de b7       	in	r29, 0x3e	; 62
	memset(RESPONSE_BUFFER,0,DEFAULT_BUFFER_SIZE);
    243e:	8c eb       	ldi	r24, 0xBC	; 188
    2440:	91 e0       	ldi	r25, 0x01	; 1
    2442:	60 e0       	ldi	r22, 0x00	; 0
    2444:	70 e0       	ldi	r23, 0x00	; 0
    2446:	40 ea       	ldi	r20, 0xA0	; 160
    2448:	50 e0       	ldi	r21, 0x00	; 0
    244a:	0e 94 50 18 	call	0x30a0	; 0x30a0 <memset>
	Counter = 0;	pointer = 0;
    244e:	10 92 b5 01 	sts	0x01B5, r1
    2452:	10 92 b4 01 	sts	0x01B4, r1
    2456:	10 92 b7 01 	sts	0x01B7, r1
    245a:	10 92 b6 01 	sts	0x01B6, r1
}
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	08 95       	ret

00002464 <Start_Read_Response>:

void Start_Read_Response(char* _ExpectedResponse)
{
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	00 d0       	rcall	.+0      	; 0x246a <Start_Read_Response+0x6>
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
    246e:	9a 83       	std	Y+2, r25	; 0x02
    2470:	89 83       	std	Y+1, r24	; 0x01
	Response_Status = ESP8266_RESPONSE_STARTING;
    2472:	84 e0       	ldi	r24, 0x04	; 4
    2474:	80 93 5c 02 	sts	0x025C, r24
	do {
		Read_Response(_ExpectedResponse);
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	9a 81       	ldd	r25, Y+2	; 0x02
    247c:	0e 94 30 10 	call	0x2060	; 0x2060 <Read_Response>
	} while(Response_Status == ESP8266_RESPONSE_WAITING);
    2480:	80 91 5c 02 	lds	r24, 0x025C
    2484:	88 23       	and	r24, r24
    2486:	c1 f3       	breq	.-16     	; 0x2478 <Start_Read_Response+0x14>

}
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	cf 91       	pop	r28
    248e:	df 91       	pop	r29
    2490:	08 95       	ret

00002492 <GetResponseBody>:

void GetResponseBody(char* Response, uint16_t ResponseLength)
{
    2492:	df 93       	push	r29
    2494:	cf 93       	push	r28
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
    249a:	2d 97       	sbiw	r28, 0x0d	; 13
    249c:	0f b6       	in	r0, 0x3f	; 63
    249e:	f8 94       	cli
    24a0:	de bf       	out	0x3e, r29	; 62
    24a2:	0f be       	out	0x3f, r0	; 63
    24a4:	cd bf       	out	0x3d, r28	; 61
    24a6:	9b 87       	std	Y+11, r25	; 0x0b
    24a8:	8a 87       	std	Y+10, r24	; 0x0a
    24aa:	7d 87       	std	Y+13, r23	; 0x0d
    24ac:	6c 87       	std	Y+12, r22	; 0x0c

	uint16_t i = 12;
    24ae:	8c e0       	ldi	r24, 0x0C	; 12
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	9c 83       	std	Y+4, r25	; 0x04
    24b4:	8b 83       	std	Y+3, r24	; 0x03
    24b6:	05 c0       	rjmp	.+10     	; 0x24c2 <GetResponseBody+0x30>
	char buffer[5];
	while(Response[i] != '\r')
	++i;
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	9c 81       	ldd	r25, Y+4	; 0x04
    24bc:	01 96       	adiw	r24, 0x01	; 1
    24be:	9c 83       	std	Y+4, r25	; 0x04
    24c0:	8b 83       	std	Y+3, r24	; 0x03
void GetResponseBody(char* Response, uint16_t ResponseLength)
{

	uint16_t i = 12;
	char buffer[5];
	while(Response[i] != '\r')
    24c2:	2a 85       	ldd	r18, Y+10	; 0x0a
    24c4:	3b 85       	ldd	r19, Y+11	; 0x0b
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03
    24c8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ca:	f9 01       	movw	r30, r18
    24cc:	e8 0f       	add	r30, r24
    24ce:	f9 1f       	adc	r31, r25
    24d0:	80 81       	ld	r24, Z
    24d2:	8d 30       	cpi	r24, 0x0D	; 13
    24d4:	89 f7       	brne	.-30     	; 0x24b8 <GetResponseBody+0x26>
	++i;

	strncpy(buffer, Response + 12, (i - 12));
    24d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    24d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    24da:	ac 01       	movw	r20, r24
    24dc:	44 5f       	subi	r20, 0xF4	; 244
    24de:	5f 4f       	sbci	r21, 0xFF	; 255
    24e0:	8b 81       	ldd	r24, Y+3	; 0x03
    24e2:	9c 81       	ldd	r25, Y+4	; 0x04
    24e4:	9c 01       	movw	r18, r24
    24e6:	2c 50       	subi	r18, 0x0C	; 12
    24e8:	30 40       	sbci	r19, 0x00	; 0
    24ea:	ce 01       	movw	r24, r28
    24ec:	05 96       	adiw	r24, 0x05	; 5
    24ee:	ba 01       	movw	r22, r20
    24f0:	a9 01       	movw	r20, r18
    24f2:	0e 94 6e 18 	call	0x30dc	; 0x30dc <strncpy>
	ResponseLength = atoi(buffer);
    24f6:	ce 01       	movw	r24, r28
    24f8:	05 96       	adiw	r24, 0x05	; 5
    24fa:	0e 94 17 18 	call	0x302e	; 0x302e <atoi>
    24fe:	9d 87       	std	Y+13, r25	; 0x0d
    2500:	8c 87       	std	Y+12, r24	; 0x0c

	i += 2;
    2502:	8b 81       	ldd	r24, Y+3	; 0x03
    2504:	9c 81       	ldd	r25, Y+4	; 0x04
    2506:	02 96       	adiw	r24, 0x02	; 2
    2508:	9c 83       	std	Y+4, r25	; 0x04
    250a:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t tmp = strlen(Response) - i;
    250c:	8a 85       	ldd	r24, Y+10	; 0x0a
    250e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2510:	0e 94 57 18 	call	0x30ae	; 0x30ae <strlen>
    2514:	9c 01       	movw	r18, r24
    2516:	8b 81       	ldd	r24, Y+3	; 0x03
    2518:	9c 81       	ldd	r25, Y+4	; 0x04
    251a:	a9 01       	movw	r20, r18
    251c:	48 1b       	sub	r20, r24
    251e:	59 0b       	sbc	r21, r25
    2520:	ca 01       	movw	r24, r20
    2522:	9a 83       	std	Y+2, r25	; 0x02
    2524:	89 83       	std	Y+1, r24	; 0x01
	memcpy(Response, Response + i, tmp);
    2526:	2a 85       	ldd	r18, Y+10	; 0x0a
    2528:	3b 85       	ldd	r19, Y+11	; 0x0b
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	9c 81       	ldd	r25, Y+4	; 0x04
    252e:	a9 01       	movw	r20, r18
    2530:	48 0f       	add	r20, r24
    2532:	59 1f       	adc	r21, r25
    2534:	8a 85       	ldd	r24, Y+10	; 0x0a
    2536:	9b 85       	ldd	r25, Y+11	; 0x0b
    2538:	29 81       	ldd	r18, Y+1	; 0x01
    253a:	3a 81       	ldd	r19, Y+2	; 0x02
    253c:	ba 01       	movw	r22, r20
    253e:	a9 01       	movw	r20, r18
    2540:	0e 94 35 18 	call	0x306a	; 0x306a <memcpy>

	if(!strncmp(Response + tmp - 6, "\r\nOK\r\n", 6))
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	9a 81       	ldd	r25, Y+2	; 0x02
    2548:	9c 01       	movw	r18, r24
    254a:	26 50       	subi	r18, 0x06	; 6
    254c:	30 40       	sbci	r19, 0x00	; 0
    254e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2550:	9b 85       	ldd	r25, Y+11	; 0x0b
    2552:	82 0f       	add	r24, r18
    2554:	93 1f       	adc	r25, r19
    2556:	2e e6       	ldi	r18, 0x6E	; 110
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	b9 01       	movw	r22, r18
    255c:	46 e0       	ldi	r20, 0x06	; 6
    255e:	50 e0       	ldi	r21, 0x00	; 0
    2560:	0e 94 60 18 	call	0x30c0	; 0x30c0 <strncmp>
    2564:	00 97       	sbiw	r24, 0x00	; 0
    2566:	99 f4       	brne	.+38     	; 0x258e <GetResponseBody+0xfc>
	memset(Response + tmp - 6, 0, i + 6);
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	9a 81       	ldd	r25, Y+2	; 0x02
    256c:	9c 01       	movw	r18, r24
    256e:	26 50       	subi	r18, 0x06	; 6
    2570:	30 40       	sbci	r19, 0x00	; 0
    2572:	8a 85       	ldd	r24, Y+10	; 0x0a
    2574:	9b 85       	ldd	r25, Y+11	; 0x0b
    2576:	28 0f       	add	r18, r24
    2578:	39 1f       	adc	r19, r25
    257a:	8b 81       	ldd	r24, Y+3	; 0x03
    257c:	9c 81       	ldd	r25, Y+4	; 0x04
    257e:	ac 01       	movw	r20, r24
    2580:	4a 5f       	subi	r20, 0xFA	; 250
    2582:	5f 4f       	sbci	r21, 0xFF	; 255
    2584:	c9 01       	movw	r24, r18
    2586:	60 e0       	ldi	r22, 0x00	; 0
    2588:	70 e0       	ldi	r23, 0x00	; 0
    258a:	0e 94 50 18 	call	0x30a0	; 0x30a0 <memset>
}
    258e:	2d 96       	adiw	r28, 0x0d	; 13
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	de bf       	out	0x3e, r29	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	cd bf       	out	0x3d, r28	; 61
    259a:	cf 91       	pop	r28
    259c:	df 91       	pop	r29
    259e:	08 95       	ret

000025a0 <WaitForExpectedResponse>:

bool WaitForExpectedResponse(char* ExpectedResponse)
{
    25a0:	df 93       	push	r29
    25a2:	cf 93       	push	r28
    25a4:	00 d0       	rcall	.+0      	; 0x25a6 <WaitForExpectedResponse+0x6>
    25a6:	0f 92       	push	r0
    25a8:	cd b7       	in	r28, 0x3d	; 61
    25aa:	de b7       	in	r29, 0x3e	; 62
    25ac:	9a 83       	std	Y+2, r25	; 0x02
    25ae:	89 83       	std	Y+1, r24	; 0x01
	Start_Read_Response(ExpectedResponse);	/* First read response */
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	9a 81       	ldd	r25, Y+2	; 0x02
    25b4:	0e 94 32 12 	call	0x2464	; 0x2464 <Start_Read_Response>
	if((Response_Status != ESP8266_RESPONSE_TIMEOUT))
    25b8:	80 91 5c 02 	lds	r24, 0x025C
    25bc:	82 30       	cpi	r24, 0x02	; 2
    25be:	19 f0       	breq	.+6      	; 0x25c6 <WaitForExpectedResponse+0x26>
	return true;							/* Return true for success */
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	8b 83       	std	Y+3, r24	; 0x03
    25c4:	01 c0       	rjmp	.+2      	; 0x25c8 <WaitForExpectedResponse+0x28>
	return false;							/* Else return false */
    25c6:	1b 82       	std	Y+3, r1	; 0x03
    25c8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	08 95       	ret

000025d6 <SendATandExpectResponse>:

bool SendATandExpectResponse(char* ATCommand, char* ExpectedResponse)
{
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	00 d0       	rcall	.+0      	; 0x25dc <SendATandExpectResponse+0x6>
    25dc:	00 d0       	rcall	.+0      	; 0x25de <SendATandExpectResponse+0x8>
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
    25e2:	9a 83       	std	Y+2, r25	; 0x02
    25e4:	89 83       	std	Y+1, r24	; 0x01
    25e6:	7c 83       	std	Y+4, r23	; 0x04
    25e8:	6b 83       	std	Y+3, r22	; 0x03
	ESP8266_Clear();
    25ea:	0e 94 1b 12 	call	0x2436	; 0x2436 <ESP8266_Clear>
	USART_u8SendString(ATCommand);			/* Send AT command to ESP8266 */
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	9a 81       	ldd	r25, Y+2	; 0x02
    25f2:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <USART_u8SendString>
	USART_u8SendString("\r\n");
    25f6:	85 e7       	ldi	r24, 0x75	; 117
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <USART_u8SendString>
	return WaitForExpectedResponse(ExpectedResponse);
    25fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2600:	9c 81       	ldd	r25, Y+4	; 0x04
    2602:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <WaitForExpectedResponse>
}
    2606:	0f 90       	pop	r0
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	0f 90       	pop	r0
    260e:	cf 91       	pop	r28
    2610:	df 91       	pop	r29
    2612:	08 95       	ret

00002614 <ESP8266_ApplicationMode>:

bool ESP8266_ApplicationMode(uint8_t Mode)
{
    2614:	df 93       	push	r29
    2616:	cf 93       	push	r28
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
    261c:	65 97       	sbiw	r28, 0x15	; 21
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	f8 94       	cli
    2622:	de bf       	out	0x3e, r29	; 62
    2624:	0f be       	out	0x3f, r0	; 63
    2626:	cd bf       	out	0x3d, r28	; 61
    2628:	8d 8b       	std	Y+21, r24	; 0x15
	char _atCommand[20];
	memset(_atCommand, 0, 20);
    262a:	ce 01       	movw	r24, r28
    262c:	01 96       	adiw	r24, 0x01	; 1
    262e:	60 e0       	ldi	r22, 0x00	; 0
    2630:	70 e0       	ldi	r23, 0x00	; 0
    2632:	44 e1       	ldi	r20, 0x14	; 20
    2634:	50 e0       	ldi	r21, 0x00	; 0
    2636:	0e 94 50 18 	call	0x30a0	; 0x30a0 <memset>
	sprintf(_atCommand, "AT+CIPMODE=%d", Mode);
    263a:	8d 89       	ldd	r24, Y+21	; 0x15
    263c:	28 2f       	mov	r18, r24
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	00 d0       	rcall	.+0      	; 0x2642 <ESP8266_ApplicationMode+0x2e>
    2642:	00 d0       	rcall	.+0      	; 0x2644 <ESP8266_ApplicationMode+0x30>
    2644:	00 d0       	rcall	.+0      	; 0x2646 <ESP8266_ApplicationMode+0x32>
    2646:	ed b7       	in	r30, 0x3d	; 61
    2648:	fe b7       	in	r31, 0x3e	; 62
    264a:	31 96       	adiw	r30, 0x01	; 1
    264c:	ce 01       	movw	r24, r28
    264e:	01 96       	adiw	r24, 0x01	; 1
    2650:	91 83       	std	Z+1, r25	; 0x01
    2652:	80 83       	st	Z, r24
    2654:	88 e7       	ldi	r24, 0x78	; 120
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	93 83       	std	Z+3, r25	; 0x03
    265a:	82 83       	std	Z+2, r24	; 0x02
    265c:	35 83       	std	Z+5, r19	; 0x05
    265e:	24 83       	std	Z+4, r18	; 0x04
    2660:	0e 94 9f 18 	call	0x313e	; 0x313e <sprintf>
    2664:	8d b7       	in	r24, 0x3d	; 61
    2666:	9e b7       	in	r25, 0x3e	; 62
    2668:	06 96       	adiw	r24, 0x06	; 6
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	f8 94       	cli
    266e:	9e bf       	out	0x3e, r25	; 62
    2670:	0f be       	out	0x3f, r0	; 63
    2672:	8d bf       	out	0x3d, r24	; 61
	_atCommand[19] = 0;
    2674:	1c 8a       	std	Y+20, r1	; 0x14
	return SendATandExpectResponse(_atCommand, "\r\nOK\r\n");
    2676:	2e e6       	ldi	r18, 0x6E	; 110
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	ce 01       	movw	r24, r28
    267c:	01 96       	adiw	r24, 0x01	; 1
    267e:	b9 01       	movw	r22, r18
    2680:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SendATandExpectResponse>
}
    2684:	65 96       	adiw	r28, 0x15	; 21
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	f8 94       	cli
    268a:	de bf       	out	0x3e, r29	; 62
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	cd bf       	out	0x3d, r28	; 61
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	08 95       	ret

00002696 <ESP8266_ConnectionMode>:

bool ESP8266_ConnectionMode(uint8_t Mode)
{
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
    269e:	65 97       	sbiw	r28, 0x15	; 21
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	8d 8b       	std	Y+21, r24	; 0x15
	char _atCommand[20];
	memset(_atCommand, 0, 20);
    26ac:	ce 01       	movw	r24, r28
    26ae:	01 96       	adiw	r24, 0x01	; 1
    26b0:	60 e0       	ldi	r22, 0x00	; 0
    26b2:	70 e0       	ldi	r23, 0x00	; 0
    26b4:	44 e1       	ldi	r20, 0x14	; 20
    26b6:	50 e0       	ldi	r21, 0x00	; 0
    26b8:	0e 94 50 18 	call	0x30a0	; 0x30a0 <memset>
	sprintf(_atCommand, "AT+CIPMUX=%d", Mode);
    26bc:	8d 89       	ldd	r24, Y+21	; 0x15
    26be:	28 2f       	mov	r18, r24
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	00 d0       	rcall	.+0      	; 0x26c4 <ESP8266_ConnectionMode+0x2e>
    26c4:	00 d0       	rcall	.+0      	; 0x26c6 <ESP8266_ConnectionMode+0x30>
    26c6:	00 d0       	rcall	.+0      	; 0x26c8 <ESP8266_ConnectionMode+0x32>
    26c8:	ed b7       	in	r30, 0x3d	; 61
    26ca:	fe b7       	in	r31, 0x3e	; 62
    26cc:	31 96       	adiw	r30, 0x01	; 1
    26ce:	ce 01       	movw	r24, r28
    26d0:	01 96       	adiw	r24, 0x01	; 1
    26d2:	91 83       	std	Z+1, r25	; 0x01
    26d4:	80 83       	st	Z, r24
    26d6:	86 e8       	ldi	r24, 0x86	; 134
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	93 83       	std	Z+3, r25	; 0x03
    26dc:	82 83       	std	Z+2, r24	; 0x02
    26de:	35 83       	std	Z+5, r19	; 0x05
    26e0:	24 83       	std	Z+4, r18	; 0x04
    26e2:	0e 94 9f 18 	call	0x313e	; 0x313e <sprintf>
    26e6:	8d b7       	in	r24, 0x3d	; 61
    26e8:	9e b7       	in	r25, 0x3e	; 62
    26ea:	06 96       	adiw	r24, 0x06	; 6
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	f8 94       	cli
    26f0:	9e bf       	out	0x3e, r25	; 62
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	8d bf       	out	0x3d, r24	; 61
	_atCommand[19] = 0;
    26f6:	1c 8a       	std	Y+20, r1	; 0x14
	return SendATandExpectResponse(_atCommand, "\r\nOK\r\n");
    26f8:	2e e6       	ldi	r18, 0x6E	; 110
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	ce 01       	movw	r24, r28
    26fe:	01 96       	adiw	r24, 0x01	; 1
    2700:	b9 01       	movw	r22, r18
    2702:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SendATandExpectResponse>
}
    2706:	65 96       	adiw	r28, 0x15	; 21
    2708:	0f b6       	in	r0, 0x3f	; 63
    270a:	f8 94       	cli
    270c:	de bf       	out	0x3e, r29	; 62
    270e:	0f be       	out	0x3f, r0	; 63
    2710:	cd bf       	out	0x3d, r28	; 61
    2712:	cf 91       	pop	r28
    2714:	df 91       	pop	r29
    2716:	08 95       	ret

00002718 <ESP8266_Begin>:

bool ESP8266_Begin()
{
    2718:	df 93       	push	r29
    271a:	cf 93       	push	r28
    271c:	00 d0       	rcall	.+0      	; 0x271e <ESP8266_Begin+0x6>
    271e:	cd b7       	in	r28, 0x3d	; 61
    2720:	de b7       	in	r29, 0x3e	; 62
	for (uint8_t i=0;i<5;i++)
    2722:	19 82       	std	Y+1, r1	; 0x01
    2724:	18 c0       	rjmp	.+48     	; 0x2756 <ESP8266_Begin+0x3e>
	{
		if(SendATandExpectResponse("ATE0","\r\nOK\r\n")||SendATandExpectResponse("AT","\r\nOK\r\n"))
    2726:	83 e9       	ldi	r24, 0x93	; 147
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	2e e6       	ldi	r18, 0x6E	; 110
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	b9 01       	movw	r22, r18
    2730:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SendATandExpectResponse>
    2734:	88 23       	and	r24, r24
    2736:	49 f4       	brne	.+18     	; 0x274a <ESP8266_Begin+0x32>
    2738:	88 e9       	ldi	r24, 0x98	; 152
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	2e e6       	ldi	r18, 0x6E	; 110
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	b9 01       	movw	r22, r18
    2742:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SendATandExpectResponse>
    2746:	88 23       	and	r24, r24
    2748:	19 f0       	breq	.+6      	; 0x2750 <ESP8266_Begin+0x38>
		return true;
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	8a 83       	std	Y+2, r24	; 0x02
    274e:	07 c0       	rjmp	.+14     	; 0x275e <ESP8266_Begin+0x46>
	return SendATandExpectResponse(_atCommand, "\r\nOK\r\n");
}

bool ESP8266_Begin()
{
	for (uint8_t i=0;i<5;i++)
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	8f 5f       	subi	r24, 0xFF	; 255
    2754:	89 83       	std	Y+1, r24	; 0x01
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	85 30       	cpi	r24, 0x05	; 5
    275a:	28 f3       	brcs	.-54     	; 0x2726 <ESP8266_Begin+0xe>
	{
		if(SendATandExpectResponse("ATE0","\r\nOK\r\n")||SendATandExpectResponse("AT","\r\nOK\r\n"))
		return true;
	}
	return false;
    275c:	1a 82       	std	Y+2, r1	; 0x02
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2760:	0f 90       	pop	r0
    2762:	0f 90       	pop	r0
    2764:	cf 91       	pop	r28
    2766:	df 91       	pop	r29
    2768:	08 95       	ret

0000276a <ESP8266_Close>:

bool ESP8266_Close()
{
    276a:	df 93       	push	r29
    276c:	cf 93       	push	r28
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
	return SendATandExpectResponse("AT+CIPCLOSE=1", "\r\nOK\r\n");
    2772:	8b e9       	ldi	r24, 0x9B	; 155
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	2e e6       	ldi	r18, 0x6E	; 110
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	b9 01       	movw	r22, r18
    277c:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SendATandExpectResponse>
}
    2780:	cf 91       	pop	r28
    2782:	df 91       	pop	r29
    2784:	08 95       	ret

00002786 <ESP8266_WIFIMode>:

bool ESP8266_WIFIMode(uint8_t _mode)
{
    2786:	df 93       	push	r29
    2788:	cf 93       	push	r28
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
    278e:	65 97       	sbiw	r28, 0x15	; 21
    2790:	0f b6       	in	r0, 0x3f	; 63
    2792:	f8 94       	cli
    2794:	de bf       	out	0x3e, r29	; 62
    2796:	0f be       	out	0x3f, r0	; 63
    2798:	cd bf       	out	0x3d, r28	; 61
    279a:	8d 8b       	std	Y+21, r24	; 0x15
	char _atCommand[20];
	memset(_atCommand, 0, 20);
    279c:	ce 01       	movw	r24, r28
    279e:	01 96       	adiw	r24, 0x01	; 1
    27a0:	60 e0       	ldi	r22, 0x00	; 0
    27a2:	70 e0       	ldi	r23, 0x00	; 0
    27a4:	44 e1       	ldi	r20, 0x14	; 20
    27a6:	50 e0       	ldi	r21, 0x00	; 0
    27a8:	0e 94 50 18 	call	0x30a0	; 0x30a0 <memset>
	sprintf(_atCommand, "AT+CWMODE=%d", _mode);
    27ac:	8d 89       	ldd	r24, Y+21	; 0x15
    27ae:	28 2f       	mov	r18, r24
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	00 d0       	rcall	.+0      	; 0x27b4 <ESP8266_WIFIMode+0x2e>
    27b4:	00 d0       	rcall	.+0      	; 0x27b6 <ESP8266_WIFIMode+0x30>
    27b6:	00 d0       	rcall	.+0      	; 0x27b8 <ESP8266_WIFIMode+0x32>
    27b8:	ed b7       	in	r30, 0x3d	; 61
    27ba:	fe b7       	in	r31, 0x3e	; 62
    27bc:	31 96       	adiw	r30, 0x01	; 1
    27be:	ce 01       	movw	r24, r28
    27c0:	01 96       	adiw	r24, 0x01	; 1
    27c2:	91 83       	std	Z+1, r25	; 0x01
    27c4:	80 83       	st	Z, r24
    27c6:	89 ea       	ldi	r24, 0xA9	; 169
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	93 83       	std	Z+3, r25	; 0x03
    27cc:	82 83       	std	Z+2, r24	; 0x02
    27ce:	35 83       	std	Z+5, r19	; 0x05
    27d0:	24 83       	std	Z+4, r18	; 0x04
    27d2:	0e 94 9f 18 	call	0x313e	; 0x313e <sprintf>
    27d6:	8d b7       	in	r24, 0x3d	; 61
    27d8:	9e b7       	in	r25, 0x3e	; 62
    27da:	06 96       	adiw	r24, 0x06	; 6
    27dc:	0f b6       	in	r0, 0x3f	; 63
    27de:	f8 94       	cli
    27e0:	9e bf       	out	0x3e, r25	; 62
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	8d bf       	out	0x3d, r24	; 61
	_atCommand[19] = 0;
    27e6:	1c 8a       	std	Y+20, r1	; 0x14
	return SendATandExpectResponse(_atCommand, "\r\nOK\r\n");
    27e8:	2e e6       	ldi	r18, 0x6E	; 110
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	ce 01       	movw	r24, r28
    27ee:	01 96       	adiw	r24, 0x01	; 1
    27f0:	b9 01       	movw	r22, r18
    27f2:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SendATandExpectResponse>
}
    27f6:	65 96       	adiw	r28, 0x15	; 21
    27f8:	0f b6       	in	r0, 0x3f	; 63
    27fa:	f8 94       	cli
    27fc:	de bf       	out	0x3e, r29	; 62
    27fe:	0f be       	out	0x3f, r0	; 63
    2800:	cd bf       	out	0x3d, r28	; 61
    2802:	cf 91       	pop	r28
    2804:	df 91       	pop	r29
    2806:	08 95       	ret

00002808 <ESP8266_JoinAccessPoint>:

uint8_t ESP8266_JoinAccessPoint(char* _SSID, char* _PASSWORD)
{
    2808:	df 93       	push	r29
    280a:	cf 93       	push	r28
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
    2810:	c1 54       	subi	r28, 0x41	; 65
    2812:	d0 40       	sbci	r29, 0x00	; 0
    2814:	0f b6       	in	r0, 0x3f	; 63
    2816:	f8 94       	cli
    2818:	de bf       	out	0x3e, r29	; 62
    281a:	0f be       	out	0x3f, r0	; 63
    281c:	cd bf       	out	0x3d, r28	; 61
    281e:	9e af       	std	Y+62, r25	; 0x3e
    2820:	8d af       	std	Y+61, r24	; 0x3d
    2822:	fe 01       	movw	r30, r28
    2824:	ff 96       	adiw	r30, 0x3f	; 63
    2826:	71 83       	std	Z+1, r23	; 0x01
    2828:	60 83       	st	Z, r22
	char _atCommand[60];
	memset(_atCommand, 0, 60);
    282a:	ce 01       	movw	r24, r28
    282c:	01 96       	adiw	r24, 0x01	; 1
    282e:	60 e0       	ldi	r22, 0x00	; 0
    2830:	70 e0       	ldi	r23, 0x00	; 0
    2832:	4c e3       	ldi	r20, 0x3C	; 60
    2834:	50 e0       	ldi	r21, 0x00	; 0
    2836:	0e 94 50 18 	call	0x30a0	; 0x30a0 <memset>
	sprintf(_atCommand, "AT+CWJAP=\"%s\",\"%s\"", _SSID, _PASSWORD);
    283a:	8d b7       	in	r24, 0x3d	; 61
    283c:	9e b7       	in	r25, 0x3e	; 62
    283e:	08 97       	sbiw	r24, 0x08	; 8
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	9e bf       	out	0x3e, r25	; 62
    2846:	0f be       	out	0x3f, r0	; 63
    2848:	8d bf       	out	0x3d, r24	; 61
    284a:	ad b7       	in	r26, 0x3d	; 61
    284c:	be b7       	in	r27, 0x3e	; 62
    284e:	11 96       	adiw	r26, 0x01	; 1
    2850:	ce 01       	movw	r24, r28
    2852:	01 96       	adiw	r24, 0x01	; 1
    2854:	11 96       	adiw	r26, 0x01	; 1
    2856:	9c 93       	st	X, r25
    2858:	8e 93       	st	-X, r24
    285a:	86 eb       	ldi	r24, 0xB6	; 182
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	13 96       	adiw	r26, 0x03	; 3
    2860:	9c 93       	st	X, r25
    2862:	8e 93       	st	-X, r24
    2864:	12 97       	sbiw	r26, 0x02	; 2
    2866:	8d ad       	ldd	r24, Y+61	; 0x3d
    2868:	9e ad       	ldd	r25, Y+62	; 0x3e
    286a:	15 96       	adiw	r26, 0x05	; 5
    286c:	9c 93       	st	X, r25
    286e:	8e 93       	st	-X, r24
    2870:	14 97       	sbiw	r26, 0x04	; 4
    2872:	fe 01       	movw	r30, r28
    2874:	ff 96       	adiw	r30, 0x3f	; 63
    2876:	80 81       	ld	r24, Z
    2878:	91 81       	ldd	r25, Z+1	; 0x01
    287a:	17 96       	adiw	r26, 0x07	; 7
    287c:	9c 93       	st	X, r25
    287e:	8e 93       	st	-X, r24
    2880:	16 97       	sbiw	r26, 0x06	; 6
    2882:	0e 94 9f 18 	call	0x313e	; 0x313e <sprintf>
    2886:	8d b7       	in	r24, 0x3d	; 61
    2888:	9e b7       	in	r25, 0x3e	; 62
    288a:	08 96       	adiw	r24, 0x08	; 8
    288c:	0f b6       	in	r0, 0x3f	; 63
    288e:	f8 94       	cli
    2890:	9e bf       	out	0x3e, r25	; 62
    2892:	0f be       	out	0x3f, r0	; 63
    2894:	8d bf       	out	0x3d, r24	; 61
	_atCommand[59] = 0;
    2896:	1c ae       	std	Y+60, r1	; 0x3c
	if(SendATandExpectResponse(_atCommand, "\r\nWIFI CONNECTED\r\n"))
    2898:	29 ec       	ldi	r18, 0xC9	; 201
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	ce 01       	movw	r24, r28
    289e:	01 96       	adiw	r24, 0x01	; 1
    28a0:	b9 01       	movw	r22, r18
    28a2:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SendATandExpectResponse>
    28a6:	88 23       	and	r24, r24
    28a8:	21 f0       	breq	.+8      	; 0x28b2 <ESP8266_JoinAccessPoint+0xaa>
	return ESP8266_WIFI_CONNECTED;
    28aa:	22 96       	adiw	r28, 0x02	; 2
    28ac:	1f ae       	std	Y+63, r1	; 0x3f
    28ae:	22 97       	sbiw	r28, 0x02	; 2
    28b0:	3c c0       	rjmp	.+120    	; 0x292a <ESP8266_JoinAccessPoint+0x122>
	else{
		if(strstr(RESPONSE_BUFFER, "+CWJAP:1"))
    28b2:	8c eb       	ldi	r24, 0xBC	; 188
    28b4:	91 e0       	ldi	r25, 0x01	; 1
    28b6:	2c ed       	ldi	r18, 0xDC	; 220
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	b9 01       	movw	r22, r18
    28bc:	0e 94 7d 18 	call	0x30fa	; 0x30fa <strstr>
    28c0:	00 97       	sbiw	r24, 0x00	; 0
    28c2:	29 f0       	breq	.+10     	; 0x28ce <ESP8266_JoinAccessPoint+0xc6>
		return ESP8266_CONNECTION_TIMEOUT;
    28c4:	91 e0       	ldi	r25, 0x01	; 1
    28c6:	22 96       	adiw	r28, 0x02	; 2
    28c8:	9f af       	std	Y+63, r25	; 0x3f
    28ca:	22 97       	sbiw	r28, 0x02	; 2
    28cc:	2e c0       	rjmp	.+92     	; 0x292a <ESP8266_JoinAccessPoint+0x122>
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:2"))
    28ce:	8c eb       	ldi	r24, 0xBC	; 188
    28d0:	91 e0       	ldi	r25, 0x01	; 1
    28d2:	25 ee       	ldi	r18, 0xE5	; 229
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	b9 01       	movw	r22, r18
    28d8:	0e 94 7d 18 	call	0x30fa	; 0x30fa <strstr>
    28dc:	00 97       	sbiw	r24, 0x00	; 0
    28de:	29 f0       	breq	.+10     	; 0x28ea <ESP8266_JoinAccessPoint+0xe2>
		return ESP8266_WRONG_PASSWORD;
    28e0:	82 e0       	ldi	r24, 0x02	; 2
    28e2:	22 96       	adiw	r28, 0x02	; 2
    28e4:	8f af       	std	Y+63, r24	; 0x3f
    28e6:	22 97       	sbiw	r28, 0x02	; 2
    28e8:	20 c0       	rjmp	.+64     	; 0x292a <ESP8266_JoinAccessPoint+0x122>
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:3"))
    28ea:	8c eb       	ldi	r24, 0xBC	; 188
    28ec:	91 e0       	ldi	r25, 0x01	; 1
    28ee:	2e ee       	ldi	r18, 0xEE	; 238
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	b9 01       	movw	r22, r18
    28f4:	0e 94 7d 18 	call	0x30fa	; 0x30fa <strstr>
    28f8:	00 97       	sbiw	r24, 0x00	; 0
    28fa:	29 f0       	breq	.+10     	; 0x2906 <ESP8266_JoinAccessPoint+0xfe>
		return ESP8266_NOT_FOUND_TARGET_AP;
    28fc:	93 e0       	ldi	r25, 0x03	; 3
    28fe:	22 96       	adiw	r28, 0x02	; 2
    2900:	9f af       	std	Y+63, r25	; 0x3f
    2902:	22 97       	sbiw	r28, 0x02	; 2
    2904:	12 c0       	rjmp	.+36     	; 0x292a <ESP8266_JoinAccessPoint+0x122>
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:4"))
    2906:	8c eb       	ldi	r24, 0xBC	; 188
    2908:	91 e0       	ldi	r25, 0x01	; 1
    290a:	27 ef       	ldi	r18, 0xF7	; 247
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	b9 01       	movw	r22, r18
    2910:	0e 94 7d 18 	call	0x30fa	; 0x30fa <strstr>
    2914:	00 97       	sbiw	r24, 0x00	; 0
    2916:	29 f0       	breq	.+10     	; 0x2922 <ESP8266_JoinAccessPoint+0x11a>
		return ESP8266_CONNECTION_FAILED;
    2918:	84 e0       	ldi	r24, 0x04	; 4
    291a:	22 96       	adiw	r28, 0x02	; 2
    291c:	8f af       	std	Y+63, r24	; 0x3f
    291e:	22 97       	sbiw	r28, 0x02	; 2
    2920:	04 c0       	rjmp	.+8      	; 0x292a <ESP8266_JoinAccessPoint+0x122>
		else
		return ESP8266_JOIN_UNKNOWN_ERROR;
    2922:	95 e0       	ldi	r25, 0x05	; 5
    2924:	22 96       	adiw	r28, 0x02	; 2
    2926:	9f af       	std	Y+63, r25	; 0x3f
    2928:	22 97       	sbiw	r28, 0x02	; 2
    292a:	22 96       	adiw	r28, 0x02	; 2
    292c:	8f ad       	ldd	r24, Y+63	; 0x3f
    292e:	22 97       	sbiw	r28, 0x02	; 2
	}
}
    2930:	cf 5b       	subi	r28, 0xBF	; 191
    2932:	df 4f       	sbci	r29, 0xFF	; 255
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	f8 94       	cli
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	cd bf       	out	0x3d, r28	; 61
    293e:	cf 91       	pop	r28
    2940:	df 91       	pop	r29
    2942:	08 95       	ret

00002944 <ESP8266_connected>:

uint8_t ESP8266_connected()
{
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	0f 92       	push	r0
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
	SendATandExpectResponse("AT+CIPSTATUS", "\r\nOK\r\n");
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	91 e0       	ldi	r25, 0x01	; 1
    2952:	2e e6       	ldi	r18, 0x6E	; 110
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	b9 01       	movw	r22, r18
    2958:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SendATandExpectResponse>
	if(strstr(RESPONSE_BUFFER, "STATUS:2"))
    295c:	8c eb       	ldi	r24, 0xBC	; 188
    295e:	91 e0       	ldi	r25, 0x01	; 1
    2960:	2d e0       	ldi	r18, 0x0D	; 13
    2962:	31 e0       	ldi	r19, 0x01	; 1
    2964:	b9 01       	movw	r22, r18
    2966:	0e 94 7d 18 	call	0x30fa	; 0x30fa <strstr>
    296a:	00 97       	sbiw	r24, 0x00	; 0
    296c:	11 f0       	breq	.+4      	; 0x2972 <ESP8266_connected+0x2e>
	return ESP8266_CONNECTED_TO_AP;
    296e:	19 82       	std	Y+1, r1	; 0x01
    2970:	26 c0       	rjmp	.+76     	; 0x29be <ESP8266_connected+0x7a>
	else if(strstr(RESPONSE_BUFFER, "STATUS:3"))
    2972:	8c eb       	ldi	r24, 0xBC	; 188
    2974:	91 e0       	ldi	r25, 0x01	; 1
    2976:	26 e1       	ldi	r18, 0x16	; 22
    2978:	31 e0       	ldi	r19, 0x01	; 1
    297a:	b9 01       	movw	r22, r18
    297c:	0e 94 7d 18 	call	0x30fa	; 0x30fa <strstr>
    2980:	00 97       	sbiw	r24, 0x00	; 0
    2982:	19 f0       	breq	.+6      	; 0x298a <ESP8266_connected+0x46>
	return ESP8266_CREATED_TRANSMISSION;
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	89 83       	std	Y+1, r24	; 0x01
    2988:	1a c0       	rjmp	.+52     	; 0x29be <ESP8266_connected+0x7a>
	else if(strstr(RESPONSE_BUFFER, "STATUS:4"))
    298a:	8c eb       	ldi	r24, 0xBC	; 188
    298c:	91 e0       	ldi	r25, 0x01	; 1
    298e:	2f e1       	ldi	r18, 0x1F	; 31
    2990:	31 e0       	ldi	r19, 0x01	; 1
    2992:	b9 01       	movw	r22, r18
    2994:	0e 94 7d 18 	call	0x30fa	; 0x30fa <strstr>
    2998:	00 97       	sbiw	r24, 0x00	; 0
    299a:	19 f0       	breq	.+6      	; 0x29a2 <ESP8266_connected+0x5e>
	return ESP8266_TRANSMISSION_DISCONNECTED;
    299c:	82 e0       	ldi	r24, 0x02	; 2
    299e:	89 83       	std	Y+1, r24	; 0x01
    29a0:	0e c0       	rjmp	.+28     	; 0x29be <ESP8266_connected+0x7a>
	else if(strstr(RESPONSE_BUFFER, "STATUS:5"))
    29a2:	8c eb       	ldi	r24, 0xBC	; 188
    29a4:	91 e0       	ldi	r25, 0x01	; 1
    29a6:	28 e2       	ldi	r18, 0x28	; 40
    29a8:	31 e0       	ldi	r19, 0x01	; 1
    29aa:	b9 01       	movw	r22, r18
    29ac:	0e 94 7d 18 	call	0x30fa	; 0x30fa <strstr>
    29b0:	00 97       	sbiw	r24, 0x00	; 0
    29b2:	19 f0       	breq	.+6      	; 0x29ba <ESP8266_connected+0x76>
	return ESP8266_NOT_CONNECTED_TO_AP;
    29b4:	83 e0       	ldi	r24, 0x03	; 3
    29b6:	89 83       	std	Y+1, r24	; 0x01
    29b8:	02 c0       	rjmp	.+4      	; 0x29be <ESP8266_connected+0x7a>
	else
	return ESP8266_CONNECT_UNKNOWN_ERROR;
    29ba:	84 e0       	ldi	r24, 0x04	; 4
    29bc:	89 83       	std	Y+1, r24	; 0x01
    29be:	89 81       	ldd	r24, Y+1	; 0x01
}
    29c0:	0f 90       	pop	r0
    29c2:	cf 91       	pop	r28
    29c4:	df 91       	pop	r29
    29c6:	08 95       	ret

000029c8 <ESP8266_Start>:

uint8_t ESP8266_Start(uint8_t _ConnectionNumber, char* Domain, char* Port)
{
    29c8:	df 93       	push	r29
    29ca:	cf 93       	push	r28
    29cc:	cd b7       	in	r28, 0x3d	; 61
    29ce:	de b7       	in	r29, 0x3e	; 62
    29d0:	c3 54       	subi	r28, 0x43	; 67
    29d2:	d0 40       	sbci	r29, 0x00	; 0
    29d4:	0f b6       	in	r0, 0x3f	; 63
    29d6:	f8 94       	cli
    29d8:	de bf       	out	0x3e, r29	; 62
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	cd bf       	out	0x3d, r28	; 61
    29de:	8e af       	std	Y+62, r24	; 0x3e
    29e0:	fe 01       	movw	r30, r28
    29e2:	ff 96       	adiw	r30, 0x3f	; 63
    29e4:	71 83       	std	Z+1, r23	; 0x01
    29e6:	60 83       	st	Z, r22
    29e8:	fe 01       	movw	r30, r28
    29ea:	ef 5b       	subi	r30, 0xBF	; 191
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	51 83       	std	Z+1, r21	; 0x01
    29f0:	40 83       	st	Z, r20
	bool _startResponse;
	char _atCommand[60];
	memset(_atCommand, 0, 60);
    29f2:	ce 01       	movw	r24, r28
    29f4:	02 96       	adiw	r24, 0x02	; 2
    29f6:	60 e0       	ldi	r22, 0x00	; 0
    29f8:	70 e0       	ldi	r23, 0x00	; 0
    29fa:	4c e3       	ldi	r20, 0x3C	; 60
    29fc:	50 e0       	ldi	r21, 0x00	; 0
    29fe:	0e 94 50 18 	call	0x30a0	; 0x30a0 <memset>
	_atCommand[59] = 0;
    2a02:	1d ae       	std	Y+61, r1	; 0x3d

	if(SendATandExpectResponse("AT+CIPMUX?", "CIPMUX:0"))
    2a04:	81 e3       	ldi	r24, 0x31	; 49
    2a06:	91 e0       	ldi	r25, 0x01	; 1
    2a08:	2c e3       	ldi	r18, 0x3C	; 60
    2a0a:	31 e0       	ldi	r19, 0x01	; 1
    2a0c:	b9 01       	movw	r22, r18
    2a0e:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SendATandExpectResponse>
    2a12:	88 23       	and	r24, r24
    2a14:	91 f1       	breq	.+100    	; 0x2a7a <ESP8266_Start+0xb2>
		sprintf(_atCommand, "AT+CIPSTART=\"TCP\",\"%s\",%s", Domain, Port);
    2a16:	8d b7       	in	r24, 0x3d	; 61
    2a18:	9e b7       	in	r25, 0x3e	; 62
    2a1a:	08 97       	sbiw	r24, 0x08	; 8
    2a1c:	0f b6       	in	r0, 0x3f	; 63
    2a1e:	f8 94       	cli
    2a20:	9e bf       	out	0x3e, r25	; 62
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	8d bf       	out	0x3d, r24	; 61
    2a26:	ad b7       	in	r26, 0x3d	; 61
    2a28:	be b7       	in	r27, 0x3e	; 62
    2a2a:	11 96       	adiw	r26, 0x01	; 1
    2a2c:	ce 01       	movw	r24, r28
    2a2e:	02 96       	adiw	r24, 0x02	; 2
    2a30:	11 96       	adiw	r26, 0x01	; 1
    2a32:	9c 93       	st	X, r25
    2a34:	8e 93       	st	-X, r24
    2a36:	85 e4       	ldi	r24, 0x45	; 69
    2a38:	91 e0       	ldi	r25, 0x01	; 1
    2a3a:	13 96       	adiw	r26, 0x03	; 3
    2a3c:	9c 93       	st	X, r25
    2a3e:	8e 93       	st	-X, r24
    2a40:	12 97       	sbiw	r26, 0x02	; 2
    2a42:	fe 01       	movw	r30, r28
    2a44:	ff 96       	adiw	r30, 0x3f	; 63
    2a46:	80 81       	ld	r24, Z
    2a48:	91 81       	ldd	r25, Z+1	; 0x01
    2a4a:	15 96       	adiw	r26, 0x05	; 5
    2a4c:	9c 93       	st	X, r25
    2a4e:	8e 93       	st	-X, r24
    2a50:	14 97       	sbiw	r26, 0x04	; 4
    2a52:	fe 01       	movw	r30, r28
    2a54:	ef 5b       	subi	r30, 0xBF	; 191
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	80 81       	ld	r24, Z
    2a5a:	91 81       	ldd	r25, Z+1	; 0x01
    2a5c:	17 96       	adiw	r26, 0x07	; 7
    2a5e:	9c 93       	st	X, r25
    2a60:	8e 93       	st	-X, r24
    2a62:	16 97       	sbiw	r26, 0x06	; 6
    2a64:	0e 94 9f 18 	call	0x313e	; 0x313e <sprintf>
    2a68:	8d b7       	in	r24, 0x3d	; 61
    2a6a:	9e b7       	in	r25, 0x3e	; 62
    2a6c:	08 96       	adiw	r24, 0x08	; 8
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	f8 94       	cli
    2a72:	9e bf       	out	0x3e, r25	; 62
    2a74:	0f be       	out	0x3f, r0	; 63
    2a76:	8d bf       	out	0x3d, r24	; 61
    2a78:	38 c0       	rjmp	.+112    	; 0x2aea <ESP8266_Start+0x122>
	else
		sprintf(_atCommand, "AT+CIPSTART=\"%d\",\"TCP\",\"%s\",%s", _ConnectionNumber, Domain, Port);
    2a7a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a7c:	28 2f       	mov	r18, r24
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	8d b7       	in	r24, 0x3d	; 61
    2a82:	9e b7       	in	r25, 0x3e	; 62
    2a84:	0a 97       	sbiw	r24, 0x0a	; 10
    2a86:	0f b6       	in	r0, 0x3f	; 63
    2a88:	f8 94       	cli
    2a8a:	9e bf       	out	0x3e, r25	; 62
    2a8c:	0f be       	out	0x3f, r0	; 63
    2a8e:	8d bf       	out	0x3d, r24	; 61
    2a90:	ad b7       	in	r26, 0x3d	; 61
    2a92:	be b7       	in	r27, 0x3e	; 62
    2a94:	11 96       	adiw	r26, 0x01	; 1
    2a96:	ce 01       	movw	r24, r28
    2a98:	02 96       	adiw	r24, 0x02	; 2
    2a9a:	11 96       	adiw	r26, 0x01	; 1
    2a9c:	9c 93       	st	X, r25
    2a9e:	8e 93       	st	-X, r24
    2aa0:	8f e5       	ldi	r24, 0x5F	; 95
    2aa2:	91 e0       	ldi	r25, 0x01	; 1
    2aa4:	13 96       	adiw	r26, 0x03	; 3
    2aa6:	9c 93       	st	X, r25
    2aa8:	8e 93       	st	-X, r24
    2aaa:	12 97       	sbiw	r26, 0x02	; 2
    2aac:	15 96       	adiw	r26, 0x05	; 5
    2aae:	3c 93       	st	X, r19
    2ab0:	2e 93       	st	-X, r18
    2ab2:	14 97       	sbiw	r26, 0x04	; 4
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	ff 96       	adiw	r30, 0x3f	; 63
    2ab8:	80 81       	ld	r24, Z
    2aba:	91 81       	ldd	r25, Z+1	; 0x01
    2abc:	17 96       	adiw	r26, 0x07	; 7
    2abe:	9c 93       	st	X, r25
    2ac0:	8e 93       	st	-X, r24
    2ac2:	16 97       	sbiw	r26, 0x06	; 6
    2ac4:	fe 01       	movw	r30, r28
    2ac6:	ef 5b       	subi	r30, 0xBF	; 191
    2ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aca:	80 81       	ld	r24, Z
    2acc:	91 81       	ldd	r25, Z+1	; 0x01
    2ace:	19 96       	adiw	r26, 0x09	; 9
    2ad0:	9c 93       	st	X, r25
    2ad2:	8e 93       	st	-X, r24
    2ad4:	18 97       	sbiw	r26, 0x08	; 8
    2ad6:	0e 94 9f 18 	call	0x313e	; 0x313e <sprintf>
    2ada:	8d b7       	in	r24, 0x3d	; 61
    2adc:	9e b7       	in	r25, 0x3e	; 62
    2ade:	0a 96       	adiw	r24, 0x0a	; 10
    2ae0:	0f b6       	in	r0, 0x3f	; 63
    2ae2:	f8 94       	cli
    2ae4:	9e bf       	out	0x3e, r25	; 62
    2ae6:	0f be       	out	0x3f, r0	; 63
    2ae8:	8d bf       	out	0x3d, r24	; 61

	_startResponse = SendATandExpectResponse(_atCommand, "CONNECT\r\n");
    2aea:	ce 01       	movw	r24, r28
    2aec:	02 96       	adiw	r24, 0x02	; 2
    2aee:	2e e7       	ldi	r18, 0x7E	; 126
    2af0:	31 e0       	ldi	r19, 0x01	; 1
    2af2:	b9 01       	movw	r22, r18
    2af4:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SendATandExpectResponse>
    2af8:	89 83       	std	Y+1, r24	; 0x01
	if(!_startResponse)
    2afa:	99 81       	ldd	r25, Y+1	; 0x01
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	89 27       	eor	r24, r25
    2b00:	88 23       	and	r24, r24
    2b02:	71 f0       	breq	.+28     	; 0x2b20 <ESP8266_Start+0x158>
	{
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
    2b04:	80 91 5c 02 	lds	r24, 0x025C
    2b08:	82 30       	cpi	r24, 0x02	; 2
    2b0a:	29 f4       	brne	.+10     	; 0x2b16 <ESP8266_Start+0x14e>
		return ESP8266_RESPONSE_TIMEOUT;
    2b0c:	92 e0       	ldi	r25, 0x02	; 2
    2b0e:	24 96       	adiw	r28, 0x04	; 4
    2b10:	9f af       	std	Y+63, r25	; 0x3f
    2b12:	24 97       	sbiw	r28, 0x04	; 4
    2b14:	09 c0       	rjmp	.+18     	; 0x2b28 <ESP8266_Start+0x160>
		return ESP8266_RESPONSE_ERROR;
    2b16:	85 e0       	ldi	r24, 0x05	; 5
    2b18:	24 96       	adiw	r28, 0x04	; 4
    2b1a:	8f af       	std	Y+63, r24	; 0x3f
    2b1c:	24 97       	sbiw	r28, 0x04	; 4
    2b1e:	04 c0       	rjmp	.+8      	; 0x2b28 <ESP8266_Start+0x160>
	}
	return ESP8266_RESPONSE_FINISHED;
    2b20:	91 e0       	ldi	r25, 0x01	; 1
    2b22:	24 96       	adiw	r28, 0x04	; 4
    2b24:	9f af       	std	Y+63, r25	; 0x3f
    2b26:	24 97       	sbiw	r28, 0x04	; 4
    2b28:	24 96       	adiw	r28, 0x04	; 4
    2b2a:	8f ad       	ldd	r24, Y+63	; 0x3f
    2b2c:	24 97       	sbiw	r28, 0x04	; 4
}
    2b2e:	cd 5b       	subi	r28, 0xBD	; 189
    2b30:	df 4f       	sbci	r29, 0xFF	; 255
    2b32:	0f b6       	in	r0, 0x3f	; 63
    2b34:	f8 94       	cli
    2b36:	de bf       	out	0x3e, r29	; 62
    2b38:	0f be       	out	0x3f, r0	; 63
    2b3a:	cd bf       	out	0x3d, r28	; 61
    2b3c:	cf 91       	pop	r28
    2b3e:	df 91       	pop	r29
    2b40:	08 95       	ret

00002b42 <ESP8266_Send>:

uint8_t ESP8266_Send(char* Data)
{
    2b42:	df 93       	push	r29
    2b44:	cf 93       	push	r28
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
    2b4a:	67 97       	sbiw	r28, 0x17	; 23
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	de bf       	out	0x3e, r29	; 62
    2b52:	0f be       	out	0x3f, r0	; 63
    2b54:	cd bf       	out	0x3d, r28	; 61
    2b56:	9e 8b       	std	Y+22, r25	; 0x16
    2b58:	8d 8b       	std	Y+21, r24	; 0x15
	char _atCommand[20];
	memset(_atCommand, 0, 20);
    2b5a:	ce 01       	movw	r24, r28
    2b5c:	01 96       	adiw	r24, 0x01	; 1
    2b5e:	60 e0       	ldi	r22, 0x00	; 0
    2b60:	70 e0       	ldi	r23, 0x00	; 0
    2b62:	44 e1       	ldi	r20, 0x14	; 20
    2b64:	50 e0       	ldi	r21, 0x00	; 0
    2b66:	0e 94 50 18 	call	0x30a0	; 0x30a0 <memset>
	sprintf(_atCommand, "AT+CIPSEND=%d", (strlen(Data)+2));
    2b6a:	8d 89       	ldd	r24, Y+21	; 0x15
    2b6c:	9e 89       	ldd	r25, Y+22	; 0x16
    2b6e:	0e 94 57 18 	call	0x30ae	; 0x30ae <strlen>
    2b72:	9c 01       	movw	r18, r24
    2b74:	2e 5f       	subi	r18, 0xFE	; 254
    2b76:	3f 4f       	sbci	r19, 0xFF	; 255
    2b78:	00 d0       	rcall	.+0      	; 0x2b7a <ESP8266_Send+0x38>
    2b7a:	00 d0       	rcall	.+0      	; 0x2b7c <ESP8266_Send+0x3a>
    2b7c:	00 d0       	rcall	.+0      	; 0x2b7e <ESP8266_Send+0x3c>
    2b7e:	ed b7       	in	r30, 0x3d	; 61
    2b80:	fe b7       	in	r31, 0x3e	; 62
    2b82:	31 96       	adiw	r30, 0x01	; 1
    2b84:	ce 01       	movw	r24, r28
    2b86:	01 96       	adiw	r24, 0x01	; 1
    2b88:	91 83       	std	Z+1, r25	; 0x01
    2b8a:	80 83       	st	Z, r24
    2b8c:	88 e8       	ldi	r24, 0x88	; 136
    2b8e:	91 e0       	ldi	r25, 0x01	; 1
    2b90:	93 83       	std	Z+3, r25	; 0x03
    2b92:	82 83       	std	Z+2, r24	; 0x02
    2b94:	35 83       	std	Z+5, r19	; 0x05
    2b96:	24 83       	std	Z+4, r18	; 0x04
    2b98:	0e 94 9f 18 	call	0x313e	; 0x313e <sprintf>
    2b9c:	8d b7       	in	r24, 0x3d	; 61
    2b9e:	9e b7       	in	r25, 0x3e	; 62
    2ba0:	06 96       	adiw	r24, 0x06	; 6
    2ba2:	0f b6       	in	r0, 0x3f	; 63
    2ba4:	f8 94       	cli
    2ba6:	9e bf       	out	0x3e, r25	; 62
    2ba8:	0f be       	out	0x3f, r0	; 63
    2baa:	8d bf       	out	0x3d, r24	; 61
	_atCommand[19] = 0;
    2bac:	1c 8a       	std	Y+20, r1	; 0x14
	SendATandExpectResponse(_atCommand, "\r\nOK\r\n>");
    2bae:	26 e9       	ldi	r18, 0x96	; 150
    2bb0:	31 e0       	ldi	r19, 0x01	; 1
    2bb2:	ce 01       	movw	r24, r28
    2bb4:	01 96       	adiw	r24, 0x01	; 1
    2bb6:	b9 01       	movw	r22, r18
    2bb8:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SendATandExpectResponse>
	if(!SendATandExpectResponse(Data, "\r\nSEND OK\r\n"))
    2bbc:	8d 89       	ldd	r24, Y+21	; 0x15
    2bbe:	9e 89       	ldd	r25, Y+22	; 0x16
    2bc0:	2e e9       	ldi	r18, 0x9E	; 158
    2bc2:	31 e0       	ldi	r19, 0x01	; 1
    2bc4:	b9 01       	movw	r22, r18
    2bc6:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SendATandExpectResponse>
    2bca:	98 2f       	mov	r25, r24
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	89 27       	eor	r24, r25
    2bd0:	88 23       	and	r24, r24
    2bd2:	51 f0       	breq	.+20     	; 0x2be8 <ESP8266_Send+0xa6>
	{
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
    2bd4:	80 91 5c 02 	lds	r24, 0x025C
    2bd8:	82 30       	cpi	r24, 0x02	; 2
    2bda:	19 f4       	brne	.+6      	; 0x2be2 <ESP8266_Send+0xa0>
		return ESP8266_RESPONSE_TIMEOUT;
    2bdc:	92 e0       	ldi	r25, 0x02	; 2
    2bde:	9f 8b       	std	Y+23, r25	; 0x17
    2be0:	05 c0       	rjmp	.+10     	; 0x2bec <ESP8266_Send+0xaa>
		return ESP8266_RESPONSE_ERROR;
    2be2:	85 e0       	ldi	r24, 0x05	; 5
    2be4:	8f 8b       	std	Y+23, r24	; 0x17
    2be6:	02 c0       	rjmp	.+4      	; 0x2bec <ESP8266_Send+0xaa>
	}
	return ESP8266_RESPONSE_FINISHED;
    2be8:	91 e0       	ldi	r25, 0x01	; 1
    2bea:	9f 8b       	std	Y+23, r25	; 0x17
    2bec:	8f 89       	ldd	r24, Y+23	; 0x17
}
    2bee:	67 96       	adiw	r28, 0x17	; 23
    2bf0:	0f b6       	in	r0, 0x3f	; 63
    2bf2:	f8 94       	cli
    2bf4:	de bf       	out	0x3e, r29	; 62
    2bf6:	0f be       	out	0x3f, r0	; 63
    2bf8:	cd bf       	out	0x3d, r28	; 61
    2bfa:	cf 91       	pop	r28
    2bfc:	df 91       	pop	r29
    2bfe:	08 95       	ret

00002c00 <ESP8266_DataAvailable>:

int16_t ESP8266_DataAvailable()
{
    2c00:	df 93       	push	r29
    2c02:	cf 93       	push	r28
    2c04:	cd b7       	in	r28, 0x3d	; 61
    2c06:	de b7       	in	r29, 0x3e	; 62
	return (Counter - pointer);
    2c08:	20 91 b4 01 	lds	r18, 0x01B4
    2c0c:	30 91 b5 01 	lds	r19, 0x01B5
    2c10:	80 91 b6 01 	lds	r24, 0x01B6
    2c14:	90 91 b7 01 	lds	r25, 0x01B7
    2c18:	a9 01       	movw	r20, r18
    2c1a:	48 1b       	sub	r20, r24
    2c1c:	59 0b       	sbc	r21, r25
    2c1e:	ca 01       	movw	r24, r20
}
    2c20:	cf 91       	pop	r28
    2c22:	df 91       	pop	r29
    2c24:	08 95       	ret

00002c26 <ESP8266_DataRead>:

uint8_t ESP8266_DataRead()
{
    2c26:	df 93       	push	r29
    2c28:	cf 93       	push	r28
    2c2a:	0f 92       	push	r0
    2c2c:	cd b7       	in	r28, 0x3d	; 61
    2c2e:	de b7       	in	r29, 0x3e	; 62
	if(pointer < Counter)
    2c30:	20 91 b6 01 	lds	r18, 0x01B6
    2c34:	30 91 b7 01 	lds	r19, 0x01B7
    2c38:	80 91 b4 01 	lds	r24, 0x01B4
    2c3c:	90 91 b5 01 	lds	r25, 0x01B5
    2c40:	28 17       	cp	r18, r24
    2c42:	39 07       	cpc	r19, r25
    2c44:	7c f4       	brge	.+30     	; 0x2c64 <ESP8266_DataRead+0x3e>
	return RESPONSE_BUFFER[pointer++];
    2c46:	80 91 b6 01 	lds	r24, 0x01B6
    2c4a:	90 91 b7 01 	lds	r25, 0x01B7
    2c4e:	fc 01       	movw	r30, r24
    2c50:	e4 54       	subi	r30, 0x44	; 68
    2c52:	fe 4f       	sbci	r31, 0xFE	; 254
    2c54:	20 81       	ld	r18, Z
    2c56:	29 83       	std	Y+1, r18	; 0x01
    2c58:	01 96       	adiw	r24, 0x01	; 1
    2c5a:	90 93 b7 01 	sts	0x01B7, r25
    2c5e:	80 93 b6 01 	sts	0x01B6, r24
    2c62:	03 c0       	rjmp	.+6      	; 0x2c6a <ESP8266_DataRead+0x44>
	else{
		ESP8266_Clear();
    2c64:	0e 94 1b 12 	call	0x2436	; 0x2436 <ESP8266_Clear>
		return 0;
    2c68:	19 82       	std	Y+1, r1	; 0x01
    2c6a:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    2c6c:	0f 90       	pop	r0
    2c6e:	cf 91       	pop	r28
    2c70:	df 91       	pop	r29
    2c72:	08 95       	ret

00002c74 <Read_Data>:

uint16_t Read_Data(char* _buffer)
{
    2c74:	0f 93       	push	r16
    2c76:	1f 93       	push	r17
    2c78:	df 93       	push	r29
    2c7a:	cf 93       	push	r28
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
    2c80:	62 97       	sbiw	r28, 0x12	; 18
    2c82:	0f b6       	in	r0, 0x3f	; 63
    2c84:	f8 94       	cli
    2c86:	de bf       	out	0x3e, r29	; 62
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	cd bf       	out	0x3d, r28	; 61
    2c8c:	9a 8b       	std	Y+18, r25	; 0x12
    2c8e:	89 8b       	std	Y+17, r24	; 0x11
	uint16_t len = 0;
    2c90:	18 8a       	std	Y+16, r1	; 0x10
    2c92:	1f 86       	std	Y+15, r1	; 0x0f
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	a8 ec       	ldi	r26, 0xC8	; 200
    2c9a:	b2 e4       	ldi	r27, 0x42	; 66
    2c9c:	8b 87       	std	Y+11, r24	; 0x0b
    2c9e:	9c 87       	std	Y+12, r25	; 0x0c
    2ca0:	ad 87       	std	Y+13, r26	; 0x0d
    2ca2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2caa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	4a ef       	ldi	r20, 0xFA	; 250
    2cb2:	54 e4       	ldi	r21, 0x44	; 68
    2cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	8f 83       	std	Y+7, r24	; 0x07
    2cbe:	98 87       	std	Y+8, r25	; 0x08
    2cc0:	a9 87       	std	Y+9, r26	; 0x09
    2cc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cc4:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc6:	78 85       	ldd	r23, Y+8	; 0x08
    2cc8:	89 85       	ldd	r24, Y+9	; 0x09
    2cca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	40 e8       	ldi	r20, 0x80	; 128
    2cd2:	5f e3       	ldi	r21, 0x3F	; 63
    2cd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cd8:	88 23       	and	r24, r24
    2cda:	2c f4       	brge	.+10     	; 0x2ce6 <Read_Data+0x72>
		__ticks = 1;
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	9e 83       	std	Y+6, r25	; 0x06
    2ce2:	8d 83       	std	Y+5, r24	; 0x05
    2ce4:	3f c0       	rjmp	.+126    	; 0x2d64 <Read_Data+0xf0>
	else if (__tmp > 65535)
    2ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce8:	78 85       	ldd	r23, Y+8	; 0x08
    2cea:	89 85       	ldd	r24, Y+9	; 0x09
    2cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	3f ef       	ldi	r19, 0xFF	; 255
    2cf2:	4f e7       	ldi	r20, 0x7F	; 127
    2cf4:	57 e4       	ldi	r21, 0x47	; 71
    2cf6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cfa:	18 16       	cp	r1, r24
    2cfc:	4c f5       	brge	.+82     	; 0x2d50 <Read_Data+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	40 e2       	ldi	r20, 0x20	; 32
    2d0c:	51 e4       	ldi	r21, 0x41	; 65
    2d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d12:	dc 01       	movw	r26, r24
    2d14:	cb 01       	movw	r24, r22
    2d16:	bc 01       	movw	r22, r24
    2d18:	cd 01       	movw	r24, r26
    2d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	9e 83       	std	Y+6, r25	; 0x06
    2d24:	8d 83       	std	Y+5, r24	; 0x05
    2d26:	0f c0       	rjmp	.+30     	; 0x2d46 <Read_Data+0xd2>
    2d28:	88 ec       	ldi	r24, 0xC8	; 200
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	9c 83       	std	Y+4, r25	; 0x04
    2d2e:	8b 83       	std	Y+3, r24	; 0x03
    2d30:	8b 81       	ldd	r24, Y+3	; 0x03
    2d32:	9c 81       	ldd	r25, Y+4	; 0x04
    2d34:	01 97       	sbiw	r24, 0x01	; 1
    2d36:	f1 f7       	brne	.-4      	; 0x2d34 <Read_Data+0xc0>
    2d38:	9c 83       	std	Y+4, r25	; 0x04
    2d3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d40:	01 97       	sbiw	r24, 0x01	; 1
    2d42:	9e 83       	std	Y+6, r25	; 0x06
    2d44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d46:	8d 81       	ldd	r24, Y+5	; 0x05
    2d48:	9e 81       	ldd	r25, Y+6	; 0x06
    2d4a:	00 97       	sbiw	r24, 0x00	; 0
    2d4c:	69 f7       	brne	.-38     	; 0x2d28 <Read_Data+0xb4>
    2d4e:	25 c0       	rjmp	.+74     	; 0x2d9a <Read_Data+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d50:	6f 81       	ldd	r22, Y+7	; 0x07
    2d52:	78 85       	ldd	r23, Y+8	; 0x08
    2d54:	89 85       	ldd	r24, Y+9	; 0x09
    2d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	9e 83       	std	Y+6, r25	; 0x06
    2d62:	8d 83       	std	Y+5, r24	; 0x05
    2d64:	8d 81       	ldd	r24, Y+5	; 0x05
    2d66:	9e 81       	ldd	r25, Y+6	; 0x06
    2d68:	9a 83       	std	Y+2, r25	; 0x02
    2d6a:	89 83       	std	Y+1, r24	; 0x01
    2d6c:	89 81       	ldd	r24, Y+1	; 0x01
    2d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	f1 f7       	brne	.-4      	; 0x2d70 <Read_Data+0xfc>
    2d74:	9a 83       	std	Y+2, r25	; 0x02
    2d76:	89 83       	std	Y+1, r24	; 0x01
    2d78:	10 c0       	rjmp	.+32     	; 0x2d9a <Read_Data+0x126>
	_delay_ms(100);
	while(ESP8266_DataAvailable() > 0)
	_buffer[len++] = ESP8266_DataRead();
    2d7a:	29 89       	ldd	r18, Y+17	; 0x11
    2d7c:	3a 89       	ldd	r19, Y+18	; 0x12
    2d7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d80:	98 89       	ldd	r25, Y+16	; 0x10
    2d82:	89 01       	movw	r16, r18
    2d84:	08 0f       	add	r16, r24
    2d86:	19 1f       	adc	r17, r25
    2d88:	0e 94 13 16 	call	0x2c26	; 0x2c26 <ESP8266_DataRead>
    2d8c:	f8 01       	movw	r30, r16
    2d8e:	80 83       	st	Z, r24
    2d90:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d92:	98 89       	ldd	r25, Y+16	; 0x10
    2d94:	01 96       	adiw	r24, 0x01	; 1
    2d96:	98 8b       	std	Y+16, r25	; 0x10
    2d98:	8f 87       	std	Y+15, r24	; 0x0f

uint16_t Read_Data(char* _buffer)
{
	uint16_t len = 0;
	_delay_ms(100);
	while(ESP8266_DataAvailable() > 0)
    2d9a:	0e 94 00 16 	call	0x2c00	; 0x2c00 <ESP8266_DataAvailable>
    2d9e:	18 16       	cp	r1, r24
    2da0:	19 06       	cpc	r1, r25
    2da2:	5c f3       	brlt	.-42     	; 0x2d7a <Read_Data+0x106>
	_buffer[len++] = ESP8266_DataRead();
	return len;
    2da4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2da6:	98 89       	ldd	r25, Y+16	; 0x10
}
    2da8:	62 96       	adiw	r28, 0x12	; 18
    2daa:	0f b6       	in	r0, 0x3f	; 63
    2dac:	f8 94       	cli
    2dae:	de bf       	out	0x3e, r29	; 62
    2db0:	0f be       	out	0x3f, r0	; 63
    2db2:	cd bf       	out	0x3d, r28	; 61
    2db4:	cf 91       	pop	r28
    2db6:	df 91       	pop	r29
    2db8:	1f 91       	pop	r17
    2dba:	0f 91       	pop	r16
    2dbc:	08 95       	ret

00002dbe <__vector_13>:

void __vector_13 (void)
{
    2dbe:	1f 92       	push	r1
    2dc0:	0f 92       	push	r0
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	0f 92       	push	r0
    2dc6:	11 24       	eor	r1, r1
    2dc8:	2f 93       	push	r18
    2dca:	8f 93       	push	r24
    2dcc:	9f 93       	push	r25
    2dce:	af 93       	push	r26
    2dd0:	bf 93       	push	r27
    2dd2:	ef 93       	push	r30
    2dd4:	ff 93       	push	r31
    2dd6:	df 93       	push	r29
    2dd8:	cf 93       	push	r28
    2dda:	cd b7       	in	r28, 0x3d	; 61
    2ddc:	de b7       	in	r29, 0x3e	; 62
	//uint8_t oldsrg = SREG;
	//Disable GIE
	CLR_BIT(SREG, SREG_I);
    2dde:	af e5       	ldi	r26, 0x5F	; 95
    2de0:	b0 e0       	ldi	r27, 0x00	; 0
    2de2:	ef e5       	ldi	r30, 0x5F	; 95
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	80 81       	ld	r24, Z
    2de8:	8f 77       	andi	r24, 0x7F	; 127
    2dea:	8c 93       	st	X, r24

//	RESPONSE_BUFFER[Counter] = USART_u8ReceiveChar();
	RESPONSE_BUFFER[Counter] = UDR;
    2dec:	80 91 b4 01 	lds	r24, 0x01B4
    2df0:	90 91 b5 01 	lds	r25, 0x01B5
    2df4:	ec e2       	ldi	r30, 0x2C	; 44
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	20 81       	ld	r18, Z
    2dfa:	fc 01       	movw	r30, r24
    2dfc:	e4 54       	subi	r30, 0x44	; 68
    2dfe:	fe 4f       	sbci	r31, 0xFE	; 254
    2e00:	20 83       	st	Z, r18
	Counter++;
    2e02:	80 91 b4 01 	lds	r24, 0x01B4
    2e06:	90 91 b5 01 	lds	r25, 0x01B5
    2e0a:	01 96       	adiw	r24, 0x01	; 1
    2e0c:	90 93 b5 01 	sts	0x01B5, r25
    2e10:	80 93 b4 01 	sts	0x01B4, r24
	if(Counter == DEFAULT_BUFFER_SIZE){
    2e14:	80 91 b4 01 	lds	r24, 0x01B4
    2e18:	90 91 b5 01 	lds	r25, 0x01B5
    2e1c:	80 3a       	cpi	r24, 0xA0	; 160
    2e1e:	91 05       	cpc	r25, r1
    2e20:	41 f4       	brne	.+16     	; 0x2e32 <__vector_13+0x74>
		Counter = 0; pointer = 0;
    2e22:	10 92 b5 01 	sts	0x01B5, r1
    2e26:	10 92 b4 01 	sts	0x01B4, r1
    2e2a:	10 92 b7 01 	sts	0x01B7, r1
    2e2e:	10 92 b6 01 	sts	0x01B6, r1
	}
	//Enable GIE
	SET_BIT(SREG, SREG_I);
    2e32:	af e5       	ldi	r26, 0x5F	; 95
    2e34:	b0 e0       	ldi	r27, 0x00	; 0
    2e36:	ef e5       	ldi	r30, 0x5F	; 95
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	80 81       	ld	r24, Z
    2e3c:	80 68       	ori	r24, 0x80	; 128
    2e3e:	8c 93       	st	X, r24
}
    2e40:	cf 91       	pop	r28
    2e42:	df 91       	pop	r29
    2e44:	ff 91       	pop	r31
    2e46:	ef 91       	pop	r30
    2e48:	bf 91       	pop	r27
    2e4a:	af 91       	pop	r26
    2e4c:	9f 91       	pop	r25
    2e4e:	8f 91       	pop	r24
    2e50:	2f 91       	pop	r18
    2e52:	0f 90       	pop	r0
    2e54:	0f be       	out	0x3f, r0	; 63
    2e56:	0f 90       	pop	r0
    2e58:	1f 90       	pop	r1
    2e5a:	18 95       	reti

00002e5c <main>:


int main (void)
{
    2e5c:	df 93       	push	r29
    2e5e:	cf 93       	push	r28
    2e60:	cd b7       	in	r28, 0x3d	; 61
    2e62:	de b7       	in	r29, 0x3e	; 62
    2e64:	c9 5a       	subi	r28, 0xA9	; 169
    2e66:	d0 40       	sbci	r29, 0x00	; 0
    2e68:	0f b6       	in	r0, 0x3f	; 63
    2e6a:	f8 94       	cli
    2e6c:	de bf       	out	0x3e, r29	; 62
    2e6e:	0f be       	out	0x3f, r0	; 63
    2e70:	cd bf       	out	0x3d, r28	; 61
	#ifdef SEND_DEMO
	//uint8_t Sample = 0;
	#endif

	/*LCD Initialization*/
	LCD_voidControlState();
    2e72:	0e 94 4c 09 	call	0x1298	; 0x1298 <LCD_voidControlState>
	LCD_voidIntialization();
    2e76:	0e 94 ac 0a 	call	0x1558	; 0x1558 <LCD_voidIntialization>

	/*ADC Initialization*/
	ADC_voidIntialization();
    2e7a:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidIntialization>

	/*ADC PIN DIRECTION*/
	DIO_u8SetPinDirection(DIO_PORT_0, DIO_PIN_0, DIO_INPUT);
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	60 e0       	ldi	r22, 0x00	; 0
    2e82:	40 e0       	ldi	r20, 0x00	; 0
    2e84:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_u8SetPinDirection>

	/*UART Initialization*/
	USART_voidIntialization();
    2e88:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <USART_voidIntialization>
//	ESP8266_Start(0, DOMAIN, PORT);

	while(1)
	{
		/*Get The Reading from ADC*/
		ADC_u8GetADCBlocking(Channel_0, &Local_u16Value);
    2e8c:	9e 01       	movw	r18, r28
    2e8e:	20 5f       	subi	r18, 0xF0	; 240
    2e90:	3f 4f       	sbci	r19, 0xFF	; 255
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    2e94:	b9 01       	movw	r22, r18
    2e96:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <ADC_u8GetADCBlocking>

		/*Convert the Value To Temp Reading*/
		TEMPREATURE(Local_u16Value, &Local_u16Temp);
    2e9a:	88 89       	ldd	r24, Y+16	; 0x10
    2e9c:	99 89       	ldd	r25, Y+17	; 0x11
    2e9e:	9e 01       	movw	r18, r28
    2ea0:	2e 5e       	subi	r18, 0xEE	; 238
    2ea2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea4:	b9 01       	movw	r22, r18
    2ea6:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <TEMPREATURE>

		/*Print The Value To LCD*/
		TempLCDPrint(Local_u16Temp);
    2eaa:	8a 89       	ldd	r24, Y+18	; 0x12
    2eac:	9b 89       	ldd	r25, Y+19	; 0x13
    2eae:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <TempLCDPrint>
    2eb2:	80 e0       	ldi	r24, 0x00	; 0
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	aa ef       	ldi	r26, 0xFA	; 250
    2eb8:	b3 e4       	ldi	r27, 0x43	; 67
    2eba:	8b 87       	std	Y+11, r24	; 0x0b
    2ebc:	9c 87       	std	Y+12, r25	; 0x0c
    2ebe:	ad 87       	std	Y+13, r26	; 0x0d
    2ec0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ec4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ec6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ec8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	4a ef       	ldi	r20, 0xFA	; 250
    2ed0:	54 e4       	ldi	r21, 0x44	; 68
    2ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	8f 83       	std	Y+7, r24	; 0x07
    2edc:	98 87       	std	Y+8, r25	; 0x08
    2ede:	a9 87       	std	Y+9, r26	; 0x09
    2ee0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ee2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ee4:	78 85       	ldd	r23, Y+8	; 0x08
    2ee6:	89 85       	ldd	r24, Y+9	; 0x09
    2ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	40 e8       	ldi	r20, 0x80	; 128
    2ef0:	5f e3       	ldi	r21, 0x3F	; 63
    2ef2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ef6:	88 23       	and	r24, r24
    2ef8:	2c f4       	brge	.+10     	; 0x2f04 <main+0xa8>
		__ticks = 1;
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	9e 83       	std	Y+6, r25	; 0x06
    2f00:	8d 83       	std	Y+5, r24	; 0x05
    2f02:	3f c0       	rjmp	.+126    	; 0x2f82 <main+0x126>
	else if (__tmp > 65535)
    2f04:	6f 81       	ldd	r22, Y+7	; 0x07
    2f06:	78 85       	ldd	r23, Y+8	; 0x08
    2f08:	89 85       	ldd	r24, Y+9	; 0x09
    2f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	3f ef       	ldi	r19, 0xFF	; 255
    2f10:	4f e7       	ldi	r20, 0x7F	; 127
    2f12:	57 e4       	ldi	r21, 0x47	; 71
    2f14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f18:	18 16       	cp	r1, r24
    2f1a:	4c f5       	brge	.+82     	; 0x2f6e <main+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f24:	20 e0       	ldi	r18, 0x00	; 0
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	40 e2       	ldi	r20, 0x20	; 32
    2f2a:	51 e4       	ldi	r21, 0x41	; 65
    2f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f30:	dc 01       	movw	r26, r24
    2f32:	cb 01       	movw	r24, r22
    2f34:	bc 01       	movw	r22, r24
    2f36:	cd 01       	movw	r24, r26
    2f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	cb 01       	movw	r24, r22
    2f40:	9e 83       	std	Y+6, r25	; 0x06
    2f42:	8d 83       	std	Y+5, r24	; 0x05
    2f44:	0f c0       	rjmp	.+30     	; 0x2f64 <main+0x108>
    2f46:	88 ec       	ldi	r24, 0xC8	; 200
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	9c 83       	std	Y+4, r25	; 0x04
    2f4c:	8b 83       	std	Y+3, r24	; 0x03
    2f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f50:	9c 81       	ldd	r25, Y+4	; 0x04
    2f52:	01 97       	sbiw	r24, 0x01	; 1
    2f54:	f1 f7       	brne	.-4      	; 0x2f52 <main+0xf6>
    2f56:	9c 83       	std	Y+4, r25	; 0x04
    2f58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5e:	01 97       	sbiw	r24, 0x01	; 1
    2f60:	9e 83       	std	Y+6, r25	; 0x06
    2f62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f64:	8d 81       	ldd	r24, Y+5	; 0x05
    2f66:	9e 81       	ldd	r25, Y+6	; 0x06
    2f68:	00 97       	sbiw	r24, 0x00	; 0
    2f6a:	69 f7       	brne	.-38     	; 0x2f46 <main+0xea>
    2f6c:	8f cf       	rjmp	.-226    	; 0x2e8c <main+0x30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f70:	78 85       	ldd	r23, Y+8	; 0x08
    2f72:	89 85       	ldd	r24, Y+9	; 0x09
    2f74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	9e 83       	std	Y+6, r25	; 0x06
    2f80:	8d 83       	std	Y+5, r24	; 0x05
    2f82:	8d 81       	ldd	r24, Y+5	; 0x05
    2f84:	9e 81       	ldd	r25, Y+6	; 0x06
    2f86:	9a 83       	std	Y+2, r25	; 0x02
    2f88:	89 83       	std	Y+1, r24	; 0x01
    2f8a:	89 81       	ldd	r24, Y+1	; 0x01
    2f8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f8e:	01 97       	sbiw	r24, 0x01	; 1
    2f90:	f1 f7       	brne	.-4      	; 0x2f8e <main+0x132>
    2f92:	9a 83       	std	Y+2, r25	; 0x02
    2f94:	89 83       	std	Y+1, r24	; 0x01
    2f96:	7a cf       	rjmp	.-268    	; 0x2e8c <main+0x30>

00002f98 <__udivmodhi4>:
    2f98:	aa 1b       	sub	r26, r26
    2f9a:	bb 1b       	sub	r27, r27
    2f9c:	51 e1       	ldi	r21, 0x11	; 17
    2f9e:	07 c0       	rjmp	.+14     	; 0x2fae <__udivmodhi4_ep>

00002fa0 <__udivmodhi4_loop>:
    2fa0:	aa 1f       	adc	r26, r26
    2fa2:	bb 1f       	adc	r27, r27
    2fa4:	a6 17       	cp	r26, r22
    2fa6:	b7 07       	cpc	r27, r23
    2fa8:	10 f0       	brcs	.+4      	; 0x2fae <__udivmodhi4_ep>
    2faa:	a6 1b       	sub	r26, r22
    2fac:	b7 0b       	sbc	r27, r23

00002fae <__udivmodhi4_ep>:
    2fae:	88 1f       	adc	r24, r24
    2fb0:	99 1f       	adc	r25, r25
    2fb2:	5a 95       	dec	r21
    2fb4:	a9 f7       	brne	.-22     	; 0x2fa0 <__udivmodhi4_loop>
    2fb6:	80 95       	com	r24
    2fb8:	90 95       	com	r25
    2fba:	bc 01       	movw	r22, r24
    2fbc:	cd 01       	movw	r24, r26
    2fbe:	08 95       	ret

00002fc0 <__prologue_saves__>:
    2fc0:	2f 92       	push	r2
    2fc2:	3f 92       	push	r3
    2fc4:	4f 92       	push	r4
    2fc6:	5f 92       	push	r5
    2fc8:	6f 92       	push	r6
    2fca:	7f 92       	push	r7
    2fcc:	8f 92       	push	r8
    2fce:	9f 92       	push	r9
    2fd0:	af 92       	push	r10
    2fd2:	bf 92       	push	r11
    2fd4:	cf 92       	push	r12
    2fd6:	df 92       	push	r13
    2fd8:	ef 92       	push	r14
    2fda:	ff 92       	push	r15
    2fdc:	0f 93       	push	r16
    2fde:	1f 93       	push	r17
    2fe0:	cf 93       	push	r28
    2fe2:	df 93       	push	r29
    2fe4:	cd b7       	in	r28, 0x3d	; 61
    2fe6:	de b7       	in	r29, 0x3e	; 62
    2fe8:	ca 1b       	sub	r28, r26
    2fea:	db 0b       	sbc	r29, r27
    2fec:	0f b6       	in	r0, 0x3f	; 63
    2fee:	f8 94       	cli
    2ff0:	de bf       	out	0x3e, r29	; 62
    2ff2:	0f be       	out	0x3f, r0	; 63
    2ff4:	cd bf       	out	0x3d, r28	; 61
    2ff6:	09 94       	ijmp

00002ff8 <__epilogue_restores__>:
    2ff8:	2a 88       	ldd	r2, Y+18	; 0x12
    2ffa:	39 88       	ldd	r3, Y+17	; 0x11
    2ffc:	48 88       	ldd	r4, Y+16	; 0x10
    2ffe:	5f 84       	ldd	r5, Y+15	; 0x0f
    3000:	6e 84       	ldd	r6, Y+14	; 0x0e
    3002:	7d 84       	ldd	r7, Y+13	; 0x0d
    3004:	8c 84       	ldd	r8, Y+12	; 0x0c
    3006:	9b 84       	ldd	r9, Y+11	; 0x0b
    3008:	aa 84       	ldd	r10, Y+10	; 0x0a
    300a:	b9 84       	ldd	r11, Y+9	; 0x09
    300c:	c8 84       	ldd	r12, Y+8	; 0x08
    300e:	df 80       	ldd	r13, Y+7	; 0x07
    3010:	ee 80       	ldd	r14, Y+6	; 0x06
    3012:	fd 80       	ldd	r15, Y+5	; 0x05
    3014:	0c 81       	ldd	r16, Y+4	; 0x04
    3016:	1b 81       	ldd	r17, Y+3	; 0x03
    3018:	aa 81       	ldd	r26, Y+2	; 0x02
    301a:	b9 81       	ldd	r27, Y+1	; 0x01
    301c:	ce 0f       	add	r28, r30
    301e:	d1 1d       	adc	r29, r1
    3020:	0f b6       	in	r0, 0x3f	; 63
    3022:	f8 94       	cli
    3024:	de bf       	out	0x3e, r29	; 62
    3026:	0f be       	out	0x3f, r0	; 63
    3028:	cd bf       	out	0x3d, r28	; 61
    302a:	ed 01       	movw	r28, r26
    302c:	08 95       	ret

0000302e <atoi>:
    302e:	fc 01       	movw	r30, r24
    3030:	88 27       	eor	r24, r24
    3032:	99 27       	eor	r25, r25
    3034:	e8 94       	clt
    3036:	21 91       	ld	r18, Z+
    3038:	20 32       	cpi	r18, 0x20	; 32
    303a:	e9 f3       	breq	.-6      	; 0x3036 <atoi+0x8>
    303c:	29 30       	cpi	r18, 0x09	; 9
    303e:	10 f0       	brcs	.+4      	; 0x3044 <atoi+0x16>
    3040:	2e 30       	cpi	r18, 0x0E	; 14
    3042:	c8 f3       	brcs	.-14     	; 0x3036 <atoi+0x8>
    3044:	2b 32       	cpi	r18, 0x2B	; 43
    3046:	41 f0       	breq	.+16     	; 0x3058 <atoi+0x2a>
    3048:	2d 32       	cpi	r18, 0x2D	; 45
    304a:	39 f4       	brne	.+14     	; 0x305a <atoi+0x2c>
    304c:	68 94       	set
    304e:	04 c0       	rjmp	.+8      	; 0x3058 <atoi+0x2a>
    3050:	0e 94 97 18 	call	0x312e	; 0x312e <__mulhi_const_10>
    3054:	82 0f       	add	r24, r18
    3056:	91 1d       	adc	r25, r1
    3058:	21 91       	ld	r18, Z+
    305a:	20 53       	subi	r18, 0x30	; 48
    305c:	2a 30       	cpi	r18, 0x0A	; 10
    305e:	c0 f3       	brcs	.-16     	; 0x3050 <atoi+0x22>
    3060:	1e f4       	brtc	.+6      	; 0x3068 <atoi+0x3a>
    3062:	90 95       	com	r25
    3064:	81 95       	neg	r24
    3066:	9f 4f       	sbci	r25, 0xFF	; 255
    3068:	08 95       	ret

0000306a <memcpy>:
    306a:	fb 01       	movw	r30, r22
    306c:	dc 01       	movw	r26, r24
    306e:	02 c0       	rjmp	.+4      	; 0x3074 <memcpy+0xa>
    3070:	01 90       	ld	r0, Z+
    3072:	0d 92       	st	X+, r0
    3074:	41 50       	subi	r20, 0x01	; 1
    3076:	50 40       	sbci	r21, 0x00	; 0
    3078:	d8 f7       	brcc	.-10     	; 0x3070 <memcpy+0x6>
    307a:	08 95       	ret

0000307c <memmove>:
    307c:	68 17       	cp	r22, r24
    307e:	79 07       	cpc	r23, r25
    3080:	68 f4       	brcc	.+26     	; 0x309c <memmove+0x20>
    3082:	fb 01       	movw	r30, r22
    3084:	dc 01       	movw	r26, r24
    3086:	e4 0f       	add	r30, r20
    3088:	f5 1f       	adc	r31, r21
    308a:	a4 0f       	add	r26, r20
    308c:	b5 1f       	adc	r27, r21
    308e:	02 c0       	rjmp	.+4      	; 0x3094 <memmove+0x18>
    3090:	02 90       	ld	r0, -Z
    3092:	0e 92       	st	-X, r0
    3094:	41 50       	subi	r20, 0x01	; 1
    3096:	50 40       	sbci	r21, 0x00	; 0
    3098:	d8 f7       	brcc	.-10     	; 0x3090 <memmove+0x14>
    309a:	08 95       	ret
    309c:	0c 94 35 18 	jmp	0x306a	; 0x306a <memcpy>

000030a0 <memset>:
    30a0:	dc 01       	movw	r26, r24
    30a2:	01 c0       	rjmp	.+2      	; 0x30a6 <memset+0x6>
    30a4:	6d 93       	st	X+, r22
    30a6:	41 50       	subi	r20, 0x01	; 1
    30a8:	50 40       	sbci	r21, 0x00	; 0
    30aa:	e0 f7       	brcc	.-8      	; 0x30a4 <memset+0x4>
    30ac:	08 95       	ret

000030ae <strlen>:
    30ae:	fc 01       	movw	r30, r24
    30b0:	01 90       	ld	r0, Z+
    30b2:	00 20       	and	r0, r0
    30b4:	e9 f7       	brne	.-6      	; 0x30b0 <strlen+0x2>
    30b6:	80 95       	com	r24
    30b8:	90 95       	com	r25
    30ba:	8e 0f       	add	r24, r30
    30bc:	9f 1f       	adc	r25, r31
    30be:	08 95       	ret

000030c0 <strncmp>:
    30c0:	fb 01       	movw	r30, r22
    30c2:	dc 01       	movw	r26, r24
    30c4:	41 50       	subi	r20, 0x01	; 1
    30c6:	50 40       	sbci	r21, 0x00	; 0
    30c8:	30 f0       	brcs	.+12     	; 0x30d6 <strncmp+0x16>
    30ca:	8d 91       	ld	r24, X+
    30cc:	01 90       	ld	r0, Z+
    30ce:	80 19       	sub	r24, r0
    30d0:	19 f4       	brne	.+6      	; 0x30d8 <strncmp+0x18>
    30d2:	00 20       	and	r0, r0
    30d4:	b9 f7       	brne	.-18     	; 0x30c4 <strncmp+0x4>
    30d6:	88 1b       	sub	r24, r24
    30d8:	99 0b       	sbc	r25, r25
    30da:	08 95       	ret

000030dc <strncpy>:
    30dc:	fb 01       	movw	r30, r22
    30de:	dc 01       	movw	r26, r24
    30e0:	41 50       	subi	r20, 0x01	; 1
    30e2:	50 40       	sbci	r21, 0x00	; 0
    30e4:	48 f0       	brcs	.+18     	; 0x30f8 <strncpy+0x1c>
    30e6:	01 90       	ld	r0, Z+
    30e8:	0d 92       	st	X+, r0
    30ea:	00 20       	and	r0, r0
    30ec:	c9 f7       	brne	.-14     	; 0x30e0 <strncpy+0x4>
    30ee:	01 c0       	rjmp	.+2      	; 0x30f2 <strncpy+0x16>
    30f0:	1d 92       	st	X+, r1
    30f2:	41 50       	subi	r20, 0x01	; 1
    30f4:	50 40       	sbci	r21, 0x00	; 0
    30f6:	e0 f7       	brcc	.-8      	; 0x30f0 <strncpy+0x14>
    30f8:	08 95       	ret

000030fa <strstr>:
    30fa:	fb 01       	movw	r30, r22
    30fc:	51 91       	ld	r21, Z+
    30fe:	55 23       	and	r21, r21
    3100:	a9 f0       	breq	.+42     	; 0x312c <strstr+0x32>
    3102:	bf 01       	movw	r22, r30
    3104:	dc 01       	movw	r26, r24
    3106:	4d 91       	ld	r20, X+
    3108:	45 17       	cp	r20, r21
    310a:	41 11       	cpse	r20, r1
    310c:	e1 f7       	brne	.-8      	; 0x3106 <strstr+0xc>
    310e:	59 f4       	brne	.+22     	; 0x3126 <strstr+0x2c>
    3110:	cd 01       	movw	r24, r26
    3112:	01 90       	ld	r0, Z+
    3114:	00 20       	and	r0, r0
    3116:	49 f0       	breq	.+18     	; 0x312a <strstr+0x30>
    3118:	4d 91       	ld	r20, X+
    311a:	40 15       	cp	r20, r0
    311c:	41 11       	cpse	r20, r1
    311e:	c9 f3       	breq	.-14     	; 0x3112 <strstr+0x18>
    3120:	fb 01       	movw	r30, r22
    3122:	41 11       	cpse	r20, r1
    3124:	ef cf       	rjmp	.-34     	; 0x3104 <strstr+0xa>
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	01 97       	sbiw	r24, 0x01	; 1
    312c:	08 95       	ret

0000312e <__mulhi_const_10>:
    312e:	7a e0       	ldi	r23, 0x0A	; 10
    3130:	97 9f       	mul	r25, r23
    3132:	90 2d       	mov	r25, r0
    3134:	87 9f       	mul	r24, r23
    3136:	80 2d       	mov	r24, r0
    3138:	91 0d       	add	r25, r1
    313a:	11 24       	eor	r1, r1
    313c:	08 95       	ret

0000313e <sprintf>:
    313e:	ae e0       	ldi	r26, 0x0E	; 14
    3140:	b0 e0       	ldi	r27, 0x00	; 0
    3142:	e5 ea       	ldi	r30, 0xA5	; 165
    3144:	f8 e1       	ldi	r31, 0x18	; 24
    3146:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <__prologue_saves__+0x1c>
    314a:	0d 89       	ldd	r16, Y+21	; 0x15
    314c:	1e 89       	ldd	r17, Y+22	; 0x16
    314e:	86 e0       	ldi	r24, 0x06	; 6
    3150:	8c 83       	std	Y+4, r24	; 0x04
    3152:	1a 83       	std	Y+2, r17	; 0x02
    3154:	09 83       	std	Y+1, r16	; 0x01
    3156:	8f ef       	ldi	r24, 0xFF	; 255
    3158:	9f e7       	ldi	r25, 0x7F	; 127
    315a:	9e 83       	std	Y+6, r25	; 0x06
    315c:	8d 83       	std	Y+5, r24	; 0x05
    315e:	9e 01       	movw	r18, r28
    3160:	27 5e       	subi	r18, 0xE7	; 231
    3162:	3f 4f       	sbci	r19, 0xFF	; 255
    3164:	ce 01       	movw	r24, r28
    3166:	01 96       	adiw	r24, 0x01	; 1
    3168:	6f 89       	ldd	r22, Y+23	; 0x17
    316a:	78 8d       	ldd	r23, Y+24	; 0x18
    316c:	a9 01       	movw	r20, r18
    316e:	0e 94 c3 18 	call	0x3186	; 0x3186 <vfprintf>
    3172:	2f 81       	ldd	r18, Y+7	; 0x07
    3174:	38 85       	ldd	r19, Y+8	; 0x08
    3176:	02 0f       	add	r16, r18
    3178:	13 1f       	adc	r17, r19
    317a:	f8 01       	movw	r30, r16
    317c:	10 82       	st	Z, r1
    317e:	2e 96       	adiw	r28, 0x0e	; 14
    3180:	e4 e0       	ldi	r30, 0x04	; 4
    3182:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__epilogue_restores__+0x1c>

00003186 <vfprintf>:
    3186:	ab e0       	ldi	r26, 0x0B	; 11
    3188:	b0 e0       	ldi	r27, 0x00	; 0
    318a:	e9 ec       	ldi	r30, 0xC9	; 201
    318c:	f8 e1       	ldi	r31, 0x18	; 24
    318e:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <__prologue_saves__>
    3192:	3c 01       	movw	r6, r24
    3194:	2b 01       	movw	r4, r22
    3196:	5a 01       	movw	r10, r20
    3198:	fc 01       	movw	r30, r24
    319a:	17 82       	std	Z+7, r1	; 0x07
    319c:	16 82       	std	Z+6, r1	; 0x06
    319e:	83 81       	ldd	r24, Z+3	; 0x03
    31a0:	81 fd       	sbrc	r24, 1
    31a2:	03 c0       	rjmp	.+6      	; 0x31aa <vfprintf+0x24>
    31a4:	6f ef       	ldi	r22, 0xFF	; 255
    31a6:	7f ef       	ldi	r23, 0xFF	; 255
    31a8:	c6 c1       	rjmp	.+908    	; 0x3536 <vfprintf+0x3b0>
    31aa:	9a e0       	ldi	r25, 0x0A	; 10
    31ac:	89 2e       	mov	r8, r25
    31ae:	1e 01       	movw	r2, r28
    31b0:	08 94       	sec
    31b2:	21 1c       	adc	r2, r1
    31b4:	31 1c       	adc	r3, r1
    31b6:	f3 01       	movw	r30, r6
    31b8:	23 81       	ldd	r18, Z+3	; 0x03
    31ba:	f2 01       	movw	r30, r4
    31bc:	23 fd       	sbrc	r18, 3
    31be:	85 91       	lpm	r24, Z+
    31c0:	23 ff       	sbrs	r18, 3
    31c2:	81 91       	ld	r24, Z+
    31c4:	2f 01       	movw	r4, r30
    31c6:	88 23       	and	r24, r24
    31c8:	09 f4       	brne	.+2      	; 0x31cc <vfprintf+0x46>
    31ca:	b2 c1       	rjmp	.+868    	; 0x3530 <vfprintf+0x3aa>
    31cc:	85 32       	cpi	r24, 0x25	; 37
    31ce:	39 f4       	brne	.+14     	; 0x31de <vfprintf+0x58>
    31d0:	23 fd       	sbrc	r18, 3
    31d2:	85 91       	lpm	r24, Z+
    31d4:	23 ff       	sbrs	r18, 3
    31d6:	81 91       	ld	r24, Z+
    31d8:	2f 01       	movw	r4, r30
    31da:	85 32       	cpi	r24, 0x25	; 37
    31dc:	29 f4       	brne	.+10     	; 0x31e8 <vfprintf+0x62>
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	b3 01       	movw	r22, r6
    31e2:	0e 94 b6 1a 	call	0x356c	; 0x356c <fputc>
    31e6:	e7 cf       	rjmp	.-50     	; 0x31b6 <vfprintf+0x30>
    31e8:	98 2f       	mov	r25, r24
    31ea:	ff 24       	eor	r15, r15
    31ec:	ee 24       	eor	r14, r14
    31ee:	99 24       	eor	r9, r9
    31f0:	ff e1       	ldi	r31, 0x1F	; 31
    31f2:	ff 15       	cp	r31, r15
    31f4:	d0 f0       	brcs	.+52     	; 0x322a <vfprintf+0xa4>
    31f6:	9b 32       	cpi	r25, 0x2B	; 43
    31f8:	69 f0       	breq	.+26     	; 0x3214 <vfprintf+0x8e>
    31fa:	9c 32       	cpi	r25, 0x2C	; 44
    31fc:	28 f4       	brcc	.+10     	; 0x3208 <vfprintf+0x82>
    31fe:	90 32       	cpi	r25, 0x20	; 32
    3200:	59 f0       	breq	.+22     	; 0x3218 <vfprintf+0x92>
    3202:	93 32       	cpi	r25, 0x23	; 35
    3204:	91 f4       	brne	.+36     	; 0x322a <vfprintf+0xa4>
    3206:	0e c0       	rjmp	.+28     	; 0x3224 <vfprintf+0x9e>
    3208:	9d 32       	cpi	r25, 0x2D	; 45
    320a:	49 f0       	breq	.+18     	; 0x321e <vfprintf+0x98>
    320c:	90 33       	cpi	r25, 0x30	; 48
    320e:	69 f4       	brne	.+26     	; 0x322a <vfprintf+0xa4>
    3210:	41 e0       	ldi	r20, 0x01	; 1
    3212:	24 c0       	rjmp	.+72     	; 0x325c <vfprintf+0xd6>
    3214:	52 e0       	ldi	r21, 0x02	; 2
    3216:	f5 2a       	or	r15, r21
    3218:	84 e0       	ldi	r24, 0x04	; 4
    321a:	f8 2a       	or	r15, r24
    321c:	28 c0       	rjmp	.+80     	; 0x326e <vfprintf+0xe8>
    321e:	98 e0       	ldi	r25, 0x08	; 8
    3220:	f9 2a       	or	r15, r25
    3222:	25 c0       	rjmp	.+74     	; 0x326e <vfprintf+0xe8>
    3224:	e0 e1       	ldi	r30, 0x10	; 16
    3226:	fe 2a       	or	r15, r30
    3228:	22 c0       	rjmp	.+68     	; 0x326e <vfprintf+0xe8>
    322a:	f7 fc       	sbrc	r15, 7
    322c:	29 c0       	rjmp	.+82     	; 0x3280 <vfprintf+0xfa>
    322e:	89 2f       	mov	r24, r25
    3230:	80 53       	subi	r24, 0x30	; 48
    3232:	8a 30       	cpi	r24, 0x0A	; 10
    3234:	70 f4       	brcc	.+28     	; 0x3252 <vfprintf+0xcc>
    3236:	f6 fe       	sbrs	r15, 6
    3238:	05 c0       	rjmp	.+10     	; 0x3244 <vfprintf+0xbe>
    323a:	98 9c       	mul	r9, r8
    323c:	90 2c       	mov	r9, r0
    323e:	11 24       	eor	r1, r1
    3240:	98 0e       	add	r9, r24
    3242:	15 c0       	rjmp	.+42     	; 0x326e <vfprintf+0xe8>
    3244:	e8 9c       	mul	r14, r8
    3246:	e0 2c       	mov	r14, r0
    3248:	11 24       	eor	r1, r1
    324a:	e8 0e       	add	r14, r24
    324c:	f0 e2       	ldi	r31, 0x20	; 32
    324e:	ff 2a       	or	r15, r31
    3250:	0e c0       	rjmp	.+28     	; 0x326e <vfprintf+0xe8>
    3252:	9e 32       	cpi	r25, 0x2E	; 46
    3254:	29 f4       	brne	.+10     	; 0x3260 <vfprintf+0xda>
    3256:	f6 fc       	sbrc	r15, 6
    3258:	6b c1       	rjmp	.+726    	; 0x3530 <vfprintf+0x3aa>
    325a:	40 e4       	ldi	r20, 0x40	; 64
    325c:	f4 2a       	or	r15, r20
    325e:	07 c0       	rjmp	.+14     	; 0x326e <vfprintf+0xe8>
    3260:	9c 36       	cpi	r25, 0x6C	; 108
    3262:	19 f4       	brne	.+6      	; 0x326a <vfprintf+0xe4>
    3264:	50 e8       	ldi	r21, 0x80	; 128
    3266:	f5 2a       	or	r15, r21
    3268:	02 c0       	rjmp	.+4      	; 0x326e <vfprintf+0xe8>
    326a:	98 36       	cpi	r25, 0x68	; 104
    326c:	49 f4       	brne	.+18     	; 0x3280 <vfprintf+0xfa>
    326e:	f2 01       	movw	r30, r4
    3270:	23 fd       	sbrc	r18, 3
    3272:	95 91       	lpm	r25, Z+
    3274:	23 ff       	sbrs	r18, 3
    3276:	91 91       	ld	r25, Z+
    3278:	2f 01       	movw	r4, r30
    327a:	99 23       	and	r25, r25
    327c:	09 f0       	breq	.+2      	; 0x3280 <vfprintf+0xfa>
    327e:	b8 cf       	rjmp	.-144    	; 0x31f0 <vfprintf+0x6a>
    3280:	89 2f       	mov	r24, r25
    3282:	85 54       	subi	r24, 0x45	; 69
    3284:	83 30       	cpi	r24, 0x03	; 3
    3286:	18 f0       	brcs	.+6      	; 0x328e <vfprintf+0x108>
    3288:	80 52       	subi	r24, 0x20	; 32
    328a:	83 30       	cpi	r24, 0x03	; 3
    328c:	38 f4       	brcc	.+14     	; 0x329c <vfprintf+0x116>
    328e:	44 e0       	ldi	r20, 0x04	; 4
    3290:	50 e0       	ldi	r21, 0x00	; 0
    3292:	a4 0e       	add	r10, r20
    3294:	b5 1e       	adc	r11, r21
    3296:	5f e3       	ldi	r21, 0x3F	; 63
    3298:	59 83       	std	Y+1, r21	; 0x01
    329a:	0f c0       	rjmp	.+30     	; 0x32ba <vfprintf+0x134>
    329c:	93 36       	cpi	r25, 0x63	; 99
    329e:	31 f0       	breq	.+12     	; 0x32ac <vfprintf+0x126>
    32a0:	93 37       	cpi	r25, 0x73	; 115
    32a2:	79 f0       	breq	.+30     	; 0x32c2 <vfprintf+0x13c>
    32a4:	93 35       	cpi	r25, 0x53	; 83
    32a6:	09 f0       	breq	.+2      	; 0x32aa <vfprintf+0x124>
    32a8:	56 c0       	rjmp	.+172    	; 0x3356 <vfprintf+0x1d0>
    32aa:	20 c0       	rjmp	.+64     	; 0x32ec <vfprintf+0x166>
    32ac:	f5 01       	movw	r30, r10
    32ae:	80 81       	ld	r24, Z
    32b0:	89 83       	std	Y+1, r24	; 0x01
    32b2:	42 e0       	ldi	r20, 0x02	; 2
    32b4:	50 e0       	ldi	r21, 0x00	; 0
    32b6:	a4 0e       	add	r10, r20
    32b8:	b5 1e       	adc	r11, r21
    32ba:	61 01       	movw	r12, r2
    32bc:	01 e0       	ldi	r16, 0x01	; 1
    32be:	10 e0       	ldi	r17, 0x00	; 0
    32c0:	12 c0       	rjmp	.+36     	; 0x32e6 <vfprintf+0x160>
    32c2:	f5 01       	movw	r30, r10
    32c4:	c0 80       	ld	r12, Z
    32c6:	d1 80       	ldd	r13, Z+1	; 0x01
    32c8:	f6 fc       	sbrc	r15, 6
    32ca:	03 c0       	rjmp	.+6      	; 0x32d2 <vfprintf+0x14c>
    32cc:	6f ef       	ldi	r22, 0xFF	; 255
    32ce:	7f ef       	ldi	r23, 0xFF	; 255
    32d0:	02 c0       	rjmp	.+4      	; 0x32d6 <vfprintf+0x150>
    32d2:	69 2d       	mov	r22, r9
    32d4:	70 e0       	ldi	r23, 0x00	; 0
    32d6:	42 e0       	ldi	r20, 0x02	; 2
    32d8:	50 e0       	ldi	r21, 0x00	; 0
    32da:	a4 0e       	add	r10, r20
    32dc:	b5 1e       	adc	r11, r21
    32de:	c6 01       	movw	r24, r12
    32e0:	0e 94 ab 1a 	call	0x3556	; 0x3556 <strnlen>
    32e4:	8c 01       	movw	r16, r24
    32e6:	5f e7       	ldi	r21, 0x7F	; 127
    32e8:	f5 22       	and	r15, r21
    32ea:	14 c0       	rjmp	.+40     	; 0x3314 <vfprintf+0x18e>
    32ec:	f5 01       	movw	r30, r10
    32ee:	c0 80       	ld	r12, Z
    32f0:	d1 80       	ldd	r13, Z+1	; 0x01
    32f2:	f6 fc       	sbrc	r15, 6
    32f4:	03 c0       	rjmp	.+6      	; 0x32fc <vfprintf+0x176>
    32f6:	6f ef       	ldi	r22, 0xFF	; 255
    32f8:	7f ef       	ldi	r23, 0xFF	; 255
    32fa:	02 c0       	rjmp	.+4      	; 0x3300 <vfprintf+0x17a>
    32fc:	69 2d       	mov	r22, r9
    32fe:	70 e0       	ldi	r23, 0x00	; 0
    3300:	42 e0       	ldi	r20, 0x02	; 2
    3302:	50 e0       	ldi	r21, 0x00	; 0
    3304:	a4 0e       	add	r10, r20
    3306:	b5 1e       	adc	r11, r21
    3308:	c6 01       	movw	r24, r12
    330a:	0e 94 a0 1a 	call	0x3540	; 0x3540 <strnlen_P>
    330e:	8c 01       	movw	r16, r24
    3310:	50 e8       	ldi	r21, 0x80	; 128
    3312:	f5 2a       	or	r15, r21
    3314:	f3 fe       	sbrs	r15, 3
    3316:	07 c0       	rjmp	.+14     	; 0x3326 <vfprintf+0x1a0>
    3318:	1a c0       	rjmp	.+52     	; 0x334e <vfprintf+0x1c8>
    331a:	80 e2       	ldi	r24, 0x20	; 32
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	b3 01       	movw	r22, r6
    3320:	0e 94 b6 1a 	call	0x356c	; 0x356c <fputc>
    3324:	ea 94       	dec	r14
    3326:	8e 2d       	mov	r24, r14
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	08 17       	cp	r16, r24
    332c:	19 07       	cpc	r17, r25
    332e:	a8 f3       	brcs	.-22     	; 0x331a <vfprintf+0x194>
    3330:	0e c0       	rjmp	.+28     	; 0x334e <vfprintf+0x1c8>
    3332:	f6 01       	movw	r30, r12
    3334:	f7 fc       	sbrc	r15, 7
    3336:	85 91       	lpm	r24, Z+
    3338:	f7 fe       	sbrs	r15, 7
    333a:	81 91       	ld	r24, Z+
    333c:	6f 01       	movw	r12, r30
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	b3 01       	movw	r22, r6
    3342:	0e 94 b6 1a 	call	0x356c	; 0x356c <fputc>
    3346:	e1 10       	cpse	r14, r1
    3348:	ea 94       	dec	r14
    334a:	01 50       	subi	r16, 0x01	; 1
    334c:	10 40       	sbci	r17, 0x00	; 0
    334e:	01 15       	cp	r16, r1
    3350:	11 05       	cpc	r17, r1
    3352:	79 f7       	brne	.-34     	; 0x3332 <vfprintf+0x1ac>
    3354:	ea c0       	rjmp	.+468    	; 0x352a <vfprintf+0x3a4>
    3356:	94 36       	cpi	r25, 0x64	; 100
    3358:	11 f0       	breq	.+4      	; 0x335e <vfprintf+0x1d8>
    335a:	99 36       	cpi	r25, 0x69	; 105
    335c:	69 f5       	brne	.+90     	; 0x33b8 <vfprintf+0x232>
    335e:	f7 fe       	sbrs	r15, 7
    3360:	08 c0       	rjmp	.+16     	; 0x3372 <vfprintf+0x1ec>
    3362:	f5 01       	movw	r30, r10
    3364:	20 81       	ld	r18, Z
    3366:	31 81       	ldd	r19, Z+1	; 0x01
    3368:	42 81       	ldd	r20, Z+2	; 0x02
    336a:	53 81       	ldd	r21, Z+3	; 0x03
    336c:	84 e0       	ldi	r24, 0x04	; 4
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	0a c0       	rjmp	.+20     	; 0x3386 <vfprintf+0x200>
    3372:	f5 01       	movw	r30, r10
    3374:	80 81       	ld	r24, Z
    3376:	91 81       	ldd	r25, Z+1	; 0x01
    3378:	9c 01       	movw	r18, r24
    337a:	44 27       	eor	r20, r20
    337c:	37 fd       	sbrc	r19, 7
    337e:	40 95       	com	r20
    3380:	54 2f       	mov	r21, r20
    3382:	82 e0       	ldi	r24, 0x02	; 2
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	a8 0e       	add	r10, r24
    3388:	b9 1e       	adc	r11, r25
    338a:	9f e6       	ldi	r25, 0x6F	; 111
    338c:	f9 22       	and	r15, r25
    338e:	57 ff       	sbrs	r21, 7
    3390:	09 c0       	rjmp	.+18     	; 0x33a4 <vfprintf+0x21e>
    3392:	50 95       	com	r21
    3394:	40 95       	com	r20
    3396:	30 95       	com	r19
    3398:	21 95       	neg	r18
    339a:	3f 4f       	sbci	r19, 0xFF	; 255
    339c:	4f 4f       	sbci	r20, 0xFF	; 255
    339e:	5f 4f       	sbci	r21, 0xFF	; 255
    33a0:	e0 e8       	ldi	r30, 0x80	; 128
    33a2:	fe 2a       	or	r15, r30
    33a4:	ca 01       	movw	r24, r20
    33a6:	b9 01       	movw	r22, r18
    33a8:	a1 01       	movw	r20, r2
    33aa:	2a e0       	ldi	r18, 0x0A	; 10
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__ultoa_invert>
    33b2:	d8 2e       	mov	r13, r24
    33b4:	d2 18       	sub	r13, r2
    33b6:	40 c0       	rjmp	.+128    	; 0x3438 <vfprintf+0x2b2>
    33b8:	95 37       	cpi	r25, 0x75	; 117
    33ba:	29 f4       	brne	.+10     	; 0x33c6 <vfprintf+0x240>
    33bc:	1f 2d       	mov	r17, r15
    33be:	1f 7e       	andi	r17, 0xEF	; 239
    33c0:	2a e0       	ldi	r18, 0x0A	; 10
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	1d c0       	rjmp	.+58     	; 0x3400 <vfprintf+0x27a>
    33c6:	1f 2d       	mov	r17, r15
    33c8:	19 7f       	andi	r17, 0xF9	; 249
    33ca:	9f 36       	cpi	r25, 0x6F	; 111
    33cc:	61 f0       	breq	.+24     	; 0x33e6 <vfprintf+0x260>
    33ce:	90 37       	cpi	r25, 0x70	; 112
    33d0:	20 f4       	brcc	.+8      	; 0x33da <vfprintf+0x254>
    33d2:	98 35       	cpi	r25, 0x58	; 88
    33d4:	09 f0       	breq	.+2      	; 0x33d8 <vfprintf+0x252>
    33d6:	ac c0       	rjmp	.+344    	; 0x3530 <vfprintf+0x3aa>
    33d8:	0f c0       	rjmp	.+30     	; 0x33f8 <vfprintf+0x272>
    33da:	90 37       	cpi	r25, 0x70	; 112
    33dc:	39 f0       	breq	.+14     	; 0x33ec <vfprintf+0x266>
    33de:	98 37       	cpi	r25, 0x78	; 120
    33e0:	09 f0       	breq	.+2      	; 0x33e4 <vfprintf+0x25e>
    33e2:	a6 c0       	rjmp	.+332    	; 0x3530 <vfprintf+0x3aa>
    33e4:	04 c0       	rjmp	.+8      	; 0x33ee <vfprintf+0x268>
    33e6:	28 e0       	ldi	r18, 0x08	; 8
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	0a c0       	rjmp	.+20     	; 0x3400 <vfprintf+0x27a>
    33ec:	10 61       	ori	r17, 0x10	; 16
    33ee:	14 fd       	sbrc	r17, 4
    33f0:	14 60       	ori	r17, 0x04	; 4
    33f2:	20 e1       	ldi	r18, 0x10	; 16
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	04 c0       	rjmp	.+8      	; 0x3400 <vfprintf+0x27a>
    33f8:	14 fd       	sbrc	r17, 4
    33fa:	16 60       	ori	r17, 0x06	; 6
    33fc:	20 e1       	ldi	r18, 0x10	; 16
    33fe:	32 e0       	ldi	r19, 0x02	; 2
    3400:	17 ff       	sbrs	r17, 7
    3402:	08 c0       	rjmp	.+16     	; 0x3414 <vfprintf+0x28e>
    3404:	f5 01       	movw	r30, r10
    3406:	60 81       	ld	r22, Z
    3408:	71 81       	ldd	r23, Z+1	; 0x01
    340a:	82 81       	ldd	r24, Z+2	; 0x02
    340c:	93 81       	ldd	r25, Z+3	; 0x03
    340e:	44 e0       	ldi	r20, 0x04	; 4
    3410:	50 e0       	ldi	r21, 0x00	; 0
    3412:	08 c0       	rjmp	.+16     	; 0x3424 <vfprintf+0x29e>
    3414:	f5 01       	movw	r30, r10
    3416:	80 81       	ld	r24, Z
    3418:	91 81       	ldd	r25, Z+1	; 0x01
    341a:	bc 01       	movw	r22, r24
    341c:	80 e0       	ldi	r24, 0x00	; 0
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	42 e0       	ldi	r20, 0x02	; 2
    3422:	50 e0       	ldi	r21, 0x00	; 0
    3424:	a4 0e       	add	r10, r20
    3426:	b5 1e       	adc	r11, r21
    3428:	a1 01       	movw	r20, r2
    342a:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__ultoa_invert>
    342e:	d8 2e       	mov	r13, r24
    3430:	d2 18       	sub	r13, r2
    3432:	8f e7       	ldi	r24, 0x7F	; 127
    3434:	f8 2e       	mov	r15, r24
    3436:	f1 22       	and	r15, r17
    3438:	f6 fe       	sbrs	r15, 6
    343a:	0b c0       	rjmp	.+22     	; 0x3452 <vfprintf+0x2cc>
    343c:	5e ef       	ldi	r21, 0xFE	; 254
    343e:	f5 22       	and	r15, r21
    3440:	d9 14       	cp	r13, r9
    3442:	38 f4       	brcc	.+14     	; 0x3452 <vfprintf+0x2cc>
    3444:	f4 fe       	sbrs	r15, 4
    3446:	07 c0       	rjmp	.+14     	; 0x3456 <vfprintf+0x2d0>
    3448:	f2 fc       	sbrc	r15, 2
    344a:	05 c0       	rjmp	.+10     	; 0x3456 <vfprintf+0x2d0>
    344c:	8f ee       	ldi	r24, 0xEF	; 239
    344e:	f8 22       	and	r15, r24
    3450:	02 c0       	rjmp	.+4      	; 0x3456 <vfprintf+0x2d0>
    3452:	1d 2d       	mov	r17, r13
    3454:	01 c0       	rjmp	.+2      	; 0x3458 <vfprintf+0x2d2>
    3456:	19 2d       	mov	r17, r9
    3458:	f4 fe       	sbrs	r15, 4
    345a:	0d c0       	rjmp	.+26     	; 0x3476 <vfprintf+0x2f0>
    345c:	fe 01       	movw	r30, r28
    345e:	ed 0d       	add	r30, r13
    3460:	f1 1d       	adc	r31, r1
    3462:	80 81       	ld	r24, Z
    3464:	80 33       	cpi	r24, 0x30	; 48
    3466:	19 f4       	brne	.+6      	; 0x346e <vfprintf+0x2e8>
    3468:	99 ee       	ldi	r25, 0xE9	; 233
    346a:	f9 22       	and	r15, r25
    346c:	08 c0       	rjmp	.+16     	; 0x347e <vfprintf+0x2f8>
    346e:	1f 5f       	subi	r17, 0xFF	; 255
    3470:	f2 fe       	sbrs	r15, 2
    3472:	05 c0       	rjmp	.+10     	; 0x347e <vfprintf+0x2f8>
    3474:	03 c0       	rjmp	.+6      	; 0x347c <vfprintf+0x2f6>
    3476:	8f 2d       	mov	r24, r15
    3478:	86 78       	andi	r24, 0x86	; 134
    347a:	09 f0       	breq	.+2      	; 0x347e <vfprintf+0x2f8>
    347c:	1f 5f       	subi	r17, 0xFF	; 255
    347e:	0f 2d       	mov	r16, r15
    3480:	f3 fc       	sbrc	r15, 3
    3482:	14 c0       	rjmp	.+40     	; 0x34ac <vfprintf+0x326>
    3484:	f0 fe       	sbrs	r15, 0
    3486:	0f c0       	rjmp	.+30     	; 0x34a6 <vfprintf+0x320>
    3488:	1e 15       	cp	r17, r14
    348a:	10 f0       	brcs	.+4      	; 0x3490 <vfprintf+0x30a>
    348c:	9d 2c       	mov	r9, r13
    348e:	0b c0       	rjmp	.+22     	; 0x34a6 <vfprintf+0x320>
    3490:	9d 2c       	mov	r9, r13
    3492:	9e 0c       	add	r9, r14
    3494:	91 1a       	sub	r9, r17
    3496:	1e 2d       	mov	r17, r14
    3498:	06 c0       	rjmp	.+12     	; 0x34a6 <vfprintf+0x320>
    349a:	80 e2       	ldi	r24, 0x20	; 32
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	b3 01       	movw	r22, r6
    34a0:	0e 94 b6 1a 	call	0x356c	; 0x356c <fputc>
    34a4:	1f 5f       	subi	r17, 0xFF	; 255
    34a6:	1e 15       	cp	r17, r14
    34a8:	c0 f3       	brcs	.-16     	; 0x349a <vfprintf+0x314>
    34aa:	04 c0       	rjmp	.+8      	; 0x34b4 <vfprintf+0x32e>
    34ac:	1e 15       	cp	r17, r14
    34ae:	10 f4       	brcc	.+4      	; 0x34b4 <vfprintf+0x32e>
    34b0:	e1 1a       	sub	r14, r17
    34b2:	01 c0       	rjmp	.+2      	; 0x34b6 <vfprintf+0x330>
    34b4:	ee 24       	eor	r14, r14
    34b6:	04 ff       	sbrs	r16, 4
    34b8:	0f c0       	rjmp	.+30     	; 0x34d8 <vfprintf+0x352>
    34ba:	80 e3       	ldi	r24, 0x30	; 48
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	b3 01       	movw	r22, r6
    34c0:	0e 94 b6 1a 	call	0x356c	; 0x356c <fputc>
    34c4:	02 ff       	sbrs	r16, 2
    34c6:	1d c0       	rjmp	.+58     	; 0x3502 <vfprintf+0x37c>
    34c8:	01 fd       	sbrc	r16, 1
    34ca:	03 c0       	rjmp	.+6      	; 0x34d2 <vfprintf+0x34c>
    34cc:	88 e7       	ldi	r24, 0x78	; 120
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	0e c0       	rjmp	.+28     	; 0x34ee <vfprintf+0x368>
    34d2:	88 e5       	ldi	r24, 0x58	; 88
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	0b c0       	rjmp	.+22     	; 0x34ee <vfprintf+0x368>
    34d8:	80 2f       	mov	r24, r16
    34da:	86 78       	andi	r24, 0x86	; 134
    34dc:	91 f0       	breq	.+36     	; 0x3502 <vfprintf+0x37c>
    34de:	01 ff       	sbrs	r16, 1
    34e0:	02 c0       	rjmp	.+4      	; 0x34e6 <vfprintf+0x360>
    34e2:	8b e2       	ldi	r24, 0x2B	; 43
    34e4:	01 c0       	rjmp	.+2      	; 0x34e8 <vfprintf+0x362>
    34e6:	80 e2       	ldi	r24, 0x20	; 32
    34e8:	f7 fc       	sbrc	r15, 7
    34ea:	8d e2       	ldi	r24, 0x2D	; 45
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	b3 01       	movw	r22, r6
    34f0:	0e 94 b6 1a 	call	0x356c	; 0x356c <fputc>
    34f4:	06 c0       	rjmp	.+12     	; 0x3502 <vfprintf+0x37c>
    34f6:	80 e3       	ldi	r24, 0x30	; 48
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	b3 01       	movw	r22, r6
    34fc:	0e 94 b6 1a 	call	0x356c	; 0x356c <fputc>
    3500:	9a 94       	dec	r9
    3502:	d9 14       	cp	r13, r9
    3504:	c0 f3       	brcs	.-16     	; 0x34f6 <vfprintf+0x370>
    3506:	da 94       	dec	r13
    3508:	f1 01       	movw	r30, r2
    350a:	ed 0d       	add	r30, r13
    350c:	f1 1d       	adc	r31, r1
    350e:	80 81       	ld	r24, Z
    3510:	90 e0       	ldi	r25, 0x00	; 0
    3512:	b3 01       	movw	r22, r6
    3514:	0e 94 b6 1a 	call	0x356c	; 0x356c <fputc>
    3518:	dd 20       	and	r13, r13
    351a:	a9 f7       	brne	.-22     	; 0x3506 <vfprintf+0x380>
    351c:	06 c0       	rjmp	.+12     	; 0x352a <vfprintf+0x3a4>
    351e:	80 e2       	ldi	r24, 0x20	; 32
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	b3 01       	movw	r22, r6
    3524:	0e 94 b6 1a 	call	0x356c	; 0x356c <fputc>
    3528:	ea 94       	dec	r14
    352a:	ee 20       	and	r14, r14
    352c:	c1 f7       	brne	.-16     	; 0x351e <vfprintf+0x398>
    352e:	43 ce       	rjmp	.-890    	; 0x31b6 <vfprintf+0x30>
    3530:	f3 01       	movw	r30, r6
    3532:	66 81       	ldd	r22, Z+6	; 0x06
    3534:	77 81       	ldd	r23, Z+7	; 0x07
    3536:	cb 01       	movw	r24, r22
    3538:	2b 96       	adiw	r28, 0x0b	; 11
    353a:	e2 e1       	ldi	r30, 0x12	; 18
    353c:	0c 94 fc 17 	jmp	0x2ff8	; 0x2ff8 <__epilogue_restores__>

00003540 <strnlen_P>:
    3540:	fc 01       	movw	r30, r24
    3542:	05 90       	lpm	r0, Z+
    3544:	61 50       	subi	r22, 0x01	; 1
    3546:	70 40       	sbci	r23, 0x00	; 0
    3548:	01 10       	cpse	r0, r1
    354a:	d8 f7       	brcc	.-10     	; 0x3542 <strnlen_P+0x2>
    354c:	80 95       	com	r24
    354e:	90 95       	com	r25
    3550:	8e 0f       	add	r24, r30
    3552:	9f 1f       	adc	r25, r31
    3554:	08 95       	ret

00003556 <strnlen>:
    3556:	fc 01       	movw	r30, r24
    3558:	61 50       	subi	r22, 0x01	; 1
    355a:	70 40       	sbci	r23, 0x00	; 0
    355c:	01 90       	ld	r0, Z+
    355e:	01 10       	cpse	r0, r1
    3560:	d8 f7       	brcc	.-10     	; 0x3558 <strnlen+0x2>
    3562:	80 95       	com	r24
    3564:	90 95       	com	r25
    3566:	8e 0f       	add	r24, r30
    3568:	9f 1f       	adc	r25, r31
    356a:	08 95       	ret

0000356c <fputc>:
    356c:	0f 93       	push	r16
    356e:	1f 93       	push	r17
    3570:	cf 93       	push	r28
    3572:	df 93       	push	r29
    3574:	8c 01       	movw	r16, r24
    3576:	eb 01       	movw	r28, r22
    3578:	8b 81       	ldd	r24, Y+3	; 0x03
    357a:	81 ff       	sbrs	r24, 1
    357c:	1b c0       	rjmp	.+54     	; 0x35b4 <fputc+0x48>
    357e:	82 ff       	sbrs	r24, 2
    3580:	0d c0       	rjmp	.+26     	; 0x359c <fputc+0x30>
    3582:	2e 81       	ldd	r18, Y+6	; 0x06
    3584:	3f 81       	ldd	r19, Y+7	; 0x07
    3586:	8c 81       	ldd	r24, Y+4	; 0x04
    3588:	9d 81       	ldd	r25, Y+5	; 0x05
    358a:	28 17       	cp	r18, r24
    358c:	39 07       	cpc	r19, r25
    358e:	64 f4       	brge	.+24     	; 0x35a8 <fputc+0x3c>
    3590:	e8 81       	ld	r30, Y
    3592:	f9 81       	ldd	r31, Y+1	; 0x01
    3594:	01 93       	st	Z+, r16
    3596:	f9 83       	std	Y+1, r31	; 0x01
    3598:	e8 83       	st	Y, r30
    359a:	06 c0       	rjmp	.+12     	; 0x35a8 <fputc+0x3c>
    359c:	e8 85       	ldd	r30, Y+8	; 0x08
    359e:	f9 85       	ldd	r31, Y+9	; 0x09
    35a0:	80 2f       	mov	r24, r16
    35a2:	09 95       	icall
    35a4:	89 2b       	or	r24, r25
    35a6:	31 f4       	brne	.+12     	; 0x35b4 <fputc+0x48>
    35a8:	8e 81       	ldd	r24, Y+6	; 0x06
    35aa:	9f 81       	ldd	r25, Y+7	; 0x07
    35ac:	01 96       	adiw	r24, 0x01	; 1
    35ae:	9f 83       	std	Y+7, r25	; 0x07
    35b0:	8e 83       	std	Y+6, r24	; 0x06
    35b2:	02 c0       	rjmp	.+4      	; 0x35b8 <fputc+0x4c>
    35b4:	0f ef       	ldi	r16, 0xFF	; 255
    35b6:	1f ef       	ldi	r17, 0xFF	; 255
    35b8:	c8 01       	movw	r24, r16
    35ba:	df 91       	pop	r29
    35bc:	cf 91       	pop	r28
    35be:	1f 91       	pop	r17
    35c0:	0f 91       	pop	r16
    35c2:	08 95       	ret

000035c4 <__ultoa_invert>:
    35c4:	fa 01       	movw	r30, r20
    35c6:	aa 27       	eor	r26, r26
    35c8:	28 30       	cpi	r18, 0x08	; 8
    35ca:	51 f1       	breq	.+84     	; 0x3620 <__ultoa_invert+0x5c>
    35cc:	20 31       	cpi	r18, 0x10	; 16
    35ce:	81 f1       	breq	.+96     	; 0x3630 <__ultoa_invert+0x6c>
    35d0:	e8 94       	clt
    35d2:	6f 93       	push	r22
    35d4:	6e 7f       	andi	r22, 0xFE	; 254
    35d6:	6e 5f       	subi	r22, 0xFE	; 254
    35d8:	7f 4f       	sbci	r23, 0xFF	; 255
    35da:	8f 4f       	sbci	r24, 0xFF	; 255
    35dc:	9f 4f       	sbci	r25, 0xFF	; 255
    35de:	af 4f       	sbci	r26, 0xFF	; 255
    35e0:	b1 e0       	ldi	r27, 0x01	; 1
    35e2:	3e d0       	rcall	.+124    	; 0x3660 <__ultoa_invert+0x9c>
    35e4:	b4 e0       	ldi	r27, 0x04	; 4
    35e6:	3c d0       	rcall	.+120    	; 0x3660 <__ultoa_invert+0x9c>
    35e8:	67 0f       	add	r22, r23
    35ea:	78 1f       	adc	r23, r24
    35ec:	89 1f       	adc	r24, r25
    35ee:	9a 1f       	adc	r25, r26
    35f0:	a1 1d       	adc	r26, r1
    35f2:	68 0f       	add	r22, r24
    35f4:	79 1f       	adc	r23, r25
    35f6:	8a 1f       	adc	r24, r26
    35f8:	91 1d       	adc	r25, r1
    35fa:	a1 1d       	adc	r26, r1
    35fc:	6a 0f       	add	r22, r26
    35fe:	71 1d       	adc	r23, r1
    3600:	81 1d       	adc	r24, r1
    3602:	91 1d       	adc	r25, r1
    3604:	a1 1d       	adc	r26, r1
    3606:	20 d0       	rcall	.+64     	; 0x3648 <__ultoa_invert+0x84>
    3608:	09 f4       	brne	.+2      	; 0x360c <__ultoa_invert+0x48>
    360a:	68 94       	set
    360c:	3f 91       	pop	r19
    360e:	2a e0       	ldi	r18, 0x0A	; 10
    3610:	26 9f       	mul	r18, r22
    3612:	11 24       	eor	r1, r1
    3614:	30 19       	sub	r19, r0
    3616:	30 5d       	subi	r19, 0xD0	; 208
    3618:	31 93       	st	Z+, r19
    361a:	de f6       	brtc	.-74     	; 0x35d2 <__ultoa_invert+0xe>
    361c:	cf 01       	movw	r24, r30
    361e:	08 95       	ret
    3620:	46 2f       	mov	r20, r22
    3622:	47 70       	andi	r20, 0x07	; 7
    3624:	40 5d       	subi	r20, 0xD0	; 208
    3626:	41 93       	st	Z+, r20
    3628:	b3 e0       	ldi	r27, 0x03	; 3
    362a:	0f d0       	rcall	.+30     	; 0x364a <__ultoa_invert+0x86>
    362c:	c9 f7       	brne	.-14     	; 0x3620 <__ultoa_invert+0x5c>
    362e:	f6 cf       	rjmp	.-20     	; 0x361c <__ultoa_invert+0x58>
    3630:	46 2f       	mov	r20, r22
    3632:	4f 70       	andi	r20, 0x0F	; 15
    3634:	40 5d       	subi	r20, 0xD0	; 208
    3636:	4a 33       	cpi	r20, 0x3A	; 58
    3638:	18 f0       	brcs	.+6      	; 0x3640 <__ultoa_invert+0x7c>
    363a:	49 5d       	subi	r20, 0xD9	; 217
    363c:	31 fd       	sbrc	r19, 1
    363e:	40 52       	subi	r20, 0x20	; 32
    3640:	41 93       	st	Z+, r20
    3642:	02 d0       	rcall	.+4      	; 0x3648 <__ultoa_invert+0x84>
    3644:	a9 f7       	brne	.-22     	; 0x3630 <__ultoa_invert+0x6c>
    3646:	ea cf       	rjmp	.-44     	; 0x361c <__ultoa_invert+0x58>
    3648:	b4 e0       	ldi	r27, 0x04	; 4
    364a:	a6 95       	lsr	r26
    364c:	97 95       	ror	r25
    364e:	87 95       	ror	r24
    3650:	77 95       	ror	r23
    3652:	67 95       	ror	r22
    3654:	ba 95       	dec	r27
    3656:	c9 f7       	brne	.-14     	; 0x364a <__ultoa_invert+0x86>
    3658:	00 97       	sbiw	r24, 0x00	; 0
    365a:	61 05       	cpc	r22, r1
    365c:	71 05       	cpc	r23, r1
    365e:	08 95       	ret
    3660:	9b 01       	movw	r18, r22
    3662:	ac 01       	movw	r20, r24
    3664:	0a 2e       	mov	r0, r26
    3666:	06 94       	lsr	r0
    3668:	57 95       	ror	r21
    366a:	47 95       	ror	r20
    366c:	37 95       	ror	r19
    366e:	27 95       	ror	r18
    3670:	ba 95       	dec	r27
    3672:	c9 f7       	brne	.-14     	; 0x3666 <__ultoa_invert+0xa2>
    3674:	62 0f       	add	r22, r18
    3676:	73 1f       	adc	r23, r19
    3678:	84 1f       	adc	r24, r20
    367a:	95 1f       	adc	r25, r21
    367c:	a0 1d       	adc	r26, r0
    367e:	08 95       	ret

00003680 <_exit>:
    3680:	f8 94       	cli

00003682 <__stop_program>:
    3682:	ff cf       	rjmp	.-2      	; 0x3682 <__stop_program>
